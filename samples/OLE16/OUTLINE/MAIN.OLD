




#line 24 "c:\sc\samples\ole16\outline\outline.h"
#pragma message ("INCLUDING OUTLINE.H from " __FILE__)


















#line 3 "C:\SC\BIN\..\INCLUDE\windows.h"
 #pragma once



#pragma pack(__DEFALIGN)





#line 74 "C:\SC\BIN\..\INCLUDE\win16\windows.h"
#pragma pack(1)         /* Assume byte packing throughout */








#line 114








#line 129
typedef int		    BOOL;

#line 133
typedef unsigned char	    BYTE;
typedef unsigned short      WORD;
typedef unsigned long       DWORD;

typedef unsigned int	    UINT;


typedef signed long	    LONG;









#line 163
typedef UINT WPARAM;
typedef LONG LPARAM;
typedef LONG LRESULT;






#line 176
typedef char  _near*          PSTR;
typedef char  _near*          NPSTR;


typedef char  _far*           LPSTR;
typedef const char  _far*     LPCSTR;

typedef BYTE  _near*	    PBYTE;
typedef BYTE  _far*	    LPBYTE;

typedef int  _near*	    PINT;
typedef int  _far*	    LPINT;

typedef WORD  _near*          PWORD;
typedef WORD  _far*           LPWORD;

typedef long  _near*	    PLONG;
typedef long  _far*	    LPLONG;

typedef DWORD  _near*         PDWORD;
typedef DWORD  _far*          LPDWORD;

typedef void  _far*           LPVOID;





#line 210
typedef const void  _near*        HANDLE;

#line 220
typedef HANDLE* 	    PHANDLE;
typedef HANDLE  _near*	    SPHANDLE;
typedef HANDLE  _far*	    LPHANDLE;

typedef HANDLE		    HGLOBAL;
typedef HANDLE		    HLOCAL;

typedef HANDLE		    GLOBALHANDLE;
typedef HANDLE		    LOCALHANDLE;

typedef UINT                ATOM;


typedef void (_far  _pascal*     FARPROC)(void);
typedef void ( _near  _pascal*  NEARPROC)(void);

#line 240
struct HSTR__ { int unused; }; typedef const struct HSTR__  _near* HSTR ;



struct HINSTANCE__ { int unused; }; typedef const struct HINSTANCE__  _near* HINSTANCE ;
typedef HINSTANCE HMODULE;




#line 252
int  _pascal WinMain(HINSTANCE, HINSTANCE, LPSTR, int);




DWORD   _far  _pascal GetVersion(void);

DWORD   _far  _pascal GetFreeSpace(UINT);
UINT    _far  _pascal GetCurrentPDB(void);

UINT    _far  _pascal GetWindowsDirectory(LPSTR, UINT);
UINT    _far  _pascal GetSystemDirectory(LPSTR, UINT);


UINT    _far  _pascal GetFreeSystemResources(UINT);


#line 272
DWORD   _far  _pascal GetWinFlags(void);


#line 290
LPSTR   _far  _pascal GetDOSEnvironment(void);

DWORD   _far  _pascal GetCurrentTime(void);
DWORD   _far  _pascal GetTickCount(void);
DWORD   _far  _pascal GetTimerResolution(void);



#line 300

void    _far  _pascal LogError(UINT err, void  _far* lpInfo);
void    _far  _pascal LogParamError(UINT err, FARPROC lpfn, void  _far* param);



























#line 394
typedef struct tagWINDEBUGINFO
{
    UINT    flags;
    DWORD   dwOptions;
    DWORD   dwFilter;
    char    achAllocModule[8];
    DWORD   dwAllocBreak;
    DWORD   dwAllocCount;
} WINDEBUGINFO;

BOOL    _far  _pascal GetWinDebugInfo(WINDEBUGINFO  _far* lpwdi, UINT flags);
BOOL    _far  _pascal SetWinDebugInfo(const WINDEBUGINFO  _far* lpwdi);

void     _far _cdecl DebugOutput(UINT flags, LPCSTR lpsz, ...);














#line 449
void    _far  _pascal FatalExit(int);
void    _far  _pascal FatalAppExit(UINT, LPCSTR);

BOOL    _far  _pascal ExitWindows(DWORD dwReturnCode, UINT wReserved);

#line 457

BOOL    _far  _pascal ExitWindowsExec(LPCSTR, LPCSTR);


void    _far  _pascal DebugBreak(void);
void    _far  _pascal OutputDebugString(LPCSTR);



#line 469
UINT    _far  _pascal SetErrorMode(UINT);





BOOL    _far  _pascal IsBadReadPtr(const void  _far* lp, UINT cb);
BOOL    _far  _pascal IsBadWritePtr(void  _far* lp, UINT cb);
BOOL    _far  _pascal IsBadHugeReadPtr(const void _huge* lp, DWORD cb);
BOOL    _far  _pascal IsBadHugeWritePtr(void _huge* lp, DWORD cb);
BOOL    _far  _pascal IsBadCodePtr(FARPROC lpfn);
BOOL    _far  _pascal IsBadStringPtr(const void  _far* lpsz, UINT cchMax);






int     _far  _pascal ProfInsChk(void);
void    _far  _pascal ProfSetup(int,int);
void    _far  _pascal ProfSampRate(int,int);
void    _far  _pascal ProfStart(void);
void    _far  _pascal ProfStop(void);
void    _far  _pascal ProfClear(void);
void    _far  _pascal ProfFlush(void);
void    _far  _pascal ProfFinish(void);




typedef int CATCHBUF[9];
typedef int  _far* LPCATCHBUF;

int     _far  _pascal Catch(int  _far*);
void    _far  _pascal Throw(const int  _far*, int);

void    _far  _pascal SwitchStackBack(void);
void    _far  _pascal SwitchStackTo(UINT, UINT, UINT);






HINSTANCE   _far  _pascal LoadModule(LPCSTR, LPVOID);
BOOL        _far  _pascal FreeModule(HINSTANCE);

HINSTANCE   _far  _pascal LoadLibrary(LPCSTR);
void        _far  _pascal FreeLibrary(HINSTANCE);

UINT    _far  _pascal WinExec(LPCSTR, UINT);

HMODULE _far  _pascal GetModuleHandle(LPCSTR);

int     _far  _pascal GetModuleUsage(HINSTANCE);
int     _far  _pascal GetModuleFileName(HINSTANCE, LPSTR, int);

FARPROC _far  _pascal GetProcAddress(HINSTANCE, LPCSTR);

int     _far  _pascal GetInstanceData(HINSTANCE, BYTE*, int);

HGLOBAL _far  _pascal GetCodeHandle(FARPROC);

typedef struct tagSEGINFO
{
    UINT offSegment;
    UINT cbSegment;
    UINT flags;
    UINT cbAlloc;
    HGLOBAL h;
    UINT alignShift;
    UINT reserved[2];
} SEGINFO;
typedef SEGINFO  _far* LPSEGINFO;

void    _far  _pascal GetCodeInfo(FARPROC lpProc, SEGINFO  _far* lpSegInfo);

FARPROC _far  _pascal MakeProcInstance(FARPROC, HINSTANCE);
void    _far  _pascal FreeProcInstance(FARPROC);

LONG    _far  _pascal SetSwapAreaSize(UINT);
void    _far  _pascal SwapRecording(UINT);
void    _far  _pascal ValidateCodeSegments(void);







#line 561
struct HTASK__ { int unused; }; typedef const struct HTASK__  _near* HTASK ;



UINT    _far  _pascal GetNumTasks(void);


BOOL    _far  _pascal IsTask(HTASK);


HTASK   _far  _pascal GetCurrentTask(void);

void    _far  _pascal Yield(void);
void    _far  _pascal DirectedYield(HTASK);










#line 601
HGLOBAL _far  _pascal GlobalAlloc(UINT, DWORD);
HGLOBAL _far  _pascal GlobalReAlloc(HGLOBAL, DWORD, UINT);
HGLOBAL _far  _pascal GlobalFree(HGLOBAL);

DWORD   _far  _pascal GlobalDosAlloc(DWORD);
UINT    _far  _pascal GlobalDosFree(UINT);


void  _far* _far  _pascal GlobalLock(HGLOBAL);

#line 614
BOOL    _far  _pascal GlobalUnlock(HGLOBAL);

DWORD   _far  _pascal GlobalSize(HGLOBAL);
DWORD   _far  _pascal GlobalHandle(UINT);


#line 622
UINT    _far  _pascal GlobalFlags(HGLOBAL);


void  _far* _far  _pascal GlobalWire(HGLOBAL);

#line 630
BOOL    _far  _pascal GlobalUnWire(HGLOBAL);

UINT    _far  _pascal GlobalPageLock(HGLOBAL);
UINT    _far  _pascal GlobalPageUnlock(HGLOBAL);

void    _far  _pascal GlobalFix(HGLOBAL);
void    _far  _pascal GlobalUnfix(HGLOBAL);

HGLOBAL _far  _pascal GlobalLRUNewest(HGLOBAL);
HGLOBAL _far  _pascal GlobalLRUOldest(HGLOBAL);

DWORD   _far  _pascal GlobalCompact(DWORD);


typedef BOOL (_far  _pascal* GNOTIFYPROC)(HGLOBAL);

#line 649
void    _far  _pascal GlobalNotify(GNOTIFYPROC);

HGLOBAL _far  _pascal LockSegment(UINT);
void    _far  _pascal UnlockSegment(UINT);


#line 657
UINT    _far  _pascal AllocSelector(UINT);
UINT    _far  _pascal FreeSelector(UINT);
UINT    _far  _pascal AllocDStoCSAlias(UINT);
UINT    _far  _pascal PrestoChangoSelector(UINT sourceSel, UINT destSel);
DWORD   _far  _pascal GetSelectorBase(UINT);
UINT    _far  _pascal SetSelectorBase(UINT, DWORD);
DWORD   _far  _pascal GetSelectorLimit(UINT);
UINT    _far  _pascal SetSelectorLimit(UINT, DWORD);

void    _far  _pascal LimitEmsPages(DWORD);

void    _far  _pascal ValidateFreeSpaces(void);












#line 694
HLOCAL  _far  _pascal LocalAlloc(UINT, UINT);
HLOCAL  _far  _pascal LocalReAlloc(HLOCAL, UINT, UINT);
HLOCAL  _far  _pascal LocalFree(HLOCAL);


void  _near* _far  _pascal LocalLock(HLOCAL);

#line 704
BOOL    _far  _pascal LocalUnlock(HLOCAL);

UINT    _far  _pascal LocalSize(HLOCAL);

HLOCAL  _far  _pascal LocalHandle(void  _near*);



#line 717
UINT    _far  _pascal LocalFlags(HLOCAL);

BOOL    _far  _pascal LocalInit(UINT, UINT, UINT);
UINT    _far  _pascal LocalCompact(UINT);
UINT    _far  _pascal LocalShrink(HLOCAL, UINT);







typedef int HFILE;




#line 736
typedef struct tagOFSTRUCT
{
    BYTE cBytes;
    BYTE fFixedDisk;
    UINT nErrCode;
    BYTE reserved[4];
    char szPathName[128];
} OFSTRUCT;
typedef OFSTRUCT*       POFSTRUCT;
typedef OFSTRUCT  _near* NPOFSTRUCT;
typedef OFSTRUCT  _far*  LPOFSTRUCT;



#line 767
HFILE   _far  _pascal OpenFile(LPCSTR, OFSTRUCT  _far*, UINT);





#line 776
HFILE   _far  _pascal _lopen(LPCSTR, int);
HFILE   _far  _pascal _lcreat(LPCSTR, int);

HFILE   _far  _pascal _lclose(HFILE);

LONG    _far  _pascal _llseek(HFILE, LONG, int);



#line 788
UINT    _far  _pascal _lread(HFILE, void _huge*, UINT);
UINT    _far  _pascal _lwrite(HFILE, const void _huge*, UINT);


long	_far  _pascal _hread(HFILE, void _huge*, long);
long	_far  _pascal _hwrite(HFILE, const void _huge*, long);








int     _far  _pascal GetTempFileName(BYTE, LPCSTR, UINT, LPSTR);
BYTE    _far  _pascal GetTempDrive(char);


#line 809
UINT    _far  _pascal GetDriveType(int);

UINT    _far  _pascal SetHandleCount(UINT);


UINT _far  _pascal WNetAddConnection(LPSTR, LPSTR, LPSTR);
UINT _far  _pascal WNetGetConnection(LPSTR, LPSTR, UINT  _far*);
UINT _far  _pascal WNetCancelConnection(LPSTR, BOOL);






#line 844
struct HRSRC__ { int unused; }; typedef const struct HRSRC__  _near* HRSRC ;

HRSRC   _far  _pascal FindResource(HINSTANCE, LPCSTR, LPCSTR);
HGLOBAL _far  _pascal LoadResource(HINSTANCE, HRSRC);
BOOL    _far  _pascal FreeResource(HGLOBAL);


void  _far* _far  _pascal LockResource(HGLOBAL);


#line 858
DWORD   _far  _pascal SizeofResource(HINSTANCE, HRSRC);

int     _far  _pascal AccessResource(HINSTANCE, HRSRC);

HGLOBAL _far  _pascal AllocResource(HINSTANCE, HRSRC, DWORD);


typedef HGLOBAL (_far  _pascal* RSRCHDLRPROC)(HGLOBAL, HINSTANCE, HRSRC);

#line 870
RSRCHDLRPROC _far  _pascal SetResourceHandler(HINSTANCE, LPCSTR, RSRCHDLRPROC);










#line 918











#line 962
BOOL    _far  _pascal InitAtomTable(int);
ATOM    _far  _pascal AddAtom(LPCSTR);
ATOM    _far  _pascal DeleteAtom(ATOM);
ATOM    _far  _pascal FindAtom(LPCSTR);
UINT    _far  _pascal GetAtomName(ATOM, LPSTR, int);
ATOM    _far  _pascal GlobalAddAtom(LPCSTR);
ATOM    _far  _pascal GlobalDeleteAtom(ATOM);
ATOM    _far  _pascal GlobalFindAtom(LPCSTR);
UINT    _far  _pascal GlobalGetAtomName(ATOM, LPSTR, int);
HLOCAL  _far  _pascal GetAtomHandle(ATOM);






UINT    _far  _pascal GetProfileInt(LPCSTR, LPCSTR, int);
int     _far  _pascal GetProfileString(LPCSTR, LPCSTR, LPCSTR, LPSTR, int);
BOOL    _far  _pascal WriteProfileString(LPCSTR, LPCSTR, LPCSTR);

UINT    _far  _pascal GetPrivateProfileInt(LPCSTR, LPCSTR, int, LPCSTR);
int     _far  _pascal GetPrivateProfileString(LPCSTR, LPCSTR, LPCSTR, LPSTR, int, LPCSTR);
BOOL    _far  _pascal WritePrivateProfileString(LPCSTR, LPCSTR, LPCSTR, LPCSTR);





void    _far  _pascal AnsiToOem(const char _huge*, char _huge*);
void    _far  _pascal OemToAnsi(const char _huge*, char _huge*);

void    _far  _pascal AnsiToOemBuff(LPCSTR, LPSTR, UINT);
void    _far  _pascal OemToAnsiBuff(LPCSTR, LPSTR, UINT);

LPSTR   _far  _pascal AnsiNext(LPCSTR);
LPSTR   _far  _pascal AnsiPrev(LPCSTR, LPCSTR);

LPSTR   _far  _pascal AnsiUpper(LPSTR);
LPSTR   _far  _pascal AnsiLower(LPSTR);

UINT    _far  _pascal AnsiUpperBuff(LPSTR, UINT);
UINT    _far  _pascal AnsiLowerBuff(LPSTR, UINT);



BOOL    _far  _pascal IsCharAlpha(char);
BOOL    _far  _pascal IsCharAlphaNumeric(char);
BOOL    _far  _pascal IsCharUpper(char);
BOOL    _far  _pascal IsCharLower(char);



int     _far  _pascal lstrcmp(LPCSTR, LPCSTR);
int     _far  _pascal lstrcmpi(LPCSTR, LPCSTR);
LPSTR   _far  _pascal lstrcpy(LPSTR, LPCSTR);
LPSTR   _far  _pascal lstrcat(LPSTR, LPCSTR);
int     _far  _pascal lstrlen(LPCSTR);

LPSTR   _far  _pascal lstrcpyn(LPSTR, LPCSTR, int);
void    _far  _pascal hmemcpy(void _huge*, const void _huge*, long);



#line 1027
 BOOL    _far  _pascal IsDBCSLeadByte(BYTE);



int     _far  _pascal LoadString(HINSTANCE, UINT, LPSTR, int);





DWORD   _far  _pascal OemKeyScan(UINT);
UINT    _far  _pascal VkKeyScan(UINT);
int     _far  _pascal GetKeyboardType(int);
UINT    _far  _pascal MapVirtualKey(UINT, UINT);
int     _far  _pascal GetKBCodePage(void);
int     _far  _pascal GetKeyNameText(LONG, LPSTR, int);
int     _far  _pascal ToAscii(UINT wVirtKey, UINT wScanCode, BYTE  _far* lpKeyState, DWORD  _far* lpChar, UINT wFlags);







struct HDC__ { int unused; }; typedef const struct HDC__  _near* HDC ;


#line 1056
typedef const void  _near* HGDIOBJ;



#line 1063
struct HBITMAP__ { int unused; }; typedef const struct HBITMAP__  _near* HBITMAP ;
struct HPEN__ { int unused; }; typedef const struct HPEN__  _near* HPEN ;
struct HBRUSH__ { int unused; }; typedef const struct HBRUSH__  _near* HBRUSH ;
struct HRGN__ { int unused; }; typedef const struct HRGN__  _near* HRGN ;
struct HPALETTE__ { int unused; }; typedef const struct HPALETTE__  _near* HPALETTE ;
struct HFONT__ { int unused; }; typedef const struct HFONT__  _near* HFONT ;

typedef struct tagRECT
{
    int left;
    int top;
    int right;
    int bottom;
} RECT;
typedef RECT*      PRECT;
typedef RECT  _near* NPRECT;
typedef RECT  _far*  LPRECT;

typedef struct tagPOINT
{
    int x;
    int y;
} POINT;
typedef POINT*       PPOINT;
typedef POINT  _near* NPPOINT;
typedef POINT  _far*  LPPOINT;


typedef struct tagSIZE
{
    int cx;
    int cy;
} SIZE;
typedef SIZE*       PSIZE;
typedef SIZE  _near* NPSIZE;
typedef SIZE  _far*  LPSIZE;






#line 1107
HDC     _far  _pascal CreateDC(LPCSTR, LPCSTR, LPCSTR, const void  _far*);
HDC     _far  _pascal CreateIC(LPCSTR, LPCSTR, LPCSTR, const void  _far*);
HDC     _far  _pascal CreateCompatibleDC(HDC);

BOOL    _far  _pascal DeleteDC(HDC);

DWORD   _far  _pascal GetDCOrg(HDC);

int     _far  _pascal SaveDC(HDC);
BOOL    _far  _pascal RestoreDC(HDC, int);

int     _far  _pascal SetEnvironment(LPCSTR, const void  _far*, UINT);
int     _far  _pascal GetEnvironment(LPCSTR, void  _far*, UINT);

int     _far  _pascal MulDiv(int, int, int);



UINT    _far  _pascal SetBoundsRect(HDC hDC, const RECT  _far* lprcBounds, UINT flags);
UINT    _far  _pascal GetBoundsRect(HDC hDC, RECT  _far* lprcBounds, UINT flags);





#line 1138
int _far  _pascal GetDeviceCaps(HDC, int);


























#line 1264
int     _far  _pascal SetMapMode(HDC, int);
int     _far  _pascal GetMapMode(HDC);



#line 1277
DWORD   _far  _pascal SetWindowOrg(HDC, int, int);
DWORD   _far  _pascal GetWindowOrg(HDC);

DWORD   _far  _pascal SetWindowExt(HDC, int, int);
DWORD   _far  _pascal GetWindowExt(HDC);

DWORD   _far  _pascal OffsetWindowOrg(HDC, int, int);
DWORD   _far  _pascal ScaleWindowExt(HDC, int, int, int, int);

DWORD   _far  _pascal SetViewportOrg(HDC, int, int);
DWORD   _far  _pascal GetViewportOrg(HDC);

DWORD   _far  _pascal SetViewportExt(HDC, int, int);
DWORD   _far  _pascal GetViewportExt(HDC);

DWORD   _far  _pascal OffsetViewportOrg(HDC, int, int);
DWORD   _far  _pascal ScaleViewportExt(HDC, int, int, int, int);


BOOL    _far  _pascal SetWindowOrgEx(HDC, int, int, POINT  _far*);
BOOL    _far  _pascal GetWindowOrgEx(HDC, POINT  _far*);

BOOL    _far  _pascal SetWindowExtEx(HDC, int, int, SIZE  _far*);
BOOL    _far  _pascal GetWindowExtEx(HDC, SIZE  _far*);

BOOL    _far  _pascal OffsetWindowOrgEx(HDC, int, int, POINT  _far*);
BOOL    _far  _pascal ScaleWindowExtEx(HDC, int, int, int, int, SIZE  _far*);

BOOL    _far  _pascal SetViewportExtEx(HDC, int, int, SIZE  _far*);
BOOL    _far  _pascal GetViewportExtEx(HDC, SIZE  _far*);

BOOL    _far  _pascal SetViewportOrgEx(HDC, int, int, POINT  _far*);
BOOL    _far  _pascal GetViewportOrgEx(HDC, POINT  _far*);

BOOL    _far  _pascal OffsetViewportOrgEx(HDC, int, int, POINT  _far*);
BOOL    _far  _pascal ScaleViewportExtEx(HDC, int, int, int, int, SIZE  _far*);


BOOL    _far  _pascal DPtoLP(HDC, POINT  _far*, int);
BOOL    _far  _pascal LPtoDP(HDC, POINT  _far*, int);






#line 1325
typedef DWORD COLORREF;



#line 1333
COLORREF _far  _pascal GetNearestColor(HDC, COLORREF);



COLORREF _far  _pascal GetSysColor(int);
void    _far  _pascal SetSysColors(int, const int  _far*, const COLORREF  _far*);

#line 1362








#line 1372
HGDIOBJ _far  _pascal GetStockObject(int);

BOOL    _far  _pascal IsGDIObject(HGDIOBJ);

BOOL    _far  _pascal DeleteObject(HGDIOBJ);
HGDIOBJ _far  _pascal SelectObject(HDC, HGDIOBJ);
int     _far  _pascal GetObject(HGDIOBJ, int, void  _far*);
BOOL    _far  _pascal UnrealizeObject(HGDIOBJ);


typedef (_far  _pascal* GOBJENUMPROC)(void  _far*, LPARAM);

#line 1388
int     _far  _pascal EnumObjects(HDC, int, GOBJENUMPROC, LPARAM);






#line 1400
typedef struct tagLOGPEN
{
    UINT    lopnStyle;
    POINT   lopnWidth;
    COLORREF lopnColor;
} LOGPEN;
typedef LOGPEN*       PLOGPEN;
typedef LOGPEN  _near* NPLOGPEN;
typedef LOGPEN  _far*  LPLOGPEN;



#line 1419
HPEN    _far  _pascal CreatePen(int, int, COLORREF);
HPEN    _far  _pascal CreatePenIndirect(LOGPEN  _far*);










#line 1447
typedef struct tagLOGBRUSH
{
    UINT     lbStyle;
    COLORREF lbColor;
    int      lbHatch;
} LOGBRUSH;
typedef LOGBRUSH*       PLOGBRUSH;
typedef LOGBRUSH  _near* NPLOGBRUSH;
typedef LOGBRUSH  _far*  LPLOGBRUSH;

typedef LOGBRUSH	    PATTERN;
typedef PATTERN*       PPATTERN;
typedef PATTERN  _near* NPPATTERN;
typedef PATTERN  _far*  LPPATTERN;

HBRUSH  _far  _pascal CreateSolidBrush(COLORREF);
HBRUSH  _far  _pascal CreateHatchBrush(int, COLORREF);
HBRUSH  _far  _pascal CreatePatternBrush(HBITMAP);
HBRUSH  _far  _pascal CreateDIBPatternBrush(HGLOBAL, UINT);
HBRUSH  _far  _pascal CreateBrushIndirect(LOGBRUSH  _far*);



#line 1477
DWORD   _far  _pascal SetBrushOrg(HDC, int, int);
DWORD   _far  _pascal GetBrushOrg(HDC);


BOOL    _far  _pascal GetBrushOrgEx(HDC, POINT  _far*);





HRGN    _far  _pascal CreateRectRgn(int, int, int, int);
HRGN    _far  _pascal CreateRectRgnIndirect(const RECT  _far*);
HRGN    _far  _pascal CreateEllipticRgnIndirect(const RECT  _far*);
HRGN    _far  _pascal CreateEllipticRgn(int, int, int, int);
HRGN    _far  _pascal CreatePolygonRgn(const POINT  _far*, int, int);
HRGN    _far  _pascal CreatePolyPolygonRgn(const POINT  _far*, const int  _far*, int, int);
HRGN    _far  _pascal CreateRoundRectRgn(int, int, int, int, int, int);



#line 1501
void    _far  _pascal SetRectRgn(HRGN, int, int, int, int);

int     _far  _pascal CombineRgn(HRGN, HRGN, HRGN, int);



#line 1512
BOOL    _far  _pascal EqualRgn(HRGN, HRGN);
int     _far  _pascal OffsetRgn(HRGN, int, int);

int     _far  _pascal GetRgnBox(HRGN, RECT  _far*);

BOOL    _far  _pascal RectInRegion(HRGN, const RECT  _far*);
BOOL    _far  _pascal PtInRegion(HRGN, int, int);




#line 1525
typedef struct tagPALETTEENTRY
{
    BYTE    peRed;
    BYTE    peGreen;
    BYTE    peBlue;
    BYTE    peFlags;
} PALETTEENTRY;
typedef PALETTEENTRY  _far* LPPALETTEENTRY;




#line 1540
typedef struct tagLOGPALETTE
{
    WORD    palVersion;
    WORD    palNumEntries;
    PALETTEENTRY palPalEntry[1];
} LOGPALETTE;
typedef LOGPALETTE*       PLOGPALETTE;
typedef LOGPALETTE  _near* NPLOGPALETTE;
typedef LOGPALETTE  _far*  LPLOGPALETTE;

HPALETTE _far  _pascal CreatePalette(const LOGPALETTE  _far*);

HPALETTE _far  _pascal SelectPalette(HDC, HPALETTE, BOOL);

UINT    _far  _pascal RealizePalette(HDC);

int     _far  _pascal UpdateColors(HDC);
void    _far  _pascal AnimatePalette(HPALETTE, UINT, UINT, const PALETTEENTRY  _far*);

UINT    _far  _pascal SetPaletteEntries(HPALETTE, UINT, UINT, const PALETTEENTRY  _far*);
UINT    _far  _pascal GetPaletteEntries(HPALETTE, UINT, UINT, PALETTEENTRY  _far*);

UINT    _far  _pascal GetNearestPaletteIndex(HPALETTE, COLORREF);

BOOL    _far  _pascal ResizePalette(HPALETTE, UINT);

UINT    _far  _pascal GetSystemPaletteEntries(HDC, UINT, UINT, PALETTEENTRY  _far*);

UINT    _far  _pascal GetSystemPaletteUse(HDC);
UINT    _far  _pascal SetSystemPaletteUse(HDC, UINT);







#line 1582
int     _far  _pascal SelectClipRgn(HDC, HRGN);
int     _far  _pascal GetClipBox(HDC, RECT  _far*);

int     _far  _pascal IntersectClipRect(HDC, int, int, int, int);
int     _far  _pascal OffsetClipRgn(HDC, int, int);
int     _far  _pascal ExcludeClipRect(HDC, int, int, int, int);

BOOL    _far  _pascal PtVisible(HDC, int, int);
BOOL    _far  _pascal RectVisible(HDC, const RECT  _far*);




DWORD   _far  _pascal MoveTo(HDC, int, int);
DWORD   _far  _pascal GetCurrentPosition(HDC);


BOOL    _far  _pascal MoveToEx(HDC, int, int, POINT  _far*);
BOOL    _far  _pascal GetCurrentPositionEx(HDC, POINT  _far*);


BOOL    _far  _pascal LineTo(HDC, int, int);
BOOL    _far  _pascal Polyline(HDC, const POINT  _far*, int);


typedef void (_far  _pascal* LINEDDAPROC)(int, int, LPARAM);

#line 1612
void    _far  _pascal LineDDA(int, int, int, int, LINEDDAPROC, LPARAM);

BOOL    _far  _pascal Rectangle(HDC, int, int, int, int);
BOOL    _far  _pascal RoundRect(HDC, int, int, int, int, int, int);

BOOL    _far  _pascal Ellipse(HDC, int, int, int, int);
BOOL    _far  _pascal Arc(HDC, int, int, int, int, int, int, int, int);
BOOL    _far  _pascal Chord(HDC, int, int, int, int, int, int, int, int);
BOOL    _far  _pascal Pie(HDC, int, int, int, int, int, int, int, int);

BOOL    _far  _pascal Polygon(HDC, const POINT  _far*, int);
BOOL    _far  _pascal PolyPolygon(HDC, const POINT  _far*, int  _far*, int);



#line 1629
int     _far  _pascal SetPolyFillMode(HDC, int);
int     _far  _pascal GetPolyFillMode(HDC);

BOOL    _far  _pascal FloodFill(HDC, int, int, COLORREF);
BOOL    _far  _pascal ExtFloodFill(HDC, int, int, COLORREF, UINT);



#line 1639
BOOL    _far  _pascal FillRgn(HDC, HRGN, HBRUSH);
BOOL    _far  _pascal FrameRgn(HDC, HRGN, HBRUSH, int, int);
BOOL    _far  _pascal InvertRgn(HDC, HRGN);
BOOL    _far  _pascal PaintRgn(HDC, HRGN);


int     _far  _pascal FillRect(HDC, const RECT  _far*, HBRUSH);
int     _far  _pascal FrameRect(HDC, const RECT  _far*, HBRUSH);
void    _far  _pascal InvertRect(HDC, const RECT  _far*);

void    _far  _pascal DrawFocusRect(HDC, const RECT  _far*);




BOOL    _far  _pascal TextOut(HDC, int, int, LPCSTR, int);
LONG    _far  _pascal TabbedTextOut(HDC, int, int, LPCSTR, int, int, int  _far*, int);
BOOL    _far  _pascal ExtTextOut(HDC, int, int, UINT, const RECT  _far*, LPCSTR, UINT, int  _far*);


#line 1662
DWORD   _far  _pascal GetTextExtent(HDC, LPCSTR, int);
DWORD   _far  _pascal GetTabbedTextExtent(HDC, LPCSTR, int, int, int  _far*);


BOOL    _far  _pascal GetTextExtentPoint(HDC, LPCSTR, int, SIZE  _far*);




#line 1687
int     _far  _pascal DrawText(HDC, LPCSTR, int, RECT  _far*, UINT);



typedef BOOL (_far  _pascal* GRAYSTRINGPROC)(HDC, LPARAM, int);

#line 1696
BOOL    _far  _pascal GrayString(HDC, HBRUSH, GRAYSTRINGPROC, LPARAM, int, int, int, int, int);

BOOL    _far  _pascal GetCharWidth(HDC, UINT, UINT, int  _far*);

COLORREF _far  _pascal SetTextColor(HDC, COLORREF);
COLORREF _far  _pascal GetTextColor(HDC);

COLORREF _far  _pascal SetBkColor(HDC, COLORREF);
COLORREF _far  _pascal GetBkColor(HDC);

int     _far  _pascal SetBkMode(HDC, int);
int     _far  _pascal GetBkMode(HDC);



#line 1713
UINT    _far  _pascal SetTextAlign(HDC, UINT);
UINT    _far  _pascal GetTextAlign(HDC);



#line 1726
int     _far  _pascal SetTextCharacterExtra(HDC, int);
int     _far  _pascal GetTextCharacterExtra(HDC);

int     _far  _pascal SetTextJustification(HDC, int, int);




#line 1736
typedef struct tagLOGFONT
{
    int     lfHeight;
    int     lfWidth;
    int     lfEscapement;
    int     lfOrientation;
    int     lfWeight;
    BYTE    lfItalic;
    BYTE    lfUnderline;
    BYTE    lfStrikeOut;
    BYTE    lfCharSet;
    BYTE    lfOutPrecision;
    BYTE    lfClipPrecision;
    BYTE    lfQuality;
    BYTE    lfPitchAndFamily;
    char    lfFaceName[32 ];
} LOGFONT;
typedef LOGFONT*       PLOGFONT;
typedef LOGFONT  _near* NPLOGFONT;
typedef LOGFONT  _far*  LPLOGFONT;







#line 1794



#line 1805








#line 1825
HFONT   _far  _pascal CreateFont(int, int, int, int, int, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, BYTE, LPCSTR);
HFONT   _far  _pascal CreateFontIndirect(const LOGFONT  _far*);




#line 1838
DWORD   _far  _pascal SetMapperFlags(HDC, DWORD);


int     _far  _pascal AddFontResource(LPCSTR);
BOOL    _far  _pascal RemoveFontResource(LPCSTR);



int     _far  _pascal GetTextFace(HDC, int, LPSTR);

DWORD   _far  _pascal GetAspectRatioFilter(HDC);

BOOL    _far  _pascal GetAspectRatioFilterEx(HDC, SIZE  _far*);






typedef struct tagTEXTMETRIC
{
    int     tmHeight;
    int     tmAscent;
    int     tmDescent;
    int     tmInternalLeading;
    int     tmExternalLeading;
    int     tmAveCharWidth;
    int     tmMaxCharWidth;
    int     tmWeight;
    BYTE    tmItalic;
    BYTE    tmUnderlined;
    BYTE    tmStruckOut;
    BYTE    tmFirstChar;
    BYTE    tmLastChar;
    BYTE    tmDefaultChar;
    BYTE    tmBreakChar;
    BYTE    tmPitchAndFamily;
    BYTE    tmCharSet;
    int     tmOverhang;
    int     tmDigitizedAspectX;
    int     tmDigitizedAspectY;
} TEXTMETRIC;
typedef TEXTMETRIC*       PTEXTMETRIC;
typedef TEXTMETRIC  _near* NPTEXTMETRIC;
typedef TEXTMETRIC  _far*  LPTEXTMETRIC;


#line 1890


BOOL    _far  _pascal GetTextMetrics(HDC, TEXTMETRIC  _far*);

#line 1896

typedef struct tagPANOSE
{
    BYTE    bFamilyType;
    BYTE    bSerifStyle;
    BYTE    bWeight;
    BYTE    bProportion;
    BYTE    bContrast;
    BYTE    bStrokeVariation;
    BYTE    bArmStyle;
    BYTE    bLetterform;
    BYTE    bMidline;
    BYTE    bXHeight;
} PANOSE,  _far* LPPANOSE;

typedef struct tagOUTLINETEXTMETRIC
{
    UINT    otmSize;
    TEXTMETRIC otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
    int     otmsCharSlopeRise;
    int     otmsCharSlopeRun;
    int     otmItalicAngle;
    UINT    otmEMSquare;
    int     otmAscent;
    int     otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
    int     otmMacAscent;
    int     otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
    int     otmsStrikeoutPosition;
    int     otmsUnderscorePosition;
    int     otmsUnderscoreSize;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRIC,  _far* LPOUTLINETEXTMETRIC;

WORD    _far  _pascal GetOutlineTextMetrics(HDC, UINT, OUTLINETEXTMETRIC  _far*);




#line 1954



typedef struct tagNEWTEXTMETRIC
{
    int     tmHeight;
    int     tmAscent;
    int     tmDescent;
    int     tmInternalLeading;
    int     tmExternalLeading;
    int     tmAveCharWidth;
    int     tmMaxCharWidth;
    int     tmWeight;
    BYTE    tmItalic;
    BYTE    tmUnderlined;
    BYTE    tmStruckOut;
    BYTE    tmFirstChar;
    BYTE    tmLastChar;
    BYTE    tmDefaultChar;
    BYTE    tmBreakChar;
    BYTE    tmPitchAndFamily;
    BYTE    tmCharSet;
    int     tmOverhang;
    int     tmDigitizedAspectX;
    int     tmDigitizedAspectY;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRIC;
typedef NEWTEXTMETRIC*       PNEWTEXTMETRIC;
typedef NEWTEXTMETRIC  _near* NPNEWTEXTMETRIC;
typedef NEWTEXTMETRIC  _far*  LPNEWTEXTMETRIC;





#line 1996
typedef struct tagENUMLOGFONT
{
    LOGFONT elfLogFont;
    char    elfFullName[64 ];
    char    elfStyle[32 ];
} ENUMLOGFONT,  _far* LPENUMLOGFONT;





#line 2009
typedef int (_far  _pascal* OLDFONTENUMPROC)(const LOGFONT  _far*, const TEXTMETRIC  _far*, int, LPARAM);


typedef int (_far  _pascal* FONTENUMPROC)(const ENUMLOGFONT  _far*, const NEWTEXTMETRIC  _far*, int, LPARAM);

int     _far  _pascal EnumFontFamilies(HDC, LPCSTR, FONTENUMPROC, LPARAM);


#line 2020
int     _far  _pascal EnumFonts(HDC, LPCSTR, OLDFONTENUMPROC, LPARAM);




#line 2041




#line 2047

DWORD   _far  _pascal GetFontData(HDC, DWORD, DWORD, void  _far*, DWORD);
BOOL	_far  _pascal CreateScalableFontResource(UINT, LPCSTR, LPCSTR, LPCSTR);

typedef struct tagGLYPHMETRICS
{
    UINT    gmBlackBoxX;
    UINT    gmBlackBoxY;
    POINT   gmptGlyphOrigin;
    int     gmCellIncX;
    int     gmCellIncY;
} GLYPHMETRICS,  _far* LPGLYPHMETRICS;

typedef struct tagFIXED
{
    UINT    fract;
    int     value;
} FIXED,  _far* LPFIXED;

typedef struct tagMAT2
{
    FIXED  eM11;
    FIXED  eM12;
    FIXED  eM21;
    FIXED  eM22;
} MAT2,  _far* LPMAT2;

DWORD   _far  _pascal GetGlyphOutline(HDC, UINT, UINT, GLYPHMETRICS  _far*, DWORD, void  _far*, const MAT2  _far*);





#line 2086
typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX,  _far* LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    UINT    wType;
    UINT    cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE,  _far* LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD   cb;
    DWORD   dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER,  _far* LPTTPOLYGONHEADER;

typedef struct tagABC
{
    int   abcA;
    UINT  abcB;
    int   abcC;
} ABC;
typedef ABC  _far* LPABC;

BOOL    _far  _pascal GetCharABCWidths(HDC, UINT, UINT, ABC  _far*);

typedef struct tagKERNINGPAIR
{
    WORD wFirst;
    WORD wSecond;
    int  iKernAmount;
} KERNINGPAIR,  _far* LPKERNINGPAIR;

int     _far  _pascal GetKerningPairs(HDC, int, KERNINGPAIR  _far*);

typedef struct tagRASTERIZER_STATUS
{
    int   nSize;
    int   wFlags;
    int   nLanguageID;
} RASTERIZER_STATUS;
typedef RASTERIZER_STATUS  _far* LPRASTERIZER_STATUS;



#line 2137
BOOL    _far  _pascal GetRasterizerCaps(RASTERIZER_STATUS  _far*, int);







typedef struct tagBITMAP
{
    int     bmType;
    int     bmWidth;
    int     bmHeight;
    int     bmWidthBytes;
    BYTE    bmPlanes;
    BYTE    bmBitsPixel;
    void  _far* bmBits;
} BITMAP;
typedef BITMAP*       PBITMAP;
typedef BITMAP  _near* NPBITMAP;
typedef BITMAP  _far*  LPBITMAP;


typedef struct tagRGBTRIPLE
{
    BYTE    rgbtBlue;
    BYTE    rgbtGreen;
    BYTE    rgbtRed;
} RGBTRIPLE;
typedef RGBTRIPLE  _far* LPRGBTRIPLE;

typedef struct tagRGBQUAD
{
    BYTE    rgbBlue;
    BYTE    rgbGreen;
    BYTE    rgbRed;
    BYTE    rgbReserved;
} RGBQUAD;
typedef RGBQUAD  _far* LPRGBQUAD;


typedef struct tagBITMAPCOREHEADER
{
    DWORD   bcSize;
    short   bcWidth;
    short   bcHeight;
    WORD    bcPlanes;
    WORD    bcBitCount;
} BITMAPCOREHEADER;
typedef BITMAPCOREHEADER*      PBITMAPCOREHEADER;
typedef BITMAPCOREHEADER  _far* LPBITMAPCOREHEADER;

typedef struct tagBITMAPINFOHEADER
{
    DWORD   biSize;
    LONG    biWidth;
    LONG    biHeight;
    WORD    biPlanes;
    WORD    biBitCount;
    DWORD   biCompression;
    DWORD   biSizeImage;
    LONG    biXPelsPerMeter;
    LONG    biYPelsPerMeter;
    DWORD   biClrUsed;
    DWORD   biClrImportant;
} BITMAPINFOHEADER;
typedef BITMAPINFOHEADER*      PBITMAPINFOHEADER;
typedef BITMAPINFOHEADER  _far* LPBITMAPINFOHEADER;



#line 2211
typedef struct tagBITMAPINFO
{
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD	     bmiColors[1];
} BITMAPINFO;
typedef BITMAPINFO*     PBITMAPINFO;
typedef BITMAPINFO  _far* LPBITMAPINFO;

typedef struct tagBITMAPCOREINFO
{
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE	     bmciColors[1];
} BITMAPCOREINFO;
typedef BITMAPCOREINFO*      PBITMAPCOREINFO;
typedef BITMAPCOREINFO  _far* LPBITMAPCOREINFO;

typedef struct tagBITMAPFILEHEADER
{
    UINT    bfType;
    DWORD   bfSize;
    UINT    bfReserved1;
    UINT    bfReserved2;
    DWORD   bfOffBits;
} BITMAPFILEHEADER;
typedef BITMAPFILEHEADER*      PBITMAPFILEHEADER;
typedef BITMAPFILEHEADER  _far* LPBITMAPFILEHEADER;


HBITMAP _far  _pascal CreateBitmap(int, int, UINT, UINT, const void  _far*);
HBITMAP _far  _pascal CreateBitmapIndirect(BITMAP  _far* );
HBITMAP _far  _pascal CreateCompatibleBitmap(HDC, int, int);
HBITMAP _far  _pascal CreateDiscardableBitmap(HDC, int, int);
HBITMAP _far  _pascal CreateDIBitmap(HDC, BITMAPINFOHEADER  _far*, DWORD, const void  _far*, BITMAPINFO  _far*, UINT);

HBITMAP _far  _pascal LoadBitmap(HINSTANCE, LPCSTR);













#line 2295
BOOL    _far  _pascal BitBlt(HDC, int, int, int, int, HDC, int, int, DWORD);

BOOL    _far  _pascal PatBlt(HDC, int, int, int, int, DWORD);

BOOL    _far  _pascal StretchBlt(HDC, int, int, int, int, HDC, int, int, int, int, DWORD);
int     _far  _pascal StretchDIBits(HDC, int, int, int, int, int,
                        int, int, int, const void  _far*, LPBITMAPINFO, UINT, DWORD);

COLORREF _far  _pascal SetPixel(HDC, int, int, COLORREF);
COLORREF _far  _pascal GetPixel(HDC, int, int);





#line 2316
int     _far  _pascal SetStretchBltMode(HDC, int);
int     _far  _pascal GetStretchBltMode(HDC);

DWORD   _far  _pascal SetBitmapDimension(HBITMAP, int, int);
DWORD   _far  _pascal GetBitmapDimension(HBITMAP);

BOOL    _far  _pascal SetBitmapDimensionEx(HBITMAP, int, int, SIZE  _far*);
BOOL    _far  _pascal GetBitmapDimensionEx(HBITMAP, SIZE  _far*);

int     _far  _pascal SetROP2(HDC, int);
int     _far  _pascal GetROP2(HDC);

LONG    _far  _pascal SetBitmapBits(HBITMAP, DWORD, const void  _far*);
LONG    _far  _pascal GetBitmapBits(HBITMAP, LONG, void  _far*);

int     _far  _pascal SetDIBits(HDC, HBITMAP, UINT, UINT, const void  _far*, BITMAPINFO  _far*, UINT);
int     _far  _pascal GetDIBits(HDC, HBITMAP, UINT, UINT, void  _far*, BITMAPINFO  _far*, UINT);

int     _far  _pascal SetDIBitsToDevice(HDC, int, int, int, int, int, int, UINT, UINT,
                    void  _far*, BITMAPINFO  _far*, UINT);






struct HMETAFILE__ { int unused; }; typedef const struct HMETAFILE__  _near* HMETAFILE ;

HDC     _far  _pascal CreateMetaFile(LPCSTR);
HMETAFILE _far  _pascal CloseMetaFile(HDC);

HMETAFILE _far  _pascal GetMetaFile(LPCSTR);
BOOL      _far  _pascal DeleteMetaFile(HMETAFILE);
HMETAFILE _far  _pascal CopyMetaFile(HMETAFILE, LPCSTR);

BOOL    _far  _pascal PlayMetaFile(HDC, HMETAFILE);

HGLOBAL _far  _pascal GetMetaFileBits(HMETAFILE);
HMETAFILE _far  _pascal SetMetaFileBits(HGLOBAL);

HMETAFILE _far  _pascal SetMetaFileBitsBetter(HGLOBAL);



typedef struct tagMETAFILEPICT
{
    int     mm;
    int     xExt;
    int     yExt;
    HMETAFILE hMF;
} METAFILEPICT;
typedef METAFILEPICT  _far* LPMETAFILEPICT;

typedef struct tagMETAHEADER
{
    UINT    mtType;
    UINT    mtHeaderSize;
    UINT    mtVersion;
    DWORD   mtSize;
    UINT    mtNoObjects;
    DWORD   mtMaxRecord;
    UINT    mtNoParameters;
} METAHEADER;

typedef struct tagHANDLETABLE
{
    HGDIOBJ objectHandle[1];
} HANDLETABLE;
typedef HANDLETABLE*      PHANDLETABLE;
typedef HANDLETABLE  _far* LPHANDLETABLE;

typedef struct tagMETARECORD
{
    DWORD   rdSize;
    UINT    rdFunction;
    UINT    rdParm[1];
} METARECORD;
typedef METARECORD*      PMETARECORD;
typedef METARECORD  _far* LPMETARECORD;









#line 2482
void    _far  _pascal PlayMetaFileRecord(HDC, HANDLETABLE  _far*, METARECORD  _far*, UINT);


typedef int (_far  _pascal* MFENUMPROC)(HDC, HANDLETABLE  _far*, METARECORD  _far*, int, LPARAM);

#line 2490
BOOL    _far  _pascal EnumMetaFile(HDC, HMETAFILE, MFENUMPROC, LPARAM);






typedef BOOL (_far  _pascal* ABORTPROC)(HDC, int);

#line 2503

typedef struct
{
    int     cbSize;
    LPCSTR  lpszDocName;
    LPCSTR  lpszOutput;
}   DOCINFO;
typedef DOCINFO  _far* LPDOCINFO;

int     _far  _pascal StartDoc(HDC, DOCINFO  _far*);
int     _far  _pascal StartPage(HDC);
int     _far  _pascal EndPage(HDC);
int     _far  _pascal EndDoc(HDC);
int     _far  _pascal AbortDoc(HDC);

int     _far  _pascal SetAbortProc(HDC, ABORTPROC);
HANDLE  _far  _pascal SpoolFile(LPSTR, LPSTR, LPSTR, LPSTR);


BOOL    _far  _pascal QueryAbort(HDC, int);











#line 2543
int     _far  _pascal Escape(HDC, int, int, LPCSTR, void  _far*);











#line 2622
struct HWND__ { int unused; }; typedef const struct HWND__  _near* HWND ;



struct HMENU__ { int unused; }; typedef const struct HMENU__  _near* HMENU ;

struct HICON__ { int unused; }; typedef const struct HICON__  _near* HICON ;
typedef HICON HCURSOR;





int _far  _pascal GetSystemMetrics(int);



#line 2683






UINT    _far  _pascal GetDoubleClickTime(void);
void    _far  _pascal SetDoubleClickTime(UINT);




#line 2699

BOOL    _far  _pascal SystemParametersInfo(UINT, UINT,  void  _far*, UINT);









#line 2745
void    _far  _pascal SetRect(RECT  _far*, int, int, int, int);
void    _far  _pascal SetRectEmpty(RECT  _far*);

void    _far  _pascal CopyRect(RECT  _far*, const RECT  _far*);

BOOL    _far  _pascal IsRectEmpty(const RECT  _far*);

BOOL    _far  _pascal EqualRect(const RECT  _far*, const RECT  _far*);

BOOL    _far  _pascal IntersectRect(RECT  _far*, const RECT  _far*, const RECT  _far*);
BOOL    _far  _pascal UnionRect(RECT  _far*, const RECT  _far*, const RECT  _far*);
BOOL    _far  _pascal SubtractRect(RECT  _far*, const RECT  _far*, const RECT  _far*);

void    _far  _pascal OffsetRect(RECT  _far*, int, int);
void    _far  _pascal InflateRect(RECT  _far*, int, int);

BOOL    _far  _pascal PtInRect(const RECT  _far*, POINT);



UINT _far  _pascal RegisterWindowMessage(LPCSTR);






#line 2775
typedef struct tagMSG
{
    HWND	hwnd;
    UINT        message;
    WPARAM	wParam;
    LPARAM	lParam;
    DWORD       time;
    POINT	pt;
} MSG;
typedef MSG* PMSG;
typedef MSG  _near* NPMSG;
typedef MSG  _far* LPMSG;

BOOL    _far  _pascal GetMessage(MSG  _far*, HWND, UINT, UINT);
BOOL    _far  _pascal PeekMessage(MSG  _far*, HWND, UINT, UINT, UINT);



#line 2796
void    _far  _pascal WaitMessage(void);

DWORD   _far  _pascal GetMessagePos(void);
LONG    _far  _pascal GetMessageTime(void);

LPARAM  _far  _pascal GetMessageExtraInfo(void);


BOOL    _far  _pascal TranslateMessage(const MSG  _far*);
LONG    _far  _pascal DispatchMessage(const MSG  _far*);

BOOL    _far  _pascal SetMessageQueue(int);

BOOL    _far  _pascal GetInputState(void);


DWORD   _far  _pascal GetQueueStatus(UINT flags);







#line 2829
BOOL    _far  _pascal PostMessage(HWND, UINT, WPARAM, LPARAM);
LRESULT _far  _pascal SendMessage(HWND, UINT, WPARAM, LPARAM);



BOOL    _far  _pascal PostAppMessage(HTASK, UINT, WPARAM, LPARAM);

void    _far  _pascal ReplyMessage(LRESULT);
BOOL    _far  _pascal InSendMessage(void);




BOOL _far  _pascal CallMsgFilter(MSG  _far*, int);













#line 2873









#line 2891
void    _far  _pascal PostQuitMessage(int);





typedef LRESULT (_far  _pascal* WNDPROC)(HWND, UINT, WPARAM, LPARAM);

typedef struct tagWNDCLASS
{
    UINT        style;
    WNDPROC	lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE	hInstance;
    HICON	hIcon;
    HCURSOR	hCursor;
    HBRUSH	hbrBackground;
    LPCSTR	lpszMenuName;
    LPCSTR	lpszClassName;
} WNDCLASS;
typedef WNDCLASS* PWNDCLASS;
typedef WNDCLASS  _near* NPWNDCLASS;
typedef WNDCLASS  _far* LPWNDCLASS;

ATOM    _far  _pascal RegisterClass(const WNDCLASS  _far*);
BOOL    _far  _pascal UnregisterClass(LPCSTR, HINSTANCE);

BOOL    _far  _pascal GetClassInfo(HINSTANCE, LPCSTR, WNDCLASS  _far*);
int     _far  _pascal GetClassName(HWND, LPSTR, int);













#line 2949
WORD    _far  _pascal GetClassWord(HWND, int);
WORD    _far  _pascal SetClassWord(HWND, int, WORD);
LONG    _far  _pascal GetClassLong(HWND, int);
LONG    _far  _pascal SetClassLong(HWND, int, LONG);



#line 2967
























#line 3021









#line 3035
BOOL    _far  _pascal IsWindow(HWND);

HWND    _far  _pascal CreateWindowEx(DWORD, LPCSTR, LPCSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, void  _far*);
HWND    _far  _pascal CreateWindow(LPCSTR, LPCSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, void  _far*);



#line 3044
typedef struct tagCREATESTRUCT
{
    void  _far* lpCreateParams;
    HINSTANCE hInstance;
    HMENU     hMenu;
    HWND      hwndParent;
    int       cy;
    int       cx;
    int       y;
    int       x;
    LONG      style;
    LPCSTR    lpszName;
    LPCSTR    lpszClass;
    DWORD     dwExStyle;
} CREATESTRUCT;
typedef CREATESTRUCT  _far* LPCREATESTRUCT;

BOOL    _far  _pascal DestroyWindow(HWND);




#line 3068
HTASK   _far  _pascal GetWindowTask(HWND);

BOOL    _far  _pascal IsChild(HWND, HWND);

HWND    _far  _pascal GetParent(HWND);
HWND    _far  _pascal SetParent(HWND, HWND);

BOOL    _far  _pascal IsWindowVisible(HWND);

BOOL    _far  _pascal ShowWindow(HWND, int);














#line 3118
BOOL    _far  _pascal EnableWindow(HWND,BOOL);
BOOL    _far  _pascal IsWindowEnabled(HWND);




void    _far  _pascal SetWindowText(HWND, LPCSTR);
int     _far  _pascal GetWindowText(HWND, LPSTR, int);
int     _far  _pascal GetWindowTextLength(HWND);



#line 3133
WORD    _far  _pascal GetWindowWord(HWND, int);
WORD    _far  _pascal SetWindowWord(HWND, int, WORD);
LONG    _far  _pascal GetWindowLong(HWND, int);
LONG    _far  _pascal SetWindowLong(HWND, int, LONG);







#line 3152
void    _far  _pascal GetClientRect(HWND, RECT  _far*);
void    _far  _pascal GetWindowRect(HWND, RECT  _far*);



typedef struct tagWINDOWPLACEMENT
{
    UINT  length;
    UINT  flags;
    UINT  showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT  rcNormalPosition;
} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT     *PWINDOWPLACEMENT;
typedef WINDOWPLACEMENT  _far* LPWINDOWPLACEMENT;


#line 3172
BOOL    _far  _pascal GetWindowPlacement(HWND, WINDOWPLACEMENT  _far*);
BOOL    _far  _pascal SetWindowPlacement(HWND, const WINDOWPLACEMENT  _far*);


BOOL    _far  _pascal SetWindowPos(HWND, HWND, int, int, int, int, UINT);








#line 3204
struct HDWP__ { int unused; }; typedef const struct HDWP__  _near* HDWP ;

HDWP    _far  _pascal BeginDeferWindowPos(int);
HDWP    _far  _pascal DeferWindowPos(HDWP, HWND, HWND, int, int, int, int, UINT);
BOOL    _far  _pascal EndDeferWindowPos(HDWP);



BOOL    _far  _pascal MoveWindow(HWND, int, int, int, int, BOOL);
BOOL    _far  _pascal BringWindowToTop(HWND);





#line 3221
typedef struct tagWINDOWPOS
{
    HWND    hwnd;
    HWND    hwndInsertAfter;
    int     x;
    int     y;
    int     cx;
    int     cy;
    UINT    flags;
} WINDOWPOS;
typedef WINDOWPOS  _far* LPWINDOWPOS;









#line 3253
LRESULT _far  _pascal DefWindowProc(HWND, UINT, WPARAM, LPARAM);


LRESULT _far  _pascal CallWindowProc(WNDPROC, HWND, UINT, WPARAM, LPARAM);



#line 3263
void    _far  _pascal AdjustWindowRect(RECT  _far*, DWORD, BOOL);
void    _far  _pascal AdjustWindowRectEx(RECT  _far*, DWORD, BOOL, DWORD);



#line 3270
typedef struct tagMINMAXINFO
{
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO;



BOOL    _far  _pascal FlashWindow(HWND, BOOL);

void    _far  _pascal ShowOwnedPopups(HWND, BOOL);


BOOL    _far  _pascal OpenIcon(HWND);
void    _far  _pascal CloseWindow(HWND);
BOOL    _far  _pascal AnyPopup(void);
BOOL    _far  _pascal IsIconic(HWND);
BOOL    _far  _pascal IsZoomed(HWND);



void    _far  _pascal ClientToScreen(HWND, POINT  _far*);
void    _far  _pascal ScreenToClient(HWND, POINT  _far*);


void    _far  _pascal MapWindowPoints(HWND hwndFrom, HWND hwndTo, POINT  _far* lppt, UINT cpt);


HWND    _far  _pascal WindowFromPoint(POINT);
HWND    _far  _pascal ChildWindowFromPoint(HWND, POINT);



HWND    _far  _pascal GetDesktopWindow(void);

HWND    _far  _pascal FindWindow(LPCSTR, LPCSTR);


typedef BOOL (_far  _pascal* WNDENUMPROC)(HWND, LPARAM);

#line 3316
BOOL    _far  _pascal EnumWindows(WNDENUMPROC, LPARAM);
BOOL    _far  _pascal EnumChildWindows(HWND, WNDENUMPROC, LPARAM);
BOOL    _far  _pascal EnumTaskWindows(HTASK, WNDENUMPROC, LPARAM);

HWND    _far  _pascal GetTopWindow(HWND);

HWND    _far  _pascal GetWindow(HWND, UINT);
HWND    _far  _pascal GetNextWindow(HWND, UINT);






#line 3336
BOOL    _far  _pascal SetProp(HWND, LPCSTR, HANDLE);
HANDLE  _far  _pascal GetProp(HWND, LPCSTR);
HANDLE  _far  _pascal RemoveProp(HWND, LPCSTR);


typedef BOOL (_far  _pascal* PROPENUMPROC)(HWND, LPCSTR, HANDLE);

#line 3346
int     _far  _pascal EnumProps(HWND, PROPENUMPROC);



HDC     _far  _pascal GetDC(HWND);
int     _far  _pascal ReleaseDC(HWND, HDC);

HDC     _far  _pascal GetWindowDC(HWND);


HDC     _far  _pascal GetDCEx(register HWND hwnd, HRGN hrgnClip, DWORD flags);













#line 3382
typedef struct tagPAINTSTRUCT
{
    HDC 	hdc;
    BOOL	fErase;
    RECT	rcPaint;
    BOOL	fRestore;
    BOOL	fIncUpdate;
    BYTE	rgbReserved[16];
} PAINTSTRUCT;
typedef PAINTSTRUCT* PPAINTSTRUCT;
typedef PAINTSTRUCT  _near* NPPAINTSTRUCT;
typedef PAINTSTRUCT  _far* LPPAINTSTRUCT;

HDC     _far  _pascal BeginPaint(HWND, PAINTSTRUCT  _far*);
void    _far  _pascal EndPaint(HWND, const PAINTSTRUCT  _far*);

void    _far  _pascal UpdateWindow(HWND);

int     _far  _pascal ExcludeUpdateRgn(HDC, HWND);


BOOL    _far  _pascal LockWindowUpdate(HWND hwndLock);


BOOL    _far  _pascal GetUpdateRect(HWND, RECT  _far*, BOOL);
int     _far  _pascal GetUpdateRgn(HWND, HRGN, BOOL);

void    _far  _pascal InvalidateRect(HWND, const RECT  _far*, BOOL);
void    _far  _pascal ValidateRect(HWND, const RECT  _far*);

void    _far  _pascal InvalidateRgn(HWND, HRGN, BOOL);
void    _far  _pascal ValidateRgn(HWND, HRGN);


BOOL    _far  _pascal RedrawWindow(HWND hwnd, const RECT  _far* lprcUpdate, HRGN hrgnUpdate, UINT flags);










#line 3439
void    _far  _pascal ScrollWindow(HWND, int, int, const RECT  _far*, const RECT  _far*);
BOOL    _far  _pascal ScrollDC(HDC, int, int, const RECT  _far*, const RECT  _far*, HRGN, RECT  _far*);



int     _far  _pascal ScrollWindowEx(HWND hwnd, int dx, int dy,
                const RECT  _far* prcScroll, const RECT  _far* prcClip,
                HRGN hrgnUpdate, RECT  _far* prcUpdate, UINT flags);









#line 3462




#line 3474
typedef struct tagNCCALCSIZE_PARAMS
{
    RECT	   rgrc[3];
    WINDOWPOS  _far* lppos;
} NCCALCSIZE_PARAMS;
#line 3485
typedef NCCALCSIZE_PARAMS  _far* LPNCCALCSIZE_PARAMS;









#line 3522
HWND    _far  _pascal SetActiveWindow(HWND);
HWND    _far  _pascal GetActiveWindow(void);

HWND    _far  _pascal GetLastActivePopup(HWND);






#line 3538
HWND    _far  _pascal SetFocus(HWND);
HWND    _far  _pascal GetFocus(void);

int     _far  _pascal GetKeyState(int);
int     _far  _pascal GetAsyncKeyState(int);

void    _far  _pascal GetKeyboardState(BYTE  _far* );
void    _far  _pascal SetKeyboardState(BYTE  _far* );























#line 3661
HWND    _far  _pascal SetCapture(HWND);
void    _far  _pascal ReleaseCapture(void);
HWND    _far  _pascal GetCapture(void);

BOOL    _far  _pascal SwapMouseButton(BOOL);













#line 3713




#line 3719
typedef struct tagMOUSEHOOKSTRUCT
{
    POINT   pt;
    HWND    hwnd;
    UINT    wHitTestCode;
    DWORD   dwExtraInfo;
} MOUSEHOOKSTRUCT;
typedef MOUSEHOOKSTRUCT   _far* LPMOUSEHOOKSTRUCT;








HWND    _far  _pascal GetSysModalWindow(void);
HWND    _far  _pascal SetSysModalWindow(HWND);




typedef void (_far  _pascal* TIMERPROC)(HWND, UINT, UINT, DWORD);

#line 3746
UINT    _far  _pascal SetTimer(HWND, UINT, UINT, TIMERPROC);

BOOL    _far  _pascal KillTimer(HWND, UINT);





struct HACCEL__ { int unused; }; typedef const struct HACCEL__  _near* HACCEL ;

HACCEL  _far  _pascal LoadAccelerators(HINSTANCE, LPCSTR);


int     _far  _pascal TranslateAccelerator(HWND, HACCEL, MSG  _far*);







typedef struct
{
    UINT    versionNumber;
    UINT    offset;
} MENUITEMTEMPLATEHEADER;


typedef struct
{
    UINT    mtOption;
    UINT    mtID;
    char    mtString[1];
} MENUITEMTEMPLATE;


BOOL    _far  _pascal IsMenu(HMENU);


HMENU   _far  _pascal CreateMenu(void);
HMENU   _far  _pascal CreatePopupMenu(void);
HMENU   _far  _pascal LoadMenu(HINSTANCE, LPCSTR);
HMENU   _far  _pascal LoadMenuIndirect(const void  _far*);

BOOL    _far  _pascal DestroyMenu(HMENU);

HMENU   _far  _pascal GetMenu(HWND);
BOOL    _far  _pascal SetMenu(HWND, HMENU);

HMENU   _far  _pascal GetSystemMenu(HWND, BOOL);

void    _far  _pascal DrawMenuBar(HWND);

BOOL    _far  _pascal HiliteMenuItem(HWND, HMENU, UINT, UINT);

BOOL    _far  _pascal InsertMenu(HMENU, UINT, UINT, UINT, LPCSTR);
BOOL    _far  _pascal AppendMenu(HMENU, UINT, UINT, LPCSTR);
BOOL    _far  _pascal ModifyMenu(HMENU, UINT, UINT, UINT, LPCSTR);
BOOL    _far  _pascal RemoveMenu(HMENU, UINT, UINT);
BOOL    _far  _pascal DeleteMenu(HMENU, UINT, UINT);

BOOL    _far  _pascal ChangeMenu(HMENU, UINT, LPCSTR, UINT, UINT);













#line 3847
BOOL    _far  _pascal EnableMenuItem(HMENU, UINT, UINT);
BOOL    _far  _pascal CheckMenuItem(HMENU, UINT, UINT);

HMENU   _far  _pascal GetSubMenu(HMENU, int);

int     _far  _pascal GetMenuItemCount(HMENU);
UINT    _far  _pascal GetMenuItemID(HMENU, int);

int     _far  _pascal GetMenuString(HMENU, UINT, LPSTR, int, UINT);
UINT    _far  _pascal GetMenuState(HMENU, UINT, UINT);

BOOL    _far  _pascal SetMenuItemBitmaps(HMENU, UINT, UINT, HBITMAP, HBITMAP);
DWORD   _far  _pascal GetMenuCheckMarkDimensions(void);

BOOL    _far  _pascal TrackPopupMenu(HMENU, UINT, int, int, int, HWND, const RECT  _far*);


#line 3870




















#line 3918
int     _far  _pascal SetScrollPos(HWND, int, int, BOOL);
int     _far  _pascal GetScrollPos(HWND, int);
void    _far  _pascal SetScrollRange(HWND, int, int, int, BOOL);
void    _far  _pascal GetScrollRange(HWND, int, int  _far*, int  _far*);
void    _far  _pascal ShowScrollBar(HWND, int, BOOL);
BOOL    _far  _pascal EnableScrollBar(HWND, int, UINT);



















#line 3972
BOOL    _far  _pascal OpenClipboard(HWND);
BOOL    _far  _pascal CloseClipboard(void);
BOOL    _far  _pascal EmptyClipboard(void);


HWND    _far  _pascal GetOpenClipboardWindow(void);


HWND    _far  _pascal GetClipboardOwner(void);

HWND    _far  _pascal SetClipboardViewer(HWND);
HWND    _far  _pascal GetClipboardViewer(void);

HANDLE  _far  _pascal SetClipboardData(UINT, HANDLE);
HANDLE  _far  _pascal GetClipboardData(UINT);

BOOL    _far  _pascal IsClipboardFormatAvailable(UINT);
int     _far  _pascal GetPriorityClipboardFormat(UINT  _far*, int);

UINT    _far  _pascal RegisterClipboardFormat(LPCSTR);
int     _far  _pascal CountClipboardFormats(void);
UINT    _far  _pascal EnumClipboardFormats(UINT);
int     _far  _pascal GetClipboardFormatName(UINT, LPSTR, int);

BOOL    _far  _pascal ChangeClipboardChain(HWND, HWND);











#line 4023
HCURSOR _far  _pascal LoadCursor(HINSTANCE, LPCSTR);
HCURSOR _far  _pascal CreateCursor(HINSTANCE, int, int, int, int, const void  _far*, const void  _far*);
BOOL    _far  _pascal DestroyCursor(HCURSOR);


HCURSOR _far  _pascal CopyCursor(HINSTANCE, HCURSOR);


int     _far  _pascal ShowCursor(BOOL);

void    _far  _pascal SetCursorPos(int, int);
void    _far  _pascal GetCursorPos(POINT  _far*);

HCURSOR _far  _pascal SetCursor(HCURSOR);


HCURSOR _far  _pascal GetCursor(void);


void    _far  _pascal ClipCursor(const RECT  _far*);

void    _far  _pascal GetClipCursor(RECT  _far*);







#line 4064
HICON   _far  _pascal LoadIcon(HINSTANCE, LPCSTR);
HICON   _far  _pascal CreateIcon(HINSTANCE, int, int, BYTE, BYTE, const void  _far*, const void  _far*);
BOOL    _far  _pascal DestroyIcon(HICON);


HICON   _far  _pascal CopyIcon(HINSTANCE, HICON);


BOOL    _far  _pascal DrawIcon(HDC, int, int, HICON);









#line 4089
int     _far  _pascal MessageBox(HWND, LPCSTR, LPCSTR, UINT);
void    _far  _pascal MessageBeep(UINT);













#line 4126
void    _far  _pascal CreateCaret(HWND, HBITMAP, int, int);
void    _far  _pascal DestroyCaret(void);

void    _far  _pascal SetCaretPos(int, int);
void    _far  _pascal GetCaretPos(POINT  _far*);

void    _far  _pascal HideCaret(HWND);
void    _far  _pascal ShowCaret(HWND);

UINT    _far  _pascal GetCaretBlinkTime(void);
void    _far  _pascal SetCaretBlinkTime(UINT);
















#line 4174
typedef struct tagCLIENTCREATESTRUCT
{
    HMENU  hWindowMenu;
    UINT   idFirstChild;
} CLIENTCREATESTRUCT;
typedef CLIENTCREATESTRUCT  _far* LPCLIENTCREATESTRUCT;


#line 4184





#line 4200
typedef struct tagMDICREATESTRUCT
{
    LPCSTR  szClass;
    LPCSTR  szTitle;
    HINSTANCE hOwner;
    int     x;
    int     y;
    int     cx;
    int     cy;
    DWORD   style;
    LPARAM  lParam;
} MDICREATESTRUCT;
typedef MDICREATESTRUCT  _far*  LPMDICREATESTRUCT;






#line 4223
LRESULT _far  _pascal DefFrameProc(HWND, HWND, UINT, WPARAM, LPARAM);
LRESULT _far  _pascal DefMDIChildProc(HWND, UINT, WPARAM, LPARAM);


BOOL    _far  _pascal TranslateMDISysAccel(HWND, MSG  _far*);


UINT    _far  _pascal ArrangeIconicWindows(HWND);
























#line 4273
typedef BOOL (_far  _pascal* DLGPROC)(HWND, UINT, WPARAM, LPARAM);



#line 4284
BOOL    _far  _pascal IsDialogMessage(HWND, MSG  _far*);


LRESULT _far  _pascal DefDlgProc(HWND, UINT, WPARAM, LPARAM);

HWND    _far  _pascal CreateDialog(HINSTANCE, LPCSTR, HWND, DLGPROC);
HWND    _far  _pascal CreateDialogIndirect(HINSTANCE, const void  _far*, HWND, DLGPROC);
HWND    _far  _pascal CreateDialogParam(HINSTANCE, LPCSTR, HWND, DLGPROC, LPARAM);
HWND    _far  _pascal CreateDialogIndirectParam(HINSTANCE, const void  _far*, HWND, DLGPROC, LPARAM);

int     _far  _pascal DialogBox(HINSTANCE, LPCSTR, HWND, DLGPROC);
int     _far  _pascal DialogBoxIndirect(HINSTANCE, HGLOBAL, HWND, DLGPROC);
int     _far  _pascal DialogBoxParam(HINSTANCE, LPCSTR, HWND, DLGPROC, LPARAM);
int     _far  _pascal DialogBoxIndirectParam(HINSTANCE, HGLOBAL, HWND, DLGPROC, LPARAM);

void    _far  _pascal EndDialog(HWND, int);

int     _far  _pascal GetDlgCtrlID(HWND);
HWND    _far  _pascal GetDlgItem(HWND, int);
LRESULT _far  _pascal SendDlgItemMessage(HWND, int, UINT, WPARAM, LPARAM);

void    _far  _pascal SetDlgItemInt(HWND, int, UINT, BOOL);
UINT    _far  _pascal GetDlgItemInt(HWND, int, BOOL  _far* , BOOL);

void    _far  _pascal SetDlgItemText(HWND, int, LPCSTR);
int     _far  _pascal GetDlgItemText(HWND, int, LPSTR, int);

void    _far  _pascal CheckDlgButton(HWND, int, UINT);
void    _far  _pascal CheckRadioButton(HWND, int, int, int);
UINT    _far  _pascal IsDlgButtonChecked(HWND, int);

HWND    _far  _pascal GetNextDlgGroupItem(HWND, HWND, BOOL);
HWND    _far  _pascal GetNextDlgTabItem(HWND, HWND, BOOL);

void    _far  _pascal MapDialogRect(HWND, RECT  _far*);
DWORD   _far  _pascal GetDialogBaseUnits(void);





















#line 4383
typedef struct tagDRAWITEMSTRUCT
{
    UINT        CtlType;
    UINT        CtlID;
    UINT        itemID;
    UINT        itemAction;
    UINT        itemState;
    HWND	hwndItem;
    HDC		hDC;
    RECT	rcItem;
    DWORD       itemData;
} DRAWITEMSTRUCT;
typedef DRAWITEMSTRUCT  _near* PDRAWITEMSTRUCT;
typedef DRAWITEMSTRUCT  _far* LPDRAWITEMSTRUCT;



typedef struct tagMEASUREITEMSTRUCT
{
    UINT        CtlType;
    UINT        CtlID;
    UINT        itemID;
    UINT        itemWidth;
    UINT        itemHeight;
    DWORD       itemData;
} MEASUREITEMSTRUCT;
typedef MEASUREITEMSTRUCT  _near* PMEASUREITEMSTRUCT;
typedef MEASUREITEMSTRUCT  _far* LPMEASUREITEMSTRUCT;



typedef struct tagDELETEITEMSTRUCT
{
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    HWND       hwndItem;
    DWORD      itemData;
} DELETEITEMSTRUCT;
typedef DELETEITEMSTRUCT  _near* PDELETEITEMSTRUCT;
typedef DELETEITEMSTRUCT  _far* LPDELETEITEMSTRUCT;



typedef struct tagCOMPAREITEMSTRUCT
{
    UINT        CtlType;
    UINT        CtlID;
    HWND	hwndItem;
    UINT        itemID1;
    DWORD       itemData1;
    UINT        itemID2;
    DWORD       itemData2;
} COMPAREITEMSTRUCT;
typedef COMPAREITEMSTRUCT  _near* PCOMPAREITEMSTRUCT;
typedef COMPAREITEMSTRUCT  _far* LPCOMPAREITEMSTRUCT;






#line 4461





















#line 4524




#line 4560




typedef int   (_far  _pascal* EDITWORDBREAKPROC)(LPSTR lpch, int ichCurrent, int cch, int code);























#line 4626





#line 4665













#line 4690
int     _far  _pascal DlgDirList(HWND, LPSTR, int, int, UINT);
BOOL    _far  _pascal DlgDirSelect(HWND, LPSTR, int);

int     _far  _pascal DlgDirListComboBox(HWND, LPSTR, int, int, UINT);
BOOL    _far  _pascal DlgDirSelectComboBox(HWND, LPSTR, int);


BOOL    _far  _pascal DlgDirSelectEx(HWND, LPSTR, int, int);
BOOL    _far  _pascal DlgDirSelectComboBoxEx(HWND, LPSTR, int, int);












#line 4734




#line 4765





#line 4782









#line 4795
struct HHOOK__ { int unused; }; typedef const struct HHOOK__  _far* HHOOK ;


typedef LRESULT (_far  _pascal* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);

#line 4804
HHOOK   _far  _pascal SetWindowsHook(int, HOOKPROC);
LRESULT _far  _pascal DefHookProc(int, WPARAM, LPARAM, HHOOK  _far*);
#line 4810
BOOL    _far  _pascal UnhookWindowsHook(int, HOOKPROC);



HHOOK   _far  _pascal SetWindowsHookEx(int idHook, HOOKPROC lpfn, HINSTANCE hInstance, HTASK hTask);
BOOL    _far  _pascal UnhookWindowsHookEx(HHOOK hHook);
LRESULT _far  _pascal CallNextHookEx(HHOOK hHook, int code, WPARAM wParam, LPARAM lParam);

















#line 4852

typedef struct tagCBT_CREATEWND
{
    CREATESTRUCT  _far* lpcs;
    HWND    hwndInsertAfter;
} CBT_CREATEWND;
typedef CBT_CREATEWND  _far* LPCBT_CREATEWND;


typedef struct tagCBTACTIVATESTRUCT
{
    BOOL    fMouse;
    HWND    hWndActive;
} CBTACTIVATESTRUCT;






#line 4875

typedef struct tagHARDWAREHOOKSTRUCT
{
    HWND    hWnd;
    UINT    wMessage;
    WPARAM  wParam;
    LPARAM  lParam;
} HARDWAREHOOKSTRUCT;





#line 4890












#line 4915
typedef struct tagEVENTMSG
{
    UINT    message;
    UINT    paramL;
    UINT    paramH;
    DWORD   time;
} EVENTMSG;
typedef EVENTMSG *PEVENTMSG;
typedef EVENTMSG  _near* NPEVENTMSG;
typedef EVENTMSG  _far* LPEVENTMSG;

BOOL    _far  _pascal EnableHardwareInput(BOOL);










typedef struct tagDEBUGHOOKINFO
{
    HMODULE	hModuleHook;
    LPARAM	reserved;
    LPARAM	lParam;
    WPARAM	wParam;
    int         code;
} DEBUGHOOKINFO;
typedef DEBUGHOOKINFO  _far* LPDEBUGHOOKINFO;


BOOL _far  _pascal QuerySendMessage(HANDLE h1, HANDLE h2, HANDLE h3, LPMSG lpmsg);


BOOL _far  _pascal LockInput(HANDLE h1, HWND hwndInput, BOOL fLock);

LONG _far  _pascal GetSystemDebugState(void);






#line 4967
BOOL _far  _pascal WinHelp(HWND hwndMain, LPCSTR lpszHelp, UINT usCommand, DWORD ulData);



#line 4985
typedef struct tagMULTIKEYHELP
{
    UINT    mkSize;
    BYTE    mkKeylist;
    BYTE    szKeyphrase[1];
} MULTIKEYHELP;


typedef struct
{
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    char rgchMember[2];
} HELPWININFO;
typedef HELPWININFO  _near* PHELPWININFO;
typedef HELPWININFO  _far* LPHELPWININFO;







int     _far  _pascal OpenSound(void);
void    _far  _pascal CloseSound(void);

int     _far  _pascal StartSound(void);
int     _far  _pascal StopSound(void);

int     _far  _pascal SetVoiceQueueSize(int, int);
int     _far  _pascal SetVoiceNote(int, int, int, int);
int     _far  _pascal SetVoiceAccent(int, int, int, int, int);
int     _far  _pascal SetVoiceEnvelope(int, int, int);
int     _far  _pascal SetVoiceSound(int, DWORD, int);

int     _far  _pascal SetVoiceThreshold(int, int);
int  _far* _far  _pascal GetThresholdEvent(void);
int     _far  _pascal GetThresholdStatus(void);

int     _far  _pascal SetSoundNoise(int, int);



#line 5040
int     _far  _pascal WaitSoundState(int);



#line 5047
int     _far  _pascal SyncAllVoices(void);
int     _far  _pascal CountVoiceNotes(int);





















#line 5146









#line 5174
typedef struct tagDCB
{
    BYTE Id;
    UINT BaudRate;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    UINT RlsTimeout;
    UINT CtsTimeout;
    UINT DsrTimeout;

    UINT fBinary        :1;
    UINT fRtsDisable    :1;
    UINT fParity        :1;
    UINT fOutxCtsFlow   :1;
    UINT fOutxDsrFlow   :1;
    UINT fDummy         :2;
    UINT fDtrDisable    :1;

    UINT fOutX          :1;
    UINT fInX           :1;
    UINT fPeChar        :1;
    UINT fNull          :1;
    UINT fChEvt         :1;
    UINT fDtrflow       :1;
    UINT fRtsflow       :1;
    UINT fDummy2        :1;

    char XonChar;
    char XoffChar;
    UINT XonLim;
    UINT XoffLim;
    char PeChar;
    char EofChar;
    char EvtChar;
    UINT TxDelay;
} DCB;
typedef DCB  _far* LPDCB;



typedef struct tagCOMSTAT
{
    BYTE status;
    UINT cbInQue;
    UINT cbOutQue;
} COMSTAT;



#line 5248
int     _far  _pascal BuildCommDCB(LPCSTR, DCB  _far*);

int     _far  _pascal OpenComm(LPCSTR, UINT, UINT);
int     _far  _pascal CloseComm(int);

int     _far  _pascal ReadComm(int, void  _far*, int);
int     _far  _pascal WriteComm(int, const void  _far*, int);
int     _far  _pascal UngetCommChar(int, char);
int     _far  _pascal FlushComm(int, int);
int     _far  _pascal TransmitCommChar(int, char);

int     _far  _pascal SetCommState(const DCB  _far*);
int     _far  _pascal GetCommState(int, DCB  _far*);
int     _far  _pascal GetCommError(int, COMSTAT  _far* );

int     _far  _pascal SetCommBreak(int);
int     _far  _pascal ClearCommBreak(int);

UINT  _far* _far  _pascal SetCommEventMask(int, UINT);
UINT    _far  _pascal GetCommEventMask(int, int);

LONG    _far  _pascal EscapeCommFunction(int, int);


BOOL    _far  _pascal EnableCommNotification(int, HWND, int, int);








int     _far  _pascal wvsprintf(LPSTR lpszOut, LPCSTR lpszFmt, const void  _far* lpParams);

int	 _far  _cdecl wsprintf(LPSTR lpszOut, LPCSTR lpszFmt, ...);








struct HDRVR__ { int unused; }; typedef const struct HDRVR__  _near* HDRVR ;

typedef LRESULT (_far  _pascal* DRIVERPROC)(DWORD, HDRVR, UINT, LPARAM, LPARAM);





#line 5315
typedef struct tagDRVCONFIGINFO
{
    DWORD   dwDCISize;
    LPCSTR  lpszDCISectionName;
    LPCSTR  lpszDCIAliasName;
} DRVCONFIGINFO;
typedef DRVCONFIGINFO  _near* PDRVCONFIGINFO;
typedef DRVCONFIGINFO  _far* LPDRVCONFIGINFO;





#line 5333
LRESULT _far  _pascal DefDriverProc(DWORD dwDriverIdentifier, HDRVR driverID, UINT message, LPARAM lParam1, LPARAM lParam2);

HDRVR   _far  _pascal OpenDriver(LPCSTR szDriverName, LPCSTR szSectionName, LPARAM lParam2);
LRESULT _far  _pascal CloseDriver(HDRVR hDriver, LPARAM lParam1, LPARAM lParam2);

LRESULT _far  _pascal SendDriverMessage(HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2);

HINSTANCE _far  _pascal GetDriverModuleHandle(HDRVR hDriver);

HDRVR   _far  _pascal GetNextDriver(HDRVR, DWORD);




#line 5350
typedef struct tagDRIVERINFOSTRUCT
{
    UINT    length;
    HDRVR   hDriver;
    HINSTANCE hModule;
    char    szAliasName[128];
} DRIVERINFOSTRUCT;
typedef DRIVERINFOSTRUCT  _far* LPDRIVERINFOSTRUCT;

BOOL    _far  _pascal GetDriverInfo(HDRVR, DRIVERINFOSTRUCT  _far*);






#pragma pack()          /* Revert to default packing */







#line 18 "C:\SC\BIN\..\INCLUDE\windows.h"
#pragma pack()





#line 3 "C:\SC\BIN\..\INCLUDE\string.h"
 #pragma once













#line 28
typedef unsigned size_t;


typedef unsigned short wchar_t;



#line 46


void *	 __cdecl memcpy(void *,const void *,size_t);
void *   __cdecl _inline_memcpy(void *,const void *,size_t);
void *	 __cdecl memmove(void *,const void *,size_t);
char *	 __cdecl strcpy(char *,const char *);
char *	 __cdecl _inline_strcpy(char *,const char *);
char *	 __cdecl strncpy(char *,const char *,size_t);
char *	 __cdecl strcat(char *,const char *);
char *	 __cdecl strncat(char *,const char *,size_t);
int	 __cdecl memcmp(const void *,const void *,size_t);
int      __cdecl _inline_memcmp(const void *,const void *,size_t);
int	 __cdecl strcmp(const char *,const char *);
int	 __cdecl _inline_strcmp(const char *,const char *);
int	 __cdecl strcoll(const char *,const char *);
int	 __cdecl strncmp(const char *,const char *,size_t);
size_t	 __cdecl strxfrm(char *,const char *,size_t);
void *	 __cdecl memchr(const void *,int,size_t);
char *	 __cdecl strchr(const char *,int);
size_t	 __cdecl strcspn(const char *,const char *);
char *	 __cdecl strpbrk(const char *,const char *);
char *	 __cdecl strrchr(const char *,int);
size_t	 __cdecl strspn(const char *,const char *);
char *	 __cdecl strstr(const char *,const char *);
char *	 __cdecl strtok(char *,const char *);
void *	 __cdecl memset(void *,int,size_t);
char *	 __cdecl strerror(int);
size_t	 __cdecl strlen(const char *);
size_t	 __cdecl _inline_strlen(const char *);


size_t  __cdecl wcslen(const wchar_t *);
wchar_t * __cdecl wcscpy(wchar_t *, const wchar_t *);

int  *	 __cdecl _memintset(int *, int, size_t);
int	 __cdecl memicmp(const void *,const void *,size_t);
void *   __cdecl memccpy(void *,const void *,int,unsigned int);
char *	 __cdecl stpcpy(char *,const char *);
int	 __cdecl stricmp(const char *,const char *);
int	 __cdecl strcmpl(const char *,const char *);
int	 __cdecl strnicmp(const char *, const char *, size_t);
char *	 __cdecl strdup(const char *);
char *	 __cdecl strlwr(char *);
char *	 __cdecl strupr(char *);
char *	 __cdecl strnset(char *,int,size_t);
char *	 __cdecl strrev(char *);
char *	 __cdecl strset(char *,int);
void	 __cdecl swab(char *,char *,size_t);
void	 __cdecl movedata(unsigned short srcseg,unsigned srcoff,unsigned short destseg,unsigned destoff,size_t nbytes);
char *	 __cdecl _strerror(const char *);


void __far *  __cdecl __far fmemccpy(void __far *,const void __far *,int,unsigned int);
void __far *  __cdecl __far fmemchr(const void __far *,int,size_t);
int           __cdecl __far fmemcmp(const void __far *,const void __far *,size_t);
int           __cdecl __far _fmemcmp(const void __far *,const void __far *,size_t);
int           __cdecl       _inline_fmemcmp(const void __far *,const void __far *,size_t);
void __far *  __cdecl __far fmemcpy(void __far *,const void __far *,size_t);
void __far *  __cdecl __far _fmemcpy(void __far *,const void __far *,size_t);
void __far *  __cdecl       _inline_fmemcpy(void __far *,const void __far *,size_t);
int           __cdecl __far fmemicmp(const void __far *,const void __far *,size_t);
void __far *  __cdecl __far fmemmove(void __far *,const void __far *,size_t);
void __far *  __cdecl __far _fmemmove(void __far *,const void __far *,size_t);
void __far *  __cdecl __far fmemset(void __far *,int,size_t);
char __far *  __cdecl __far fstrcat(char __far *,const char __far*);
char __far *  __cdecl __far fstrchr(const char __far *,int);
char __far *  __cdecl __far  strchr(const char __far *,int);
int	      __cdecl __far fstrcmp(const char __far *,const char __far *);
int	      __cdecl __far _fstrcmp(const char __far *,const char __far *);
int	      __cdecl       _inline_fstrcmp(const char __far *,const char __far *);
char __far *  __cdecl __far fstrcpy(char __far *,const char __far *);
char __far *  __cdecl __far _fstrcpy(char __far *,const char __far *);
char __far *  __cdecl       _inline_fstrcpy(char __far *,const char __far *);
size_t	      __cdecl __far fstrcspn(const char __far *,const char __far *);
char __far *  __cdecl __far fstrdup(const char __far *);
char __near *  __cdecl __far _nstrdup(const char __far *);
int	      __cdecl __far fstricmp(const char __far *,const char __far *);
size_t	      __cdecl __far fstrlen(const char __far *);
size_t	      __cdecl       _inline_fstrlen(const char __far *);
size_t	      __cdecl __far _fstrlen(const char __far *);
char __far *  __cdecl __far fstrlwr(char __far *);
char __far *  __cdecl __far fstrncat(char __far *,const char __far *,size_t);
int	      __cdecl __far fstrncmp(const char __far *,const char __far *,size_t);
char __far *  __cdecl __far fstrncpy(char __far *,const char __far *,size_t);
int	      __cdecl __far fstrnicmp(const char __far *, const char __far *, size_t);
char __far *  __cdecl __far fstrnset(char __far *,int,size_t);
char __far *  __cdecl __far fstrpbrk(const char __far *,const char __far *);
char __far *  __cdecl __far fstrrchr(const char __far *,int);
char __far *  __cdecl __far fstrrev(char __far *);
char __far *  __cdecl __far fstrset(char __far *,int);
size_t	      __cdecl __far fstrspn(const char __far *,const char __far *);
char __far *  __cdecl __far fstrstr(const char __far *,const char __far *);
char __far *  __cdecl __far fstrtok(char __far *,const char __far *);
char __far *  __cdecl __far _fstrtok(char __far *,const char __far *);
char __far *  __cdecl __far fstrupr(char __far *);




#line 156
int	 __cdecl _memicmp(const void *,const void *,size_t);

char *	 __cdecl _strdup(const char *);
#line 161
char *	 __cdecl _strrev(char *);

#line 193

#line 202





extern int  __cdecl sys_nerr;
extern char *  __cdecl sys_errlist[];









#line 3 "C:\SC\BIN\..\INCLUDE\commdlg.h"
 #pragma once



#pragma pack(__DEFALIGN)





#line 17 "C:\SC\BIN\..\INCLUDE\win16\commdlg.h"
#pragma pack(1)         /* Assume byte packing throughout */




#line 38
typedef struct tagOFN
{
    DWORD   lStructSize;
    HWND    hwndOwner;
    HINSTANCE hInstance;
    LPCSTR  lpstrFilter;
    LPSTR   lpstrCustomFilter;
    DWORD   nMaxCustFilter;
    DWORD   nFilterIndex;
    LPSTR   lpstrFile;
    DWORD   nMaxFile;
    LPSTR   lpstrFileTitle;
    DWORD   nMaxFileTitle;
    LPCSTR  lpstrInitialDir;
    LPCSTR  lpstrTitle;
    DWORD   Flags;
    UINT    nFileOffset;
    UINT    nFileExtension;
    LPCSTR  lpstrDefExt;
    LPARAM  lCustData;
    UINT    (_far  _pascal *lpfnHook)(HWND, UINT, WPARAM, LPARAM);
    LPCSTR  lpTemplateName;
}   OPENFILENAME;
typedef OPENFILENAME  _far* LPOPENFILENAME;

BOOL    _far  _pascal GetOpenFileName(OPENFILENAME  _far*);
BOOL    _far  _pascal GetSaveFileName(OPENFILENAME  _far*);
int     _far  _pascal GetFileTitle(LPCSTR, LPSTR, UINT);





#line 100
typedef struct tagCHOOSECOLOR
{
    DWORD   lStructSize;
    HWND    hwndOwner;
    HWND    hInstance;
    COLORREF rgbResult;
    COLORREF  _far* lpCustColors;
    DWORD   Flags;
    LPARAM  lCustData;
    UINT    (_far  _pascal* lpfnHook)(HWND, UINT, WPARAM, LPARAM);
    LPCSTR  lpTemplateName;
} CHOOSECOLOR;
typedef CHOOSECOLOR  _far *LPCHOOSECOLOR;

BOOL    _far  _pascal ChooseColor(CHOOSECOLOR  _far*);


#line 124
typedef struct tagFINDREPLACE
{
    DWORD    lStructSize;
    HWND     hwndOwner;
#line 130
    HINSTANCE hInstance;
    DWORD    Flags;
    LPSTR    lpstrFindWhat;
    LPSTR    lpstrReplaceWith;
    UINT     wFindWhatLen;
    UINT     wReplaceWithLen;
    LPARAM   lCustData;
    UINT    (_far  _pascal* lpfnHook)(HWND, UINT, WPARAM, LPARAM);

    LPCSTR   lpTemplateName;
} FINDREPLACE;
typedef FINDREPLACE  _far *LPFINDREPLACE;


#line 161
HWND    _far  _pascal FindText(FINDREPLACE  _far*);
HWND    _far  _pascal ReplaceText(FINDREPLACE  _far*);

typedef struct tagCHOOSEFONT
{
    DWORD	    lStructSize;
    HWND	    hwndOwner;
    HDC 	    hDC;
    LOGFONT  _far*    lpLogFont;
    int		    iPointSize;
    DWORD	    Flags;
    COLORREF        rgbColors;
    LPARAM          lCustData;
    UINT (_far  _pascal* lpfnHook)(HWND, UINT, WPARAM, LPARAM);

    LPCSTR          lpTemplateName;
#line 179
    HINSTANCE       hInstance;

    LPSTR	    lpszStyle;
#line 184
    UINT            nFontType;
    int		    nSizeMin;
    int		    nSizeMax;

} CHOOSEFONT;
typedef CHOOSEFONT  _far *LPCHOOSEFONT;

BOOL _far  _pascal ChooseFont(CHOOSEFONT  _far*);











#line 248
typedef struct tagPD
{
    DWORD   lStructSize;
    HWND    hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC     hDC;
    DWORD   Flags;
    UINT    nFromPage;
    UINT    nToPage;
    UINT    nMinPage;
    UINT    nMaxPage;
    UINT    nCopies;
    HINSTANCE hInstance;
    LPARAM  lCustData;
    UINT    (_far  _pascal* lpfnPrintHook)(HWND, UINT, WPARAM, LPARAM);
    UINT    (_far  _pascal* lpfnSetupHook)(HWND, UINT, WPARAM, LPARAM);
    LPCSTR  lpPrintTemplateName;
    LPCSTR  lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
} PRINTDLG;
typedef PRINTDLG   _far* LPPRINTDLG;

BOOL    _far  _pascal PrintDlg(PRINTDLG  _far*);


#line 297
typedef struct tagDEVNAMES
{
    UINT wDriverOffset;
    UINT wDeviceOffset;
    UINT wOutputOffset;
    UINT wDefault;
} DEVNAMES;
typedef DEVNAMES  _far* LPDEVNAMES;



DWORD   _far  _pascal CommDlgExtendedError(void);


#line 315
#pragma pack()






#line 18 "C:\SC\BIN\..\INCLUDE\commdlg.h"
#pragma pack()





#line 3 "C:\SC\BIN\..\INCLUDE\ole2.h"
 #pragma once



#pragma pack(__DEFALIGN)






#line 16 "C:\SC\BIN\..\INCLUDE\win16\ole2.h"
#pragma warning(disable:4001)



#line 3 "C:\SC\BIN\..\INCLUDE\string.h"
 #pragma once







#line 3 "C:\SC\BIN\..\INCLUDE\compobj.h"
#pragma pack(__DEFALIGN)


#line 11
 #pragma once









#line 36 "C:\SC\BIN\..\INCLUDE\win16\compobj.h"



































#line 299
typedef short SHORT;
typedef unsigned short USHORT;
typedef DWORD ULONG;





#line 312
typedef WORD WCHAR;


typedef struct   _LARGE_INTEGER {
    DWORD LowPart;
    LONG  HighPart;
} LARGE_INTEGER, *PLARGE_INTEGER;


#line 323
typedef struct   _ULARGE_INTEGER {
    DWORD LowPart;
    DWORD HighPart;
} ULARGE_INTEGER, *PULARGE_INTEGER;


#line 333
typedef struct   tagFILETIME
{
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME;












#line 19 "C:\SC\BIN\..\INCLUDE\win16\scode.h"
typedef long SCODE;
typedef SCODE *PSCODE;
typedef void  _far * HRESULT;



























































#line 93
 extern HRESULT  __export  _far   _pascal   PropagateResult(HRESULT hrPrev, SCODE scNew);












#line 114

























































































































































































































#line 498 "C:\SC\BIN\..\INCLUDE\win16\compobj.h"

#line 520
typedef struct GUID
{
    DWORD Data1;
    WORD  Data2;
    WORD  Data3;
    BYTE  Data4[8];
} GUID;


typedef                GUID  _far* LPGUID;






















#line 559
typedef GUID IID;
typedef                IID  _far* LPIID;



#line 566
typedef GUID CLSID;
typedef              CLSID  _far* LPCLSID;








#line 18 "C:\SC\BIN\..\INCLUDE\win16\coguid.h"


 extern const GUID  _cdecl  _far GUID_NULL ;

 extern const GUID  _cdecl  _far IID_IUnknown  ;
 extern const GUID  _cdecl  _far IID_IClassFactory  ;
 extern const GUID  _cdecl  _far IID_IMalloc  ;
 extern const GUID  _cdecl  _far IID_IMarshal  ;


 extern const GUID  _cdecl  _far IID_IRpcChannel  ;
 extern const GUID  _cdecl  _far IID_IRpcStub  ;
 extern const GUID  _cdecl  _far IID_IStubManager  ;
 extern const GUID  _cdecl  _far IID_IRpcProxy  ;
 extern const GUID  _cdecl  _far IID_IProxyManager  ;
 extern const GUID  _cdecl  _far IID_IPSFactory  ;


 extern const GUID  _cdecl  _far IID_ILockBytes  ;
 extern const GUID  _cdecl  _far IID_IStorage  ;
 extern const GUID  _cdecl  _far IID_IStream  ;
 extern const GUID  _cdecl  _far IID_IEnumSTATSTG  ;


 extern const GUID  _cdecl  _far IID_IBindCtx  ;
 extern const GUID  _cdecl  _far IID_IMoniker  ;
 extern const GUID  _cdecl  _far IID_IRunningObjectTable  ;
 extern const GUID  _cdecl  _far IID_IInternalMoniker  ;


 extern const GUID  _cdecl  _far IID_IRootStorage  ;
 extern const GUID  _cdecl  _far IID_IDfReserved1  ;
 extern const GUID  _cdecl  _far IID_IDfReserved2  ;
 extern const GUID  _cdecl  _far IID_IDfReserved3  ;


 extern const GUID  _cdecl  _far IID_IMessageFilter  ;


 extern const GUID  _cdecl  _far CLSID_StdMarshal  ;


 extern const GUID  _cdecl  _far IID_IStdMarshalInfo  ;


 extern const GUID  _cdecl  _far IID_IExternalConnection  ;








#line 590 "C:\SC\BIN\..\INCLUDE\win16\compobj.h"
typedef enum tagMEMCTX
{
    MEMCTX_TASK = 1,
    MEMCTX_SHARED = 2,

#line 598

    MEMCTX_UNKNOWN = -1,
    MEMCTX_SAME = -2,
} MEMCTX;





typedef enum tagCLSCTX
{
    CLSCTX_INPROC_SERVER = 1,
    CLSCTX_INPROC_HANDLER = 2,
    CLSCTX_LOCAL_SERVER = 4
} CLSCTX;






#line 624
typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,

    REGCLS_MULTI_SEPARATE = 2,





} REGCLS;






typedef enum tagMSHLFLAGS
{
    MSHLFLAGS_NORMAL = 0,
    MSHLFLAGS_TABLESTRONG = 1,
    MSHLFLAGS_TABLEWEAK = 2
} MSHLFLAGS;


typedef enum tagMSHCTX
{
    MSHCTX_LOCAL = 0,
    MSHCTX_NOSHAREDMEM = 1,
} MSHCTX;



typedef enum tagCALLTYPE
{
    CALLTYPE_TOPLEVEL = 1,
    CALLTYPE_NESTED   = 2,
    CALLTYPE_ASYNC    = 3,
    CALLTYPE_TOPLEVEL_CALLPENDING = 4,
    CALLTYPE_ASYNC_CALLPENDING    = 5
} CALLTYPE;

typedef struct tagINTERFACEINFO
{
     struct IUnknown  _far *pUnk;
    IID      			iid;
    WORD        		wMethod;
} INTERFACEINFO,  _far * LPINTERFACEINFO;



typedef enum tagSERVERCALL
{
    SERVERCALL_ISHANDLED    = 0,
    SERVERCALL_REJECTED     = 1,
    SERVERCALL_RETRYLATER   = 2
} SERVERCALL;



typedef enum tagPENDINGTYPE
{
    PENDINGTYPE_TOPLEVEL = 1,
    PENDINGTYPE_NESTED   = 2,
} PENDINGTYPE;


typedef enum tagPENDINGMSG
{
    PENDINGMSG_CANCELCALL  = 0,
    PENDINGMSG_WAITNOPROCESS  = 1,
    PENDINGMSG_WAITDEFPROCESS = 2

} PENDINGMSG;



typedef enum tagEXTCONN
{
	EXTCONN_STRONG		= 0x0001
} EXTCONN;






#line 714
typedef  struct IUnknown { struct IUnknownVtbl  _far* lpVtbl; } IUnknown; typedef struct IUnknownVtbl IUnknownVtbl; struct  IUnknownVtbl
{
    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IUnknown  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IUnknown  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IUnknown  _far*  This)  ;
};

typedef        IUnknown  _far* LPUNKNOWN;






#line 730
typedef  struct IClassFactory { struct IClassFactoryVtbl  _far* lpVtbl; } IClassFactory; typedef struct IClassFactoryVtbl IClassFactoryVtbl; struct  IClassFactoryVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IClassFactory  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IClassFactory  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IClassFactory  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * CreateInstance)  ( IClassFactory  _far* This,  LPUNKNOWN pUnkOuter,
                              const IID  _far*  const riid,
                              LPVOID  _far* ppvObject)  ;
    HRESULT (__export  _far   _cdecl  * LockServer)  ( IClassFactory  _far* This,  BOOL fLock)  ;

};
typedef       IClassFactory  _far* LPCLASSFACTORY;






#line 753
typedef  struct IMalloc { struct IMallocVtbl  _far* lpVtbl; } IMalloc; typedef struct IMallocVtbl IMallocVtbl; struct  IMallocVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IMalloc  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IMalloc  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IMalloc  _far*  This)  ;


    void  _far* (__export  _far   _cdecl  * Alloc)  ( IMalloc  _far* This,  ULONG cb)  ;
    void  _far* (__export  _far   _cdecl  * Realloc)  ( IMalloc  _far* This,  void  _far* pv, ULONG cb)  ;
    void (__export  _far   _cdecl  * Free)  ( IMalloc  _far* This,  void  _far* pv)  ;
    ULONG (__export  _far   _cdecl  * GetSize)  ( IMalloc  _far* This,  void  _far* pv)  ;
    int (__export  _far   _cdecl  * DidAlloc)  ( IMalloc  _far* This,  void  _far* pv)  ;
    void (__export  _far   _cdecl  * HeapMinimize)  ( IMalloc  _far*  This)  ;
};
typedef       IMalloc  _far* LPMALLOC;





#line 777
typedef  struct IStream IStream;

typedef         IStream  _far* LPSTREAM;



#line 785
typedef  struct IMarshal { struct IMarshalVtbl  _far* lpVtbl; } IMarshal; typedef struct IMarshalVtbl IMarshalVtbl; struct  IMarshalVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IMarshal  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IMarshal  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IMarshal  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetUnmarshalClass) ( IMarshal  _far* This,  const IID  _far*  const riid, LPVOID pv,
                        DWORD dwDestContext, LPVOID pvDestContext,
                        DWORD mshlflags, LPCLSID pCid)  ;
    HRESULT (__export  _far   _cdecl  * GetMarshalSizeMax) ( IMarshal  _far* This,  const IID  _far*  const riid, LPVOID pv,
                        DWORD dwDestContext, LPVOID pvDestContext,
                        DWORD mshlflags, LPDWORD pSize)  ;
    HRESULT (__export  _far   _cdecl  * MarshalInterface) ( IMarshal  _far* This,  LPSTREAM pStm, const IID  _far*  const riid,
                        LPVOID pv, DWORD dwDestContext, LPVOID pvDestContext,
                        DWORD mshlflags)  ;
    HRESULT (__export  _far   _cdecl  * UnmarshalInterface) ( IMarshal  _far* This,  LPSTREAM pStm, const IID  _far*  const riid,
                        LPVOID  _far* ppv)  ;
    HRESULT (__export  _far   _cdecl  * ReleaseMarshalData) ( IMarshal  _far* This,  LPSTREAM pStm)  ;
    HRESULT (__export  _far   _cdecl  * DisconnectObject) ( IMarshal  _far* This,  DWORD dwReserved)  ;
};
typedef         IMarshal  _far* LPMARSHAL;



#line 813
typedef  struct IStdMarshalInfo { struct IStdMarshalInfoVtbl  _far* lpVtbl; } IStdMarshalInfo; typedef struct IStdMarshalInfoVtbl IStdMarshalInfoVtbl; struct  IStdMarshalInfoVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IStdMarshalInfo  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IStdMarshalInfo  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IStdMarshalInfo  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetClassForHandler) ( IStdMarshalInfo  _far* This,  DWORD dwDestContext,
                        LPVOID pvDestContext, LPCLSID pClsid)  ;
};
typedef         IStdMarshalInfo  _far* LPSTDMARSHALINFO;






#line 833
typedef  struct IMessageFilter { struct IMessageFilterVtbl  _far* lpVtbl; } IMessageFilter; typedef struct IMessageFilterVtbl IMessageFilterVtbl; struct  IMessageFilterVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IMessageFilter  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IMessageFilter  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IMessageFilter  _far*  This)  ;


    DWORD (__export  _far   _cdecl  * HandleInComingCall)  ( IMessageFilter  _far* This,  DWORD dwCallType,
                                HTASK htaskCaller, DWORD dwTickCount,
                                DWORD dwReserved )  ;
    DWORD (__export  _far   _cdecl  * RetryRejectedCall)  ( IMessageFilter  _far* This,
                                HTASK htaskCallee, DWORD dwTickCount,
                                DWORD dwRejectType )  ;
    DWORD (__export  _far   _cdecl  * MessagePending)  ( IMessageFilter  _far* This,
                                HTASK htaskCallee, DWORD dwTickCount,
                                DWORD dwPendingType  )  ;
};
typedef       IMessageFilter  _far* LPMESSAGEFILTER;





#line 859
typedef  struct IExternalConnection { struct IExternalConnectionVtbl  _far* lpVtbl; } IExternalConnection; typedef struct IExternalConnectionVtbl IExternalConnectionVtbl; struct  IExternalConnectionVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IExternalConnection  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IExternalConnection  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IExternalConnection  _far*  This)  ;


    DWORD (__export  _far   _cdecl  * AddConnection)  ( IExternalConnection  _far* This,  DWORD extconn, DWORD reserved)  ;
    DWORD (__export  _far   _cdecl  * ReleaseConnection)  ( IExternalConnection  _far* This,  DWORD extconn, DWORD reserved, BOOL fLastReleaseCloses)  ;
};
typedef       IExternalConnection  _far* LPEXTERNALCONNECTION;








#line 884
typedef  struct IEnumString { struct IEnumStringVtbl  _far* lpVtbl; } IEnumString; typedef struct IEnumStringVtbl IEnumStringVtbl; struct  IEnumStringVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IEnumString  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IEnumString  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IEnumString  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Next)  ( IEnumString  _far* This,  ULONG celt,
                       LPSTR  _far* rgelt,
                       ULONG  _far* pceltFetched)  ;
    HRESULT (__export  _far   _cdecl  * Skip)  ( IEnumString  _far* This,  ULONG celt)  ;
    HRESULT (__export  _far   _cdecl  * Reset)  ( IEnumString  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Clone)  ( IEnumString  _far* This,  IEnumString  _far*  _far* ppenm)  ;
};
typedef      IEnumString  _far* LPENUMSTRING;



#line 905
typedef  struct IEnumUnknown { struct IEnumUnknownVtbl  _far* lpVtbl; } IEnumUnknown; typedef struct IEnumUnknownVtbl IEnumUnknownVtbl; struct  IEnumUnknownVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IEnumUnknown  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IEnumUnknown  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IEnumUnknown  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Next)  ( IEnumUnknown  _far* This,  ULONG celt, LPUNKNOWN  _far* rgelt, ULONG  _far* pceltFetched)  ;
    HRESULT (__export  _far   _cdecl  * Skip)  ( IEnumUnknown  _far* This,  ULONG celt)  ;
    HRESULT (__export  _far   _cdecl  * Reset)  ( IEnumUnknown  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Clone)  ( IEnumUnknown  _far* This,  IEnumUnknown  _far*  _far* ppenm)  ;
};
typedef         IEnumUnknown  _far* LPENUMUNKNOWN;




 extern DWORD  __export  _far   _pascal   CoBuildVersion(  void );



 extern HRESULT  __export  _far   _pascal    CoInitialize(LPMALLOC pMalloc);
 extern void  __export  _far   _pascal    CoUninitialize(void);
 extern HRESULT  __export  _far   _pascal    CoGetMalloc(DWORD dwMemContext, LPMALLOC  _far* ppMalloc);
 extern DWORD  __export  _far   _pascal   CoGetCurrentProcess(void);
 extern HRESULT  __export  _far   _pascal    CoCreateStandardMalloc(DWORD memctx, IMalloc  _far*  _far* ppMalloc);




 extern HRESULT  __export  _far   _pascal    CoGetClassObject(const CLSID  _far*  const rclsid, DWORD dwClsContext, LPVOID pvReserved,
                    const IID  _far*  const riid, LPVOID  _far* ppv);
 extern HRESULT  __export  _far   _pascal    CoRegisterClassObject(const CLSID  _far*  const rclsid, LPUNKNOWN pUnk,
                    DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister);
 extern HRESULT  __export  _far   _pascal    CoRevokeClassObject(DWORD dwRegister);




 extern HRESULT  __export  _far   _pascal   CoMarshalInterface(LPSTREAM pStm, const IID  _far*  const riid, LPUNKNOWN pUnk,
                    DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
 extern HRESULT  __export  _far   _pascal   CoUnmarshalInterface(LPSTREAM pStm, const IID  _far*  const riid, LPVOID  _far* ppv);
 extern HRESULT  __export  _far   _pascal   CoMarshalHresult(LPSTREAM pstm, HRESULT hresult);
 extern HRESULT  __export  _far   _pascal   CoUnmarshalHresult(LPSTREAM pstm, HRESULT  _far * phresult);
 extern HRESULT  __export  _far   _pascal   CoReleaseMarshalData(LPSTREAM pStm);
 extern HRESULT  __export  _far   _pascal   CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved);
 extern HRESULT  __export  _far   _pascal   CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases);
 extern HRESULT  __export  _far   _pascal   CoGetStandardMarshal(const IID  _far*  const riid, LPUNKNOWN pUnk,
                    DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags,
                    LPMARSHAL  _far* ppMarshal);

 extern BOOL  __export  _far   _pascal   CoIsHandlerConnected(LPUNKNOWN pUnk);



 extern HINSTANCE  __export  _far   _pascal   CoLoadLibrary(LPSTR lpszLibName, BOOL bAutoFree);
 extern void  __export  _far   _pascal   CoFreeLibrary(HINSTANCE hInst);
 extern void  __export  _far   _pascal   CoFreeAllLibraries(void);
 extern void  __export  _far   _pascal   CoFreeUnusedLibraries(void);




 extern HRESULT  __export  _far   _pascal   CoCreateInstance(const CLSID  _far*  const rclsid, LPUNKNOWN pUnkOuter,
                    DWORD dwClsContext, const IID  _far*  const riid, LPVOID  _far* ppv);



 extern BOOL  __export  _far   _pascal   IsEqualGUID(const GUID  _far*  const rguid1, const GUID  _far*  const rguid2);
 extern HRESULT  __export  _far   _pascal   StringFromCLSID(const CLSID  _far*  const rclsid, LPSTR  _far* lplpsz);
 extern HRESULT  __export  _far   _pascal   CLSIDFromString(LPSTR lpsz, LPCLSID pclsid);
 extern HRESULT  __export  _far   _pascal   StringFromIID(const IID  _far*  const rclsid, LPSTR  _far* lplpsz);
 extern HRESULT  __export  _far   _pascal   IIDFromString(LPSTR lpsz, LPIID lpiid);
 extern BOOL  __export  _far   _pascal   CoIsOle1Class(const CLSID  _far*  const rclsid);
 extern HRESULT  __export  _far   _pascal   ProgIDFromCLSID (const CLSID  _far*  const clsid, LPSTR  _far* lplpszProgID);
 extern HRESULT  __export  _far   _pascal   CLSIDFromProgID (LPCSTR lpszProgID, LPCLSID lpclsid);
 extern int  __export  _far   _pascal   StringFromGUID2(const GUID  _far*  const rguid, LPSTR lpsz, int cbMax);

 extern HRESULT  __export  _far   _pascal   CoCreateGuid(GUID  _far *pguid);

 extern BOOL  __export  _far   _pascal   CoFileTimeToDosDateTime(
                 FILETIME  _far* lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
 extern BOOL  __export  _far   _pascal   CoDosDateTimeToFileTime(
                       WORD nDosDate, WORD nDosTime, FILETIME  _far* lpFileTime);
 extern HRESULT  __export  _far   _pascal    CoFileTimeNow( FILETIME  _far* lpFileTime );


 extern HRESULT  __export  _far   _pascal   CoRegisterMessageFilter( LPMESSAGEFILTER lpMessageFilter,
                                LPMESSAGEFILTER  _far* lplpMessageFilter );




 extern HRESULT  __export  _far   _pascal   CoGetTreatAsClass(const CLSID  _far*  const clsidOld, LPCLSID pClsidNew);
 extern HRESULT  __export  _far   _pascal   CoTreatAsClass(const CLSID  _far*  const clsidOld, const CLSID  _far*  const clsidNew);




#line 1008
 extern HRESULT  __export  _far   _pascal    DllGetClassObject(const CLSID  _far*  const rclsid, const IID  _far*  const riid, LPVOID  _far* ppv);
#line 1012
typedef HRESULT (__export  _far   _pascal   _far* LPFNGETCLASSOBJECT) (const CLSID  _far*  const, const IID  _far*  const, LPVOID  _far*);



 extern HRESULT  __export  _far   _pascal    DllCanUnloadNow(void);
#line 1020
typedef HRESULT (__export  _far   _pascal   _far* LPFNCANUNLOADNOW)(void);







 extern HRESULT  __export  _far   _pascal   FnAssert(LPSTR lpstrExpr, LPSTR lpstrMsg, LPSTR lpstrFileName, UINT iLine);






#line 17 "C:\SC\BIN\..\INCLUDE\compobj.h"
#pragma pack()





















































#line 92 "C:\SC\BIN\..\INCLUDE\win16\ole2.h"











































































#line 194
typedef enum tagOLERENDER
{
    OLERENDER_NONE   = 0,
    OLERENDER_DRAW   = 1,
    OLERENDER_FORMAT = 2,
    OLERENDER_ASIS   = 3
} OLERENDER;
typedef  OLERENDER  _far* LPOLERENDER;


typedef struct   tagOLEVERB
{
    LONG    lVerb;
    LPSTR   lpszVerbName;
    DWORD   fuFlags;
    DWORD	grfAttribs;
} OLEVERB,  _far* LPOLEVERB;



typedef enum tagOLEVERBATTRIB
{
    OLEVERBATTRIB_NEVERDIRTIES = 1,
    OLEVERBATTRIB_ONCONTAINERMENU = 2
} OLEVERBATTRIB;



typedef enum tagUSERCLASSTYPE
{
    USERCLASSTYPE_FULL = 1,
    USERCLASSTYPE_SHORT= 2,
    USERCLASSTYPE_APPNAME= 3,
} USERCLASSTYPE;



typedef enum tagOLEMISC
{
    OLEMISC_RECOMPOSEONRESIZE				= 1,
    OLEMISC_ONLYICONIC						= 2,
    OLEMISC_INSERTNOTREPLACE				= 4,
    OLEMISC_STATIC							= 8,
    OLEMISC_CANTLINKINSIDE					= 16,
    OLEMISC_CANLINKBYOLE1					= 32,
    OLEMISC_ISLINKOBJECT					= 64,
    OLEMISC_INSIDEOUT						= 128,
    OLEMISC_ACTIVATEWHENVISIBLE				= 256,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT	= 512
} OLEMISC;



typedef enum tagOLECLOSE
{
    OLECLOSE_SAVEIFDIRTY = 0,
    OLECLOSE_NOSAVE      = 1,
    OLECLOSE_PROMPTSAVE  = 2
} OLECLOSE;




typedef enum tagOLEGETMONIKER
{
    OLEGETMONIKER_ONLYIFTHERE=1,
    OLEGETMONIKER_FORCEASSIGN=2,
    OLEGETMONIKER_UNASSIGN=3,
    OLEGETMONIKER_TEMPFORUSER=4
} OLEGETMONIKER;




typedef enum tagOLEWHICHMK
{
    OLEWHICHMK_CONTAINER=1,
    OLEWHICHMK_OBJREL=2,
    OLEWHICHMK_OBJFULL=3
} OLEWHICHMK;


#line 279
typedef struct   tagSIZEL
{
    long cx;
    long cy;
} SIZEL,  _far* LPSIZEL;



#line 290
typedef struct   tagRECTL
{
    long    left;
    long    top;
    long    right;
    long    bottom;
} RECTL,  _far* LPRECTL;

typedef struct   tagPOINTL {
    LONG x;
    LONG y;
} POINTL;





typedef const RECT  _far* LPCRECT;



typedef const RECTL  _far* LPCRECTL;







#line 321












typedef struct _OLESTREAM  _far*  LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD (_far  _pascal* Get)(LPOLESTREAM, void  _far*, DWORD);
    DWORD (_far  _pascal* Put)(LPOLESTREAM, const void  _far*, DWORD);
} OLESTREAMVTBL;
typedef  OLESTREAMVTBL  _far*  LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;




typedef struct tagOBJECTDESCRIPTOR
{
   ULONG    cbSize;
   CLSID    clsid;
   DWORD    dwDrawAspect;





   SIZEL    sizel;



   POINTL   pointl;








   DWORD    dwStatus;



   DWORD    dwFullUserTypeName;



   DWORD    dwSrcOfCopy;













} OBJECTDESCRIPTOR,  *POBJECTDESCRIPTOR,   _far *LPOBJECTDESCRIPTOR,
  LINKSRCDESCRIPTOR, *PLINKSRCDESCRIPTOR,  _far *LPLINKSRCDESCRIPTOR;







#line 416
typedef  struct IOleClientSite IOleClientSite;
typedef  struct IOleContainer IOleContainer;
typedef  struct IOleObject IOleObject;


typedef         IOleObject  _far* LPOLEOBJECT;
typedef     IOleClientSite  _far* LPOLECLIENTSITE;
typedef       IOleContainer  _far* LPOLECONTAINER;







#line 16 "C:\SC\BIN\..\INCLUDE\win16\oleguid.h"


 extern const GUID  _cdecl  _far IID_IEnumUnknown  ;
 extern const GUID  _cdecl  _far IID_IEnumString  ;
 extern const GUID  _cdecl  _far IID_IEnumMoniker  ;
 extern const GUID  _cdecl  _far IID_IEnumFORMATETC  ;
 extern const GUID  _cdecl  _far IID_IEnumOLEVERB  ;
 extern const GUID  _cdecl  _far IID_IEnumSTATDATA  ;

 extern const GUID  _cdecl  _far IID_IEnumGeneric  ;
 extern const GUID  _cdecl  _far IID_IEnumHolder  ;
 extern const GUID  _cdecl  _far IID_IEnumCallback  ;

 extern const GUID  _cdecl  _far IID_IPersistStream  ;
 extern const GUID  _cdecl  _far IID_IPersistStorage  ;
 extern const GUID  _cdecl  _far IID_IPersistFile  ;
 extern const GUID  _cdecl  _far IID_IPersist  ;

 extern const GUID  _cdecl  _far IID_IViewObject  ;
 extern const GUID  _cdecl  _far IID_IDataObject  ;
 extern const GUID  _cdecl  _far IID_IAdviseSink  ;
 extern const GUID  _cdecl  _far IID_IDataAdviseHolder  ;
 extern const GUID  _cdecl  _far IID_IOleAdviseHolder  ;

 extern const GUID  _cdecl  _far IID_IOleObject  ;
 extern const GUID  _cdecl  _far IID_IOleInPlaceObject  ;
 extern const GUID  _cdecl  _far IID_IOleWindow  ;
 extern const GUID  _cdecl  _far IID_IOleInPlaceUIWindow  ;
 extern const GUID  _cdecl  _far IID_IOleInPlaceFrame  ;
 extern const GUID  _cdecl  _far IID_IOleInPlaceActiveObject  ;

 extern const GUID  _cdecl  _far IID_IOleClientSite  ;
 extern const GUID  _cdecl  _far IID_IOleInPlaceSite  ;

 extern const GUID  _cdecl  _far IID_IParseDisplayName  ;
 extern const GUID  _cdecl  _far IID_IOleContainer  ;
 extern const GUID  _cdecl  _far IID_IOleItemContainer  ;

 extern const GUID  _cdecl  _far IID_IOleLink  ;
 extern const GUID  _cdecl  _far IID_IOleCache  ;
 extern const GUID  _cdecl  _far IID_IOleManager  ;
 extern const GUID  _cdecl  _far IID_IOlePresObj  ;

 extern const GUID  _cdecl  _far IID_IDropSource  ;
 extern const GUID  _cdecl  _far IID_IDropTarget  ;

 extern const GUID  _cdecl  _far IID_IDebug  ;
 extern const GUID  _cdecl  _far IID_IDebugStream  ;

 extern const GUID  _cdecl  _far IID_IAdviseSink2  ;

 extern const GUID  _cdecl  _far IID_IRunnableObject  ;

 extern const GUID  _cdecl  _far IID_IViewObject2  ;
 extern const GUID  _cdecl  _far IID_IOleCache2  ;
 extern const GUID  _cdecl  _far IID_IOleCacheControl  ;





 extern const GUID  _cdecl  _far CLSID_Picture_Metafile  ;
 extern const GUID  _cdecl  _far CLSID_Picture_Dib  ;









#line 3 "C:\SC\BIN\..\INCLUDE\dvobj.h"
#pragma pack(__DEFALIGN)


#line 11
 #pragma once







#line 23 "C:\SC\BIN\..\INCLUDE\win16\dvobj.h"
typedef  struct IStorage IStorage;
typedef  struct IStream IStream;
typedef  struct IAdviseSink IAdviseSink;
typedef  struct IMoniker IMoniker;


typedef            IStorage  _far* LPSTORAGE;
typedef             IStream  _far* LPSTREAM;
typedef         IAdviseSink  _far* LPADVISESINK;
typedef             IMoniker  _far* LPMONIKER;



typedef WORD CLIPFORMAT;
#line 40
typedef  CLIPFORMAT  _far* LPCLIPFORMAT;




typedef enum tagDVASPECT
{
    DVASPECT_CONTENT = 1,
    DVASPECT_THUMBNAIL = 2,
    DVASPECT_ICON = 4,
    DVASPECT_DOCPRINT = 8
} DVASPECT;



typedef struct   tagDVTARGETDEVICE
{
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    BYTE tdData[1];
} DVTARGETDEVICE;



typedef struct   tagFORMATETC
{
    CLIPFORMAT          cfFormat;
    DVTARGETDEVICE  _far* ptd;
    DWORD               dwAspect;
    LONG                lindex;
    DWORD               tymed;
} FORMATETC,  _far* LPFORMATETC;



typedef enum tagTYMED
{
    TYMED_HGLOBAL = 1,
    TYMED_FILE = 2,
    TYMED_ISTREAM = 4,
    TYMED_ISTORAGE = 8,
    TYMED_GDI = 16,
    TYMED_MFPICT = 32,
    TYMED_NULL = 0
} TYMED;



typedef enum tagDATADIR
{
    DATADIR_GET = 1,
    DATADIR_SET = 2,
} DATADIR;



typedef struct   tagSTGMEDIUM
{
    DWORD   tymed;
    union
    {
        HANDLE  hGlobal;
        LPSTR   lpszFileName;
        IStream  _far* pstm;
        IStorage  _far* pstg;
    }

    u

    ;
    IUnknown  _far* pUnkForRelease;
} STGMEDIUM,  _far* LPSTGMEDIUM;



typedef enum tagADVF
{
    ADVF_NODATA = 1,
    ADVF_PRIMEFIRST = 2,
    ADVF_ONLYONCE = 4,
    ADVF_DATAONSTOP = 64,
    ADVFCACHE_NOHANDLER = 8,
    ADVFCACHE_FORCEBUILTIN = 16,
    ADVFCACHE_ONSAVE = 32
} ADVF;





typedef struct   tagSTATDATA
{
    FORMATETC formatetc;
    DWORD advf;
    IAdviseSink  _far* pAdvSink;
    DWORD dwConnection;
} STATDATA;

typedef  STATDATA  _far* LPSTATDATA;







#line 151
typedef  struct IEnumFORMATETC { struct IEnumFORMATETCVtbl  _far* lpVtbl; } IEnumFORMATETC; typedef struct IEnumFORMATETCVtbl IEnumFORMATETCVtbl; struct  IEnumFORMATETCVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IEnumFORMATETC  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppv)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IEnumFORMATETC  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IEnumFORMATETC  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Next)  ( IEnumFORMATETC  _far* This,  ULONG celt, FORMATETC  _far * rgelt, ULONG  _far* pceltFetched)  ;
    HRESULT (__export  _far   _cdecl  * Skip)  ( IEnumFORMATETC  _far* This,  ULONG celt)  ;
    HRESULT (__export  _far   _cdecl  * Reset)  ( IEnumFORMATETC  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Clone)  ( IEnumFORMATETC  _far* This,  IEnumFORMATETC  _far*  _far* ppenum)  ;
};
typedef        IEnumFORMATETC  _far* LPENUMFORMATETC;



#line 170
typedef  struct IEnumSTATDATA { struct IEnumSTATDATAVtbl  _far* lpVtbl; } IEnumSTATDATA; typedef struct IEnumSTATDATAVtbl IEnumSTATDATAVtbl; struct  IEnumSTATDATAVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IEnumSTATDATA  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppv)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IEnumSTATDATA  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IEnumSTATDATA  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Next)  ( IEnumSTATDATA  _far* This,  ULONG celt, STATDATA  _far * rgelt, ULONG  _far* pceltFetched)  ;
    HRESULT (__export  _far   _cdecl  * Skip)  ( IEnumSTATDATA  _far* This,  ULONG celt)  ;
    HRESULT (__export  _far   _cdecl  * Reset)  ( IEnumSTATDATA  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Clone)  ( IEnumSTATDATA  _far* This,  IEnumSTATDATA  _far*  _far* ppenum)  ;
};
typedef        IEnumSTATDATA  _far* LPENUMSTATDATA;





#line 193
typedef  struct IDataObject { struct IDataObjectVtbl  _far* lpVtbl; } IDataObject; typedef struct IDataObjectVtbl IDataObjectVtbl; struct  IDataObjectVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IDataObject  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IDataObject  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IDataObject  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetData)  ( IDataObject  _far* This,  LPFORMATETC pformatetcIn,
                            LPSTGMEDIUM pmedium )  ;
    HRESULT (__export  _far   _cdecl  * GetDataHere)  ( IDataObject  _far* This,  LPFORMATETC pformatetc,
                            LPSTGMEDIUM pmedium )  ;
    HRESULT (__export  _far   _cdecl  * QueryGetData)  ( IDataObject  _far* This,  LPFORMATETC pformatetc )  ;
    HRESULT (__export  _far   _cdecl  * GetCanonicalFormatEtc)  ( IDataObject  _far* This,  LPFORMATETC pformatetc,
                            LPFORMATETC pformatetcOut)  ;
    HRESULT (__export  _far   _cdecl  * SetData)  ( IDataObject  _far* This,  LPFORMATETC pformatetc, STGMEDIUM  _far * pmedium,
                            BOOL fRelease)  ;
    HRESULT (__export  _far   _cdecl  * EnumFormatEtc)  ( IDataObject  _far* This,  DWORD dwDirection,
                            LPENUMFORMATETC  _far* ppenumFormatEtc)  ;

    HRESULT (__export  _far   _cdecl  * DAdvise)  ( IDataObject  _far* This,  FORMATETC  _far* pFormatetc, DWORD advf,
                    LPADVISESINK pAdvSink, DWORD  _far* pdwConnection)  ;
    HRESULT (__export  _far   _cdecl  * DUnadvise)  ( IDataObject  _far* This,  DWORD dwConnection)  ;
    HRESULT (__export  _far   _cdecl  * EnumDAdvise)  ( IDataObject  _far* This,  LPENUMSTATDATA  _far* ppenumAdvise)  ;
};
typedef      IDataObject  _far* LPDATAOBJECT;






#line 230
typedef  struct IViewObject { struct IViewObjectVtbl  _far* lpVtbl; } IViewObject; typedef struct IViewObjectVtbl IViewObjectVtbl; struct  IViewObjectVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IViewObject  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IViewObject  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IViewObject  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Draw)  ( IViewObject  _far* This,  DWORD dwDrawAspect, LONG lindex,
                    void  _far* pvAspect, DVTARGETDEVICE  _far * ptd,
                    HDC hicTargetDev,
                    HDC hdcDraw,
                    LPCRECTL lprcBounds,
                    LPCRECTL lprcWBounds,
                    BOOL (_far  _pascal * pfnContinue) (DWORD),
                    DWORD dwContinue)  ;

    HRESULT (__export  _far   _cdecl  * GetColorSet)  ( IViewObject  _far* This,  DWORD dwDrawAspect, LONG lindex,
                    void  _far* pvAspect, DVTARGETDEVICE  _far * ptd,
                    HDC hicTargetDev,
                    LPLOGPALETTE  _far* ppColorSet)  ;

    HRESULT (__export  _far   _cdecl  * Freeze) ( IViewObject  _far* This,  DWORD dwDrawAspect, LONG lindex,
                    void  _far* pvAspect,
                    DWORD  _far* pdwFreeze)  ;
    HRESULT (__export  _far   _cdecl  * Unfreeze)  ( IViewObject  _far* This,  DWORD dwFreeze)  ;
    HRESULT (__export  _far   _cdecl  * SetAdvise)  ( IViewObject  _far* This,  DWORD aspects, DWORD advf,
                    LPADVISESINK pAdvSink)  ;
    HRESULT (__export  _far   _cdecl  * GetAdvise)  ( IViewObject  _far* This,  DWORD  _far* pAspects, DWORD  _far* pAdvf,
                    LPADVISESINK  _far* ppAdvSink)  ;
};
typedef      IViewObject  _far* LPVIEWOBJECT;



#line 267
typedef  struct IViewObject2 { struct IViewObject2Vtbl  _far* lpVtbl; } IViewObject2; typedef struct IViewObject2Vtbl IViewObject2Vtbl; struct  IViewObject2Vtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IViewObject2  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IViewObject2  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IViewObject2  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Draw)  ( IViewObject2  _far* This,  DWORD dwDrawAspect, LONG lindex,
                    void  _far* pvAspect, DVTARGETDEVICE  _far * ptd,
                    HDC hicTargetDev,
                    HDC hdcDraw,
                    LPCRECTL lprcBounds,
                    LPCRECTL lprcWBounds,
                    BOOL (_far  _pascal * pfnContinue) (DWORD),
                    DWORD dwContinue)  ;

    HRESULT (__export  _far   _cdecl  * GetColorSet)  ( IViewObject2  _far* This,  DWORD dwDrawAspect, LONG lindex,
                    void  _far* pvAspect, DVTARGETDEVICE  _far * ptd,
                    HDC hicTargetDev,
                    LPLOGPALETTE  _far* ppColorSet)  ;

    HRESULT (__export  _far   _cdecl  * Freeze) ( IViewObject2  _far* This,  DWORD dwDrawAspect, LONG lindex,
                    void  _far* pvAspect,
                    DWORD  _far* pdwFreeze)  ;
    HRESULT (__export  _far   _cdecl  * Unfreeze)  ( IViewObject2  _far* This,  DWORD dwFreeze)  ;
    HRESULT (__export  _far   _cdecl  * SetAdvise)  ( IViewObject2  _far* This,  DWORD aspects, DWORD advf,
                    LPADVISESINK pAdvSink)  ;
    HRESULT (__export  _far   _cdecl  * GetAdvise)  ( IViewObject2  _far* This,  DWORD  _far* pAspects, DWORD  _far* pAdvf,
                    LPADVISESINK  _far* ppAdvSink)  ;


    HRESULT (__export  _far   _cdecl  * GetExtent)  ( IViewObject2  _far* This,  DWORD dwDrawAspect, LONG lindex,
                    DVTARGETDEVICE  _far * ptd, LPSIZEL lpsizel)  ;

};
typedef      IViewObject2  _far* LPVIEWOBJECT2;



#line 309
typedef  struct IAdviseSink { struct IAdviseSinkVtbl  _far* lpVtbl; } IAdviseSink; typedef struct IAdviseSinkVtbl IAdviseSinkVtbl; struct  IAdviseSinkVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IAdviseSink  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppv)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IAdviseSink  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IAdviseSink  _far*  This)  ;


    void (__export  _far   _cdecl  * OnDataChange) ( IAdviseSink  _far* This,  FORMATETC  _far* pFormatetc,
                            STGMEDIUM  _far* pStgmed)  ;
    void (__export  _far   _cdecl  * OnViewChange) ( IAdviseSink  _far* This,  DWORD dwAspect, LONG lindex)  ;
    void (__export  _far   _cdecl  * OnRename) ( IAdviseSink  _far* This,  LPMONIKER pmk)  ;
    void (__export  _far   _cdecl  * OnSave) ( IAdviseSink  _far*  This)  ;
    void (__export  _far   _cdecl  * OnClose) ( IAdviseSink  _far*  This)  ;
};
typedef      IAdviseSink  _far* LPADVISESINK;




#line 331
typedef  struct IAdviseSink2 { struct IAdviseSink2Vtbl  _far* lpVtbl; } IAdviseSink2; typedef struct IAdviseSink2Vtbl IAdviseSink2Vtbl; struct  IAdviseSink2Vtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IAdviseSink2  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppv)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IAdviseSink2  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IAdviseSink2  _far*  This)  ;


    void (__export  _far   _cdecl  * OnDataChange) ( IAdviseSink2  _far* This,  FORMATETC  _far* pFormatetc,
                            STGMEDIUM  _far* pStgmed)  ;
    void (__export  _far   _cdecl  * OnViewChange) ( IAdviseSink2  _far* This,  DWORD dwAspect, LONG lindex)  ;
    void (__export  _far   _cdecl  * OnRename) ( IAdviseSink2  _far* This,  LPMONIKER pmk)  ;
    void (__export  _far   _cdecl  * OnSave) ( IAdviseSink2  _far*  This)  ;
    void (__export  _far   _cdecl  * OnClose) ( IAdviseSink2  _far*  This)  ;


    void (__export  _far   _cdecl  * OnLinkSrcChange) ( IAdviseSink2  _far* This,  LPMONIKER pmk)  ;
};
typedef      IAdviseSink2  _far* LPADVISESINK2;




#line 356
typedef  struct IDataAdviseHolder { struct IDataAdviseHolderVtbl  _far* lpVtbl; } IDataAdviseHolder; typedef struct IDataAdviseHolderVtbl IDataAdviseHolderVtbl; struct  IDataAdviseHolderVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IDataAdviseHolder  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppv)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IDataAdviseHolder  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IDataAdviseHolder  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Advise) ( IDataAdviseHolder  _far* This,  LPDATAOBJECT pDataObject, FORMATETC  _far* pFetc,
            DWORD advf, LPADVISESINK pAdvise, DWORD  _far* pdwConnection)  ;
    HRESULT (__export  _far   _cdecl  * Unadvise) ( IDataAdviseHolder  _far* This,  DWORD dwConnection)  ;
    HRESULT (__export  _far   _cdecl  * EnumAdvise) ( IDataAdviseHolder  _far* This,  LPENUMSTATDATA  _far* ppenumAdvise)  ;

    HRESULT (__export  _far   _cdecl  * SendOnDataChange) ( IDataAdviseHolder  _far* This,  LPDATAOBJECT pDataObject, DWORD dwReserved, DWORD advf)  ;
};
typedef      IDataAdviseHolder  _far* LPDATAADVISEHOLDER;







#line 385
typedef  struct IOleCache { struct IOleCacheVtbl  _far* lpVtbl; } IOleCache; typedef struct IOleCacheVtbl IOleCacheVtbl; struct  IOleCacheVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleCache  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleCache  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleCache  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Cache)  ( IOleCache  _far* This,  LPFORMATETC lpFormatetc, DWORD advf, LPDWORD lpdwConnection)  ;
    HRESULT (__export  _far   _cdecl  * Uncache)  ( IOleCache  _far* This,  DWORD dwConnection)  ;
    HRESULT (__export  _far   _cdecl  * EnumCache)  ( IOleCache  _far* This,  LPENUMSTATDATA  _far* ppenumStatData)  ;
    HRESULT (__export  _far   _cdecl  * InitCache)  ( IOleCache  _far* This,  LPDATAOBJECT pDataObject)  ;
    HRESULT (__export  _far   _cdecl  * SetData)  ( IOleCache  _far* This,  LPFORMATETC pformatetc, STGMEDIUM  _far * pmedium,
                            BOOL fRelease)  ;
};
typedef         IOleCache  _far* LPOLECACHE;









#line 419
typedef enum tagDISCARDCACHE
{
	DISCARDCACHE_SAVEIFDIRTY =	0,
	DISCARDCACHE_NOSAVE		 =	1

} DISCARDCACHE;



#line 430
typedef  struct IOleCache2 { struct IOleCache2Vtbl  _far* lpVtbl; } IOleCache2; typedef struct IOleCache2Vtbl IOleCache2Vtbl; struct  IOleCache2Vtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleCache2  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleCache2  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleCache2  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Cache)  ( IOleCache2  _far* This,  LPFORMATETC lpFormatetc, DWORD advf, LPDWORD lpdwConnection)  ;
    HRESULT (__export  _far   _cdecl  * Uncache)  ( IOleCache2  _far* This,  DWORD dwConnection)  ;
    HRESULT (__export  _far   _cdecl  * EnumCache)  ( IOleCache2  _far* This,  LPENUMSTATDATA  _far* ppenumStatData)  ;
    HRESULT (__export  _far   _cdecl  * InitCache)  ( IOleCache2  _far* This,  LPDATAOBJECT pDataObject)  ;
    HRESULT (__export  _far   _cdecl  * SetData)  ( IOleCache2  _far* This,  LPFORMATETC pformatetc, STGMEDIUM  _far * pmedium,
                            BOOL fRelease)  ;


    HRESULT (__export  _far   _cdecl  * UpdateCache)  ( IOleCache2  _far* This,  LPDATAOBJECT pDataObject, DWORD grfUpdf,
							LPVOID pReserved)  ;
    HRESULT (__export  _far   _cdecl  * DiscardCache)  ( IOleCache2  _far* This,  DWORD dwDiscardOptions)  ;

};
typedef      IOleCache2  _far* LPOLECACHE2;



#line 457
typedef  struct IOleCacheControl { struct IOleCacheControlVtbl  _far* lpVtbl; } IOleCacheControl; typedef struct IOleCacheControlVtbl IOleCacheControlVtbl; struct  IOleCacheControlVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleCacheControl  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleCacheControl  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleCacheControl  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * OnRun)  ( IOleCacheControl  _far* This,  LPDATAOBJECT pDataObject)  ;
    HRESULT (__export  _far   _cdecl  * OnStop)  ( IOleCacheControl  _far*  This)  ;
};
typedef      IOleCacheControl  _far* LPOLECACHECONTROL;






 extern HRESULT  __export  _far   _pascal   CreateDataAdviseHolder(LPDATAADVISEHOLDER  _far* ppDAHolder);

 extern HRESULT  __export  _far   _pascal   CreateDataCache(LPUNKNOWN pUnkOuter, const CLSID  _far*  const rclsid,
					const IID  _far*  const iid, LPVOID  _far* ppv);





#line 17 "C:\SC\BIN\..\INCLUDE\dvobj.h"
#pragma pack()





#line 3 "C:\SC\BIN\..\INCLUDE\storage.h"
#pragma pack(__DEFALIGN)


#line 11
 #pragma once







#line 3 "C:\SC\BIN\..\INCLUDE\compobj.h"
#pragma pack(__DEFALIGN)


#line 11
 #pragma once







#line 17 "C:\SC\BIN\..\INCLUDE\compobj.h"
#pragma pack()






































#line 110 "C:\SC\BIN\..\INCLUDE\win16\storage.h"









#line 129
typedef char TCHAR;









#line 163
typedef enum tagSTGC
{
    STGC_DEFAULT = 0,
    STGC_OVERWRITE  = 1,
    STGC_ONLYIFCURRENT  = 2,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4
} STGC;


typedef char  _far *  _far *SNB;







#line 189
typedef struct   tagSTATSTG
{
    char  _far* pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
} STATSTG;



typedef enum tagSTGTY
{
    STGTY_STORAGE   = 1,
    STGTY_STREAM    = 2,
    STGTY_LOCKBYTES = 3,
    STGTY_PROPERTY  = 4
} STGTY;

typedef enum tagSTREAM_SEEK
{
    STREAM_SEEK_SET = 0,
    STREAM_SEEK_CUR = 1,
    STREAM_SEEK_END = 2
} STREAM_SEEK;

typedef enum tagLOCKTYPE
{
    LOCK_WRITE      = 1,
    LOCK_EXCLUSIVE  = 2,
    LOCK_ONLYONCE   = 4
} LOCKTYPE;

typedef enum tagSTGMOVE
{
    STGMOVE_MOVE    = 0,
    STGMOVE_COPY    = 1
} STGMOVE;

typedef enum tagSTATFLAG
{
    STATFLAG_DEFAULT = 0,
    STATFLAG_NONAME = 1
} STATFLAG;





#line 246
typedef  struct IEnumSTATSTG { struct IEnumSTATSTGVtbl  _far* lpVtbl; } IEnumSTATSTG; typedef struct IEnumSTATSTGVtbl IEnumSTATSTGVtbl; struct  IEnumSTATSTGVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IEnumSTATSTG  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IEnumSTATSTG  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IEnumSTATSTG  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Next)  ( IEnumSTATSTG  _far* This,  ULONG celt, STATSTG  _far * rgelt, ULONG  _far *pceltFetched)  ;
    HRESULT (__export  _far   _cdecl  * Skip)  ( IEnumSTATSTG  _far* This,  ULONG celt)  ;
    HRESULT (__export  _far   _cdecl  * Reset)  ( IEnumSTATSTG  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Clone)  ( IEnumSTATSTG  _far* This,  IEnumSTATSTG  _far * _far *ppenm)  ;
};

typedef IEnumSTATSTG  _far* LPENUMSTATSTG;






#line 269
typedef  struct ILockBytes { struct ILockBytesVtbl  _far* lpVtbl; } ILockBytes; typedef struct ILockBytesVtbl ILockBytesVtbl; struct  ILockBytesVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( ILockBytes  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( ILockBytes  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( ILockBytes  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * ReadAt)  ( ILockBytes  _far* This,  ULARGE_INTEGER ulOffset,
              void  __huge *pv,
             ULONG cb,
             ULONG  _far *pcbRead)  ;
    HRESULT (__export  _far   _cdecl  * WriteAt)  ( ILockBytes  _far* This,  ULARGE_INTEGER ulOffset,
               void const  __huge *pv,
              ULONG cb,
              ULONG  _far *pcbWritten)  ;
    HRESULT (__export  _far   _cdecl  * Flush)  ( ILockBytes  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * SetSize)  ( ILockBytes  _far* This,  ULARGE_INTEGER cb)  ;
    HRESULT (__export  _far   _cdecl  * LockRegion)  ( ILockBytes  _far* This,  ULARGE_INTEGER libOffset,
                 ULARGE_INTEGER cb,
                 DWORD dwLockType)  ;
    HRESULT (__export  _far   _cdecl  * UnlockRegion)  ( ILockBytes  _far* This,  ULARGE_INTEGER libOffset,
                   ULARGE_INTEGER cb,
                 DWORD dwLockType)  ;
    HRESULT (__export  _far   _cdecl  * Stat)  ( ILockBytes  _far* This,  STATSTG  _far *pstatstg, DWORD grfStatFlag)  ;
};

typedef ILockBytes  _far* LPLOCKBYTES;







#line 306
typedef  struct IStream { struct IStreamVtbl  _far* lpVtbl; } IStream; typedef struct IStreamVtbl IStreamVtbl; struct  IStreamVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IStream  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IStream  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IStream  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Read)  ( IStream  _far* This,   void  __huge *pv,
		     ULONG cb, ULONG  _far *pcbRead)  ;
    HRESULT (__export  _far   _cdecl  * Write)  ( IStream  _far* This,   void const  __huge *pv,
            ULONG cb,
            ULONG  _far *pcbWritten)  ;
    HRESULT (__export  _far   _cdecl  * Seek)  ( IStream  _far* This,  LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
               ULARGE_INTEGER  _far *plibNewPosition)  ;
    HRESULT (__export  _far   _cdecl  * SetSize)  ( IStream  _far* This,  ULARGE_INTEGER libNewSize)  ;
    HRESULT (__export  _far   _cdecl  * CopyTo)  ( IStream  _far* This,  IStream  _far *pstm,
             ULARGE_INTEGER cb,
             ULARGE_INTEGER  _far *pcbRead,
             ULARGE_INTEGER  _far *pcbWritten)  ;
    HRESULT (__export  _far   _cdecl  * Commit)  ( IStream  _far* This,  DWORD grfCommitFlags)  ;
    HRESULT (__export  _far   _cdecl  * Revert)  ( IStream  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * LockRegion)  ( IStream  _far* This,  ULARGE_INTEGER libOffset,
                 ULARGE_INTEGER cb,
                 DWORD dwLockType)  ;
    HRESULT (__export  _far   _cdecl  * UnlockRegion)  ( IStream  _far* This,  ULARGE_INTEGER libOffset,
                 ULARGE_INTEGER cb,
                 DWORD dwLockType)  ;
    HRESULT (__export  _far   _cdecl  * Stat)  ( IStream  _far* This,  STATSTG  _far *pstatstg, DWORD grfStatFlag)  ;
    HRESULT (__export  _far   _cdecl  * Clone) ( IStream  _far* This,  IStream  _far *  _far *ppstm)  ;
};

typedef IStream  _far* LPSTREAM;






#line 348
typedef  struct IStorage { struct IStorageVtbl  _far* lpVtbl; } IStorage; typedef struct IStorageVtbl IStorageVtbl; struct  IStorageVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IStorage  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IStorage  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IStorage  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * CreateStream)  ( IStorage  _far* This,  const char  _far* pwcsName,
                   DWORD grfMode,
                   DWORD reserved1,
                   DWORD reserved2,
                   IStream  _far * _far *ppstm)  ;
    HRESULT (__export  _far   _cdecl  * OpenStream)  ( IStorage  _far* This,  const char  _far* pwcsName,
		 void  _far *reserved1,
                 DWORD grfMode,
                 DWORD reserved2,
                 IStream  _far * _far *ppstm)  ;
    HRESULT (__export  _far   _cdecl  * CreateStorage)  ( IStorage  _far* This,  const char  _far* pwcsName,
                DWORD grfMode,
                DWORD reserved1,
                DWORD reserved2,
                IStorage  _far * _far *ppstg)  ;
    HRESULT (__export  _far   _cdecl  * OpenStorage)  ( IStorage  _far* This,  const char  _far* pwcsName,
                  IStorage  _far *pstgPriority,
                  DWORD grfMode,
                  SNB snbExclude,
                  DWORD reserved,
                  IStorage  _far * _far *ppstg)  ;
    HRESULT (__export  _far   _cdecl  * CopyTo)  ( IStorage  _far* This,  DWORD ciidExclude,
 		       IID const  _far *rgiidExclude,
 		       SNB snbExclude,
 		       IStorage  _far *pstgDest)  ;
    HRESULT (__export  _far   _cdecl  * MoveElementTo)  ( IStorage  _far* This,  char const  _far* lpszName,
    			      IStorage  _far *pstgDest,
                              char const  _far* lpszNewName,
                              DWORD grfFlags)  ;
    HRESULT (__export  _far   _cdecl  * Commit)  ( IStorage  _far* This,  DWORD grfCommitFlags)  ;
    HRESULT (__export  _far   _cdecl  * Revert)  ( IStorage  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * EnumElements)  ( IStorage  _far* This,  DWORD reserved1,
                 void  _far *reserved2,
                 DWORD reserved3,
                 IEnumSTATSTG  _far * _far *ppenm)  ;
    HRESULT (__export  _far   _cdecl  * DestroyElement)  ( IStorage  _far* This,  const char  _far* pwcsName)  ;
    HRESULT (__export  _far   _cdecl  * RenameElement)  ( IStorage  _far* This,  const char  _far* pwcsOldName,
                const char  _far* pwcsNewName)  ;
    HRESULT (__export  _far   _cdecl  * SetElementTimes)  ( IStorage  _far* This,  const char  _far *lpszName,
    			        FILETIME const  _far *pctime,
                                FILETIME const  _far *patime,
                                FILETIME const  _far *pmtime)  ;
    HRESULT (__export  _far   _cdecl  * SetClass)  ( IStorage  _far* This,  const CLSID  _far*  const clsid)  ;
    HRESULT (__export  _far   _cdecl  * SetStateBits)  ( IStorage  _far* This,  DWORD grfStateBits, DWORD grfMask)  ;
    HRESULT (__export  _far   _cdecl  * Stat)  ( IStorage  _far* This,  STATSTG  _far *pstatstg, DWORD grfStatFlag)  ;
};

typedef IStorage  _far* LPSTORAGE;






#line 412
typedef  struct IRootStorage { struct IRootStorageVtbl  _far* lpVtbl; } IRootStorage; typedef struct IRootStorageVtbl IRootStorageVtbl; struct  IRootStorageVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IRootStorage  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IRootStorage  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IRootStorage  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * SwitchToFile)  ( IRootStorage  _far* This,  LPSTR lpstrFile)  ;
};

typedef IRootStorage  _far* LPROOTSTORAGE;





 extern HRESULT  __export  _far   _pascal   StgCreateDocfile(const char  _far* pwcsName,
            DWORD grfMode,
            DWORD reserved,
            IStorage  _far *  _far *ppstgOpen);
 extern HRESULT  __export  _far   _pascal   StgCreateDocfileOnILockBytes(ILockBytes  _far *plkbyt,
                    DWORD grfMode,
                    DWORD reserved,
                    IStorage  _far *  _far *ppstgOpen);
 extern HRESULT  __export  _far   _pascal   StgOpenStorage(const char  _far* pwcsName,
              IStorage  _far *pstgPriority,
              DWORD grfMode,
              SNB snbExclude,
              DWORD reserved,
              IStorage  _far *  _far *ppstgOpen);
 extern HRESULT  __export  _far   _pascal   StgOpenStorageOnILockBytes(ILockBytes  _far *plkbyt,
                  IStorage  _far *pstgPriority,
                  DWORD grfMode,
                  SNB snbExclude,
                  DWORD reserved,
                  IStorage  _far *  _far *ppstgOpen);
 extern HRESULT  __export  _far   _pascal   StgIsStorageFile(const char  _far* pwcsName);
 extern HRESULT  __export  _far   _pascal   StgIsStorageILockBytes(ILockBytes  _far* plkbyt);

 extern HRESULT  __export  _far   _pascal   StgSetTimes(char const  _far* lpszName,
		  FILETIME const  _far* pctime,
                  FILETIME const  _far* patime,
                  FILETIME const  _far* pmtime);





#line 17 "C:\SC\BIN\..\INCLUDE\storage.h"
#pragma pack()













































#line 500 "C:\SC\BIN\..\INCLUDE\win16\ole2.h"
typedef  struct IDropTarget { struct IDropTargetVtbl  _far* lpVtbl; } IDropTarget; typedef struct IDropTargetVtbl IDropTargetVtbl; struct  IDropTargetVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IDropTarget  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IDropTarget  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IDropTarget  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * DragEnter)  ( IDropTarget  _far* This,  LPDATAOBJECT pDataObj, DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect)  ;
    HRESULT (__export  _far   _cdecl  * DragOver)  ( IDropTarget  _far* This,  DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect)  ;
    HRESULT (__export  _far   _cdecl  * DragLeave)  ( IDropTarget  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Drop)  ( IDropTarget  _far* This,  LPDATAOBJECT pDataObj, DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect)  ;
};
typedef         IDropTarget  _far* LPDROPTARGET;




#line 520
typedef  struct IDropSource { struct IDropSourceVtbl  _far* lpVtbl; } IDropSource; typedef struct IDropSourceVtbl IDropSourceVtbl; struct  IDropSourceVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IDropSource  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IDropSource  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IDropSource  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * QueryContinueDrag)  ( IDropSource  _far* This,  BOOL fEscapePressed, DWORD grfKeyState)  ;
    HRESULT (__export  _far   _cdecl  * GiveFeedback)  ( IDropSource  _far* This,  DWORD dwEffect)  ;
};
typedef         IDropSource  _far* LPDROPSOURCE;







#line 541
typedef  struct IPersist { struct IPersistVtbl  _far* lpVtbl; } IPersist; typedef struct IPersistVtbl IPersistVtbl; struct  IPersistVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IPersist  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IPersist  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IPersist  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetClassID)  ( IPersist  _far* This,  LPCLSID lpClassID)  ;
};
typedef            IPersist  _far* LPPERSIST;




#line 558
typedef  struct IPersistStorage { struct IPersistStorageVtbl  _far* lpVtbl; } IPersistStorage; typedef struct IPersistStorageVtbl IPersistStorageVtbl; struct  IPersistStorageVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IPersistStorage  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IPersistStorage  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IPersistStorage  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetClassID)  ( IPersistStorage  _far* This,  LPCLSID lpClassID)  ;


    HRESULT (__export  _far   _cdecl  * IsDirty)  ( IPersistStorage  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * InitNew)  ( IPersistStorage  _far* This,  LPSTORAGE pStg)  ;
    HRESULT (__export  _far   _cdecl  * Load)  ( IPersistStorage  _far* This,  LPSTORAGE pStg)  ;
    HRESULT (__export  _far   _cdecl  * Save)  ( IPersistStorage  _far* This,  LPSTORAGE pStgSave, BOOL fSameAsLoad)  ;
    HRESULT (__export  _far   _cdecl  * SaveCompleted)  ( IPersistStorage  _far* This,  LPSTORAGE pStgNew)  ;
    HRESULT (__export  _far   _cdecl  * HandsOffStorage)  ( IPersistStorage  _far*  This)  ;
};
typedef         IPersistStorage  _far* LPPERSISTSTORAGE;




#line 583
typedef  struct IPersistStream { struct IPersistStreamVtbl  _far* lpVtbl; } IPersistStream; typedef struct IPersistStreamVtbl IPersistStreamVtbl; struct  IPersistStreamVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IPersistStream  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IPersistStream  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IPersistStream  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetClassID)  ( IPersistStream  _far* This,  LPCLSID lpClassID)  ;


    HRESULT (__export  _far   _cdecl  * IsDirty)  ( IPersistStream  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Load)  ( IPersistStream  _far* This,  LPSTREAM pStm)  ;
    HRESULT (__export  _far   _cdecl  * Save)  ( IPersistStream  _far* This,  LPSTREAM pStm,
                    BOOL fClearDirty)  ;
    HRESULT (__export  _far   _cdecl  * GetSizeMax)  ( IPersistStream  _far* This,  ULARGE_INTEGER  _far* pcbSize)  ;
};
typedef          IPersistStream  _far* LPPERSISTSTREAM;




#line 607
typedef  struct IPersistFile { struct IPersistFileVtbl  _far* lpVtbl; } IPersistFile; typedef struct IPersistFileVtbl IPersistFileVtbl; struct  IPersistFileVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IPersistFile  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IPersistFile  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IPersistFile  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetClassID)  ( IPersistFile  _far* This,  LPCLSID lpClassID)  ;


    HRESULT (__export  _far   _cdecl  * IsDirty)  ( IPersistFile  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Load)  ( IPersistFile  _far* This,  LPCSTR lpszFileName, DWORD grfMode)  ;
    HRESULT (__export  _far   _cdecl  * Save)  ( IPersistFile  _far* This,  LPCSTR lpszFileName, BOOL fRemember)  ;
    HRESULT (__export  _far   _cdecl  * SaveCompleted)  ( IPersistFile  _far* This,  LPCSTR lpszFileName)  ;
    HRESULT (__export  _far   _cdecl  * GetCurFile)  ( IPersistFile  _far* This,  LPSTR  _far* lplpszFileName)  ;
};
typedef            IPersistFile  _far* LPPERSISTFILE;





#line 3 "C:\SC\BIN\..\INCLUDE\moniker.h"
#pragma pack(__DEFALIGN)


#line 11
 #pragma once





#line 25 "C:\SC\BIN\..\INCLUDE\win16\moniker.h"










#line 45
typedef struct   tagBIND_OPTS
{
    DWORD       cbStruct;
    DWORD       grfFlags;
    DWORD       grfMode;
    DWORD       dwTickCountDeadline;
} BIND_OPTS,  _far* LPBIND_OPTS;



typedef enum
{
    BIND_MAYBOTHERUSER = 1,
    BIND_JUSTTESTEXISTENCE = 2
} BIND_FLAGS;



typedef enum tagMKSYS
{
    MKSYS_NONE = 0,
    MKSYS_GENERICCOMPOSITE = 1,
    MKSYS_FILEMONIKER = 2,
    MKSYS_ANTIMONIKER = 3,
    MKSYS_ITEMMONIKER = 4,
    MKSYS_POINTERMONIKER = 5
}MKSYS;



typedef enum tagMKREDUCE
{
    MKRREDUCE_ONE           =   3<<16,
    MKRREDUCE_TOUSER        =   2<<16,
    MKRREDUCE_THROUGHUSER   =   1<<16,
    MKRREDUCE_ALL           =   0
} MKRREDUCE;


#line 88
typedef  struct IEnumMoniker IEnumMoniker;
typedef  struct IRunningObjectTable IRunningObjectTable;


typedef       IEnumMoniker  _far* LPENUMMONIKER;
typedef         IRunningObjectTable  _far* LPRUNNINGOBJECTTABLE;




#line 100
typedef  struct IBindCtx { struct IBindCtxVtbl  _far* lpVtbl; } IBindCtx; typedef struct IBindCtxVtbl IBindCtxVtbl; struct  IBindCtxVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IBindCtx  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IBindCtx  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IBindCtx  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * RegisterObjectBound)  ( IBindCtx  _far* This,  LPUNKNOWN punk)  ;
    HRESULT (__export  _far   _cdecl  * RevokeObjectBound)  ( IBindCtx  _far* This,  LPUNKNOWN punk)  ;
    HRESULT (__export  _far   _cdecl  * ReleaseBoundObjects)  ( IBindCtx  _far*  This)  ;

    HRESULT (__export  _far   _cdecl  * SetBindOptions)  ( IBindCtx  _far* This,  LPBIND_OPTS pbindopts)  ;
    HRESULT (__export  _far   _cdecl  * GetBindOptions)  ( IBindCtx  _far* This,  LPBIND_OPTS pbindopts)  ;
    HRESULT (__export  _far   _cdecl  * GetRunningObjectTable)  ( IBindCtx  _far* This,  LPRUNNINGOBJECTTABLE   _far*
        pprot)  ;
    HRESULT (__export  _far   _cdecl  * RegisterObjectParam)  ( IBindCtx  _far* This,  LPSTR lpszKey, LPUNKNOWN punk)  ;
    HRESULT (__export  _far   _cdecl  * GetObjectParam)  ( IBindCtx  _far* This,  LPSTR lpszKey, LPUNKNOWN  _far* ppunk)  ;
    HRESULT (__export  _far   _cdecl  * EnumObjectParam)  ( IBindCtx  _far* This,  LPENUMSTRING  _far* ppenum)  ;
    HRESULT (__export  _far   _cdecl  * RevokeObjectParam)  ( IBindCtx  _far* This,  LPSTR lpszKey)  ;
};
typedef             IBindCtx  _far* LPBC;
typedef         IBindCtx  _far* LPBINDCTX;




#line 129
typedef  struct IMoniker { struct IMonikerVtbl  _far* lpVtbl; } IMoniker; typedef struct IMonikerVtbl IMonikerVtbl; struct  IMonikerVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IMoniker  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IMoniker  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IMoniker  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetClassID)  ( IMoniker  _far* This,  LPCLSID lpClassID)  ;


    HRESULT (__export  _far   _cdecl  * IsDirty)  ( IMoniker  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Load)  ( IMoniker  _far* This,  LPSTREAM pStm)  ;
    HRESULT (__export  _far   _cdecl  * Save)  ( IMoniker  _far* This,  LPSTREAM pStm,
                    BOOL fClearDirty)  ;
    HRESULT (__export  _far   _cdecl  * GetSizeMax)  ( IMoniker  _far* This,  ULARGE_INTEGER  _far * pcbSize)  ;


    HRESULT (__export  _far   _cdecl  * BindToObject)  ( IMoniker  _far* This,  LPBC pbc, LPMONIKER pmkToLeft,
        const IID  _far*  const riidResult, LPVOID  _far* ppvResult)  ;
    HRESULT (__export  _far   _cdecl  * BindToStorage)  ( IMoniker  _far* This,  LPBC pbc, LPMONIKER pmkToLeft,
        const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    HRESULT (__export  _far   _cdecl  * Reduce)  ( IMoniker  _far* This,  LPBC pbc, DWORD dwReduceHowFar, LPMONIKER  _far*
        ppmkToLeft, LPMONIKER  _far * ppmkReduced)  ;
    HRESULT (__export  _far   _cdecl  * ComposeWith)  ( IMoniker  _far* This,  LPMONIKER pmkRight, BOOL fOnlyIfNotGeneric,
        LPMONIKER  _far* ppmkComposite)  ;
    HRESULT (__export  _far   _cdecl  * Enum)  ( IMoniker  _far* This,  BOOL fForward, LPENUMMONIKER  _far* ppenumMoniker)
         ;
    HRESULT (__export  _far   _cdecl  * IsEqual)  ( IMoniker  _far* This,  LPMONIKER pmkOtherMoniker)  ;
    HRESULT (__export  _far   _cdecl  * Hash)  ( IMoniker  _far* This,  LPDWORD pdwHash)  ;
    HRESULT (__export  _far   _cdecl  * IsRunning)  ( IMoniker  _far* This,  LPBC pbc, LPMONIKER pmkToLeft, LPMONIKER
        pmkNewlyRunning)  ;
    HRESULT (__export  _far   _cdecl  * GetTimeOfLastChange)  ( IMoniker  _far* This,  LPBC pbc, LPMONIKER pmkToLeft,
        FILETIME  _far* pfiletime)  ;
    HRESULT (__export  _far   _cdecl  * Inverse)  ( IMoniker  _far* This,  LPMONIKER  _far* ppmk)  ;
    HRESULT (__export  _far   _cdecl  * CommonPrefixWith)  ( IMoniker  _far* This,  LPMONIKER pmkOther, LPMONIKER  _far*
        ppmkPrefix)  ;
    HRESULT (__export  _far   _cdecl  * RelativePathTo)  ( IMoniker  _far* This,  LPMONIKER pmkOther, LPMONIKER  _far*
        ppmkRelPath)  ;
    HRESULT (__export  _far   _cdecl  * GetDisplayName)  ( IMoniker  _far* This,  LPBC pbc, LPMONIKER pmkToLeft,
        LPSTR  _far* lplpszDisplayName)  ;
    HRESULT (__export  _far   _cdecl  * ParseDisplayName)  ( IMoniker  _far* This,  LPBC pbc, LPMONIKER pmkToLeft,
        LPSTR lpszDisplayName, ULONG  _far* pchEaten,
        LPMONIKER  _far* ppmkOut)  ;
    HRESULT (__export  _far   _cdecl  * IsSystemMoniker)  ( IMoniker  _far* This,  LPDWORD pdwMksys)  ;
};
typedef         IMoniker  _far* LPMONIKER;





#line 184
typedef  struct IRunningObjectTable { struct IRunningObjectTableVtbl  _far* lpVtbl; } IRunningObjectTable; typedef struct IRunningObjectTableVtbl IRunningObjectTableVtbl; struct  IRunningObjectTableVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IRunningObjectTable  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IRunningObjectTable  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IRunningObjectTable  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Register)  ( IRunningObjectTable  _far* This,  DWORD grfFlags, LPUNKNOWN punkObject,
        LPMONIKER pmkObjectName, DWORD  _far * pdwRegister)  ;
    HRESULT (__export  _far   _cdecl  * Revoke)  ( IRunningObjectTable  _far* This,  DWORD dwRegister)  ;
    HRESULT (__export  _far   _cdecl  * IsRunning)  ( IRunningObjectTable  _far* This,  LPMONIKER pmkObjectName)  ;
    HRESULT (__export  _far   _cdecl  * GetObject)  ( IRunningObjectTable  _far* This,  LPMONIKER pmkObjectName,
        LPUNKNOWN  _far* ppunkObject)  ;
    HRESULT (__export  _far   _cdecl  * NoteChangeTime)  ( IRunningObjectTable  _far* This,  DWORD dwRegister, FILETIME  _far * pfiletime)  ;
    HRESULT (__export  _far   _cdecl  * GetTimeOfLastChange)  ( IRunningObjectTable  _far* This,  LPMONIKER pmkObjectName, FILETIME  _far * pfiletime)  ;
    HRESULT (__export  _far   _cdecl  * EnumRunning)  ( IRunningObjectTable  _far* This,  LPENUMMONIKER  _far * ppenumMoniker )  ;
};
typedef         IRunningObjectTable  _far* LPRUNNINGOBJECTTABLE;




#line 209
typedef  struct IEnumMoniker { struct IEnumMonikerVtbl  _far* lpVtbl; } IEnumMoniker; typedef struct IEnumMonikerVtbl IEnumMonikerVtbl; struct  IEnumMonikerVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IEnumMoniker  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IEnumMoniker  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IEnumMoniker  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Next)  ( IEnumMoniker  _far* This,  ULONG celt, LPMONIKER  _far* rgelt, ULONG  _far* pceltFetched)  ;
    HRESULT (__export  _far   _cdecl  * Skip)  ( IEnumMoniker  _far* This,  ULONG celt)  ;
    HRESULT (__export  _far   _cdecl  * Reset)  ( IEnumMoniker  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Clone)  ( IEnumMoniker  _far* This,  IEnumMoniker  _far*  _far* ppenm)  ;
};
typedef       IEnumMoniker  _far* LPENUMMONIKER;




 extern HRESULT  __export  _far   _pascal    BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID  _far*  const iidResult, LPVOID  _far* ppvResult);
 extern HRESULT  __export  _far   _pascal    MkParseDisplayName(LPBC pbc, LPSTR szUserName,
                ULONG  _far * pchEaten, LPMONIKER  _far * ppmk);
 extern HRESULT  __export  _far   _pascal    MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER
                 _far* ppmkRelPath, BOOL fCalledFromMethod);
 extern HRESULT  __export  _far   _pascal    MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther,
                LPMONIKER  _far* ppmkCommon);
 extern HRESULT  __export  _far   _pascal    CreateBindCtx(DWORD reserved, LPBC  _far* ppbc);
 extern HRESULT  __export  _far   _pascal    CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest,
    LPMONIKER  _far* ppmkComposite);
 extern HRESULT  __export  _far   _pascal    GetClassFile (LPCSTR szFilename, CLSID  _far* pclsid);

 extern HRESULT  __export  _far   _pascal    CreateFileMoniker(LPSTR lpszPathName, LPMONIKER  _far* ppmk);
 extern HRESULT  __export  _far   _pascal    CreateItemMoniker(LPSTR lpszDelim, LPSTR lpszItem,
    LPMONIKER  _far* ppmk);
 extern HRESULT  __export  _far   _pascal    CreateAntiMoniker(LPMONIKER  _far* ppmk);
 extern HRESULT  __export  _far   _pascal    CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER  _far* ppmk);

 extern HRESULT  __export  _far   _pascal    GetRunningObjectTable( DWORD reserved, LPRUNNINGOBJECTTABLE  _far* pprot);






#line 17 "C:\SC\BIN\..\INCLUDE\moniker.h"
#pragma pack()





#line 633 "C:\SC\BIN\..\INCLUDE\win16\ole2.h"



#line 638
typedef  struct IEnumOLEVERB { struct IEnumOLEVERBVtbl  _far* lpVtbl; } IEnumOLEVERB; typedef struct IEnumOLEVERBVtbl IEnumOLEVERBVtbl; struct  IEnumOLEVERBVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IEnumOLEVERB  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IEnumOLEVERB  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IEnumOLEVERB  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Next)  ( IEnumOLEVERB  _far* This,  ULONG celt, LPOLEVERB rgelt, ULONG  _far* pceltFetched)  ;
    HRESULT (__export  _far   _cdecl  * Skip)  ( IEnumOLEVERB  _far* This,  ULONG celt)  ;
    HRESULT (__export  _far   _cdecl  * Reset)  ( IEnumOLEVERB  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Clone)  ( IEnumOLEVERB  _far* This,  IEnumOLEVERB  _far*  _far* ppenm)  ;
};
typedef         IEnumOLEVERB  _far* LPENUMOLEVERB;














#line 673
typedef  struct IOleObject { struct IOleObjectVtbl  _far* lpVtbl; } IOleObject; typedef struct IOleObjectVtbl IOleObjectVtbl; struct  IOleObjectVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleObject  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleObject  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleObject  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * SetClientSite)  ( IOleObject  _far* This,  LPOLECLIENTSITE pClientSite)  ;
    HRESULT (__export  _far   _cdecl  * GetClientSite)  ( IOleObject  _far* This,  LPOLECLIENTSITE  _far* ppClientSite)  ;
    HRESULT (__export  _far   _cdecl  * SetHostNames)  ( IOleObject  _far* This,  LPCSTR szContainerApp, LPCSTR szContainerObj)  ;
    HRESULT (__export  _far   _cdecl  * Close)  ( IOleObject  _far* This,  DWORD dwSaveOption)  ;
    HRESULT (__export  _far   _cdecl  * SetMoniker)  ( IOleObject  _far* This,  DWORD dwWhichMoniker, LPMONIKER pmk)  ;
    HRESULT (__export  _far   _cdecl  * GetMoniker)  ( IOleObject  _far* This,  DWORD dwAssign, DWORD dwWhichMoniker,
                LPMONIKER  _far* ppmk)  ;
    HRESULT (__export  _far   _cdecl  * InitFromData)  ( IOleObject  _far* This,  LPDATAOBJECT pDataObject,
                BOOL fCreation,
                DWORD dwReserved)  ;
    HRESULT (__export  _far   _cdecl  * GetClipboardData)  ( IOleObject  _far* This,  DWORD dwReserved,
                LPDATAOBJECT  _far* ppDataObject)  ;
    HRESULT (__export  _far   _cdecl  * DoVerb)  ( IOleObject  _far* This,  LONG iVerb,
                LPMSG lpmsg,
                LPOLECLIENTSITE pActiveSite,
                LONG lindex,
                HWND hwndParent,
                LPCRECT lprcPosRect)  ;
    HRESULT (__export  _far   _cdecl  * EnumVerbs)  ( IOleObject  _far* This,  LPENUMOLEVERB  _far* ppenumOleVerb)  ;
    HRESULT (__export  _far   _cdecl  * Update)  ( IOleObject  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * IsUpToDate)  ( IOleObject  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * GetUserClassID)  ( IOleObject  _far* This,  CLSID  _far* pClsid)  ;
    HRESULT (__export  _far   _cdecl  * GetUserType)  ( IOleObject  _far* This,  DWORD dwFormOfType, LPSTR  _far* pszUserType)  ;
    HRESULT (__export  _far   _cdecl  * SetExtent)  ( IOleObject  _far* This,  DWORD dwDrawAspect, LPSIZEL lpsizel)  ;
    HRESULT (__export  _far   _cdecl  * GetExtent)  ( IOleObject  _far* This,  DWORD dwDrawAspect, LPSIZEL lpsizel)  ;

    HRESULT (__export  _far   _cdecl  * Advise) ( IOleObject  _far* This,  LPADVISESINK pAdvSink, DWORD  _far* pdwConnection)  ;
    HRESULT (__export  _far   _cdecl  * Unadvise) ( IOleObject  _far* This,  DWORD dwConnection)  ;
    HRESULT (__export  _far   _cdecl  * EnumAdvise)  ( IOleObject  _far* This,  LPENUMSTATDATA  _far* ppenumAdvise)  ;
    HRESULT (__export  _far   _cdecl  * GetMiscStatus)  ( IOleObject  _far* This,  DWORD dwAspect, DWORD  _far* pdwStatus)  ;
    HRESULT (__export  _far   _cdecl  * SetColorScheme)  ( IOleObject  _far* This,  LPLOGPALETTE lpLogpal)  ;
};
typedef      IOleObject  _far* LPOLEOBJECT;




#line 720
typedef  struct IOleClientSite { struct IOleClientSiteVtbl  _far* lpVtbl; } IOleClientSite; typedef struct IOleClientSiteVtbl IOleClientSiteVtbl; struct  IOleClientSiteVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleClientSite  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleClientSite  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleClientSite  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * SaveObject)  ( IOleClientSite  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * GetMoniker)  ( IOleClientSite  _far* This,  DWORD dwAssign, DWORD dwWhichMoniker,
                LPMONIKER  _far* ppmk)  ;
    HRESULT (__export  _far   _cdecl  * GetContainer)  ( IOleClientSite  _far* This,  LPOLECONTAINER  _far* ppContainer)  ;
    HRESULT (__export  _far   _cdecl  * ShowObject)  ( IOleClientSite  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * OnShowWindow)  ( IOleClientSite  _far* This,  BOOL fShow)  ;
    HRESULT (__export  _far   _cdecl  * RequestNewObjectLayout)  ( IOleClientSite  _far*  This)  ;
};
typedef      IOleClientSite  _far* LPOLECLIENTSITE;





#line 744
typedef  struct IRunnableObject { struct IRunnableObjectVtbl  _far* lpVtbl; } IRunnableObject; typedef struct IRunnableObjectVtbl IRunnableObjectVtbl; struct  IRunnableObjectVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IRunnableObject  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IRunnableObject  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IRunnableObject  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetRunningClass)  ( IRunnableObject  _far* This,  LPCLSID lpClsid)  ;
    HRESULT (__export  _far   _cdecl  * Run)  ( IRunnableObject  _far* This,  LPBINDCTX pbc)  ;
    BOOL (__export  _far   _cdecl  * IsRunning)  ( IRunnableObject  _far*  This)  ;
	HRESULT (__export  _far   _cdecl  * LockRunning) ( IRunnableObject  _far* This,  BOOL fLock, BOOL fLastUnlockCloses)  ;
	HRESULT (__export  _far   _cdecl  * SetContainedObject) ( IRunnableObject  _far* This,  BOOL fContained)  ;
};
typedef      IRunnableObject  _far* LPRUNNABLEOBJECT;






#line 767
typedef  struct IParseDisplayName { struct IParseDisplayNameVtbl  _far* lpVtbl; } IParseDisplayName; typedef struct IParseDisplayNameVtbl IParseDisplayNameVtbl; struct  IParseDisplayNameVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IParseDisplayName  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IParseDisplayName  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IParseDisplayName  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * ParseDisplayName)  ( IParseDisplayName  _far* This,  LPBC pbc, LPSTR lpszDisplayName,
        ULONG  _far* pchEaten, LPMONIKER  _far* ppmkOut)  ;
};
typedef       IParseDisplayName  _far* LPPARSEDISPLAYNAME;



#line 784
typedef  struct IOleContainer { struct IOleContainerVtbl  _far* lpVtbl; } IOleContainer; typedef struct IOleContainerVtbl IOleContainerVtbl; struct  IOleContainerVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleContainer  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleContainer  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleContainer  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * ParseDisplayName)  ( IOleContainer  _far* This,  LPBC pbc, LPSTR lpszDisplayName,
        ULONG  _far* pchEaten, LPMONIKER  _far* ppmkOut)  ;


    HRESULT (__export  _far   _cdecl  * EnumObjects)  ( DWORD grfFlags, LPENUMUNKNOWN  _far* ppenumUnknown)  ;
    HRESULT (__export  _far   _cdecl  * LockContainer)  ( IOleContainer  _far* This,  BOOL fLock)  ;
};
typedef IOleContainer  _far* LPOLECONTAINER;


typedef enum tagBINDSPEED
{
    BINDSPEED_INDEFINITE    = 1,
    BINDSPEED_MODERATE      = 2,
    BINDSPEED_IMMEDIATE     = 3
} BINDSPEED;

typedef enum tagOLECONTF
{
    OLECONTF_EMBEDDINGS     =  1,
    OLECONTF_LINKS          =  2,
    OLECONTF_OTHERS         =  4,
    OLECONTF_ONLYUSER       =  8,
    OLECONTF_ONLYIFRUNNING  = 16
} OLECONTF;



#line 822
typedef  struct IOleItemContainer { struct IOleItemContainerVtbl  _far* lpVtbl; } IOleItemContainer; typedef struct IOleItemContainerVtbl IOleItemContainerVtbl; struct  IOleItemContainerVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleItemContainer  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleItemContainer  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleItemContainer  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * ParseDisplayName)  ( IOleItemContainer  _far* This,  LPBC pbc, LPSTR lpszDisplayName,
        ULONG  _far* pchEaten, LPMONIKER  _far* ppmkOut)  ;


    HRESULT (__export  _far   _cdecl  * EnumObjects)  ( IOleItemContainer  _far* This,  DWORD grfFlags, LPENUMUNKNOWN  _far* ppenumUnknown)  ;
    HRESULT (__export  _far   _cdecl  * LockContainer)  ( IOleItemContainer  _far* This,  BOOL fLock)  ;


    HRESULT (__export  _far   _cdecl  * GetObject)  ( IOleItemContainer  _far* This,  LPSTR lpszItem, DWORD dwSpeedNeeded,
        LPBINDCTX pbc, const IID  _far*  const riid, LPVOID  _far* ppvObject)  ;
    HRESULT (__export  _far   _cdecl  * GetObjectStorage)  ( IOleItemContainer  _far* This,  LPSTR lpszItem, LPBINDCTX pbc,
        const IID  _far*  const riid, LPVOID  _far* ppvStorage)  ;
    HRESULT (__export  _far   _cdecl  * IsRunning)  ( IOleItemContainer  _far* This,  LPSTR lpszItem)  ;
};
typedef       IOleItemContainer  _far* LPOLEITEMCONTAINER;






#line 853
typedef  struct IOleAdviseHolder { struct IOleAdviseHolderVtbl  _far* lpVtbl; } IOleAdviseHolder; typedef struct IOleAdviseHolderVtbl IOleAdviseHolderVtbl; struct  IOleAdviseHolderVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleAdviseHolder  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppv)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleAdviseHolder  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleAdviseHolder  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * Advise) ( IOleAdviseHolder  _far* This,  LPADVISESINK pAdvise, DWORD  _far* pdwConnection)  ;
    HRESULT (__export  _far   _cdecl  * Unadvise) ( IOleAdviseHolder  _far* This,  DWORD dwConnection)  ;
    HRESULT (__export  _far   _cdecl  * EnumAdvise) ( IOleAdviseHolder  _far* This,  LPENUMSTATDATA  _far* ppenumAdvise)  ;

    HRESULT (__export  _far   _cdecl  * SendOnRename) ( IOleAdviseHolder  _far* This,  LPMONIKER pmk)  ;
    HRESULT (__export  _far   _cdecl  * SendOnSave) ( IOleAdviseHolder  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * SendOnClose) ( IOleAdviseHolder  _far*  This)  ;
};
typedef      IOleAdviseHolder  _far* LPOLEADVISEHOLDER;





typedef enum tagOLEUPDATE
{
    OLEUPDATE_ALWAYS=1,
    OLEUPDATE_ONCALL=3
} OLEUPDATE;
typedef  OLEUPDATE  _far* LPOLEUPDATE;



typedef enum tagOLELINKBIND
{
    OLELINKBIND_EVENIFCLASSDIFF = 1,
} OLELINKBIND;



#line 893
typedef  struct IOleLink { struct IOleLinkVtbl  _far* lpVtbl; } IOleLink; typedef struct IOleLinkVtbl IOleLinkVtbl; struct  IOleLinkVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleLink  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleLink  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleLink  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * SetUpdateOptions)  ( IOleLink  _far* This,  DWORD dwUpdateOpt)  ;
    HRESULT (__export  _far   _cdecl  * GetUpdateOptions)  ( IOleLink  _far* This,  LPDWORD pdwUpdateOpt)  ;
    HRESULT (__export  _far   _cdecl  * SetSourceMoniker)  ( IOleLink  _far* This,  LPMONIKER pmk, const CLSID  _far*  const rclsid)  ;
    HRESULT (__export  _far   _cdecl  * GetSourceMoniker)  ( IOleLink  _far* This,  LPMONIKER  _far* ppmk)  ;
    HRESULT (__export  _far   _cdecl  * SetSourceDisplayName)  ( IOleLink  _far* This,  LPCSTR lpszDisplayName)  ;
    HRESULT (__export  _far   _cdecl  * GetSourceDisplayName)  ( IOleLink  _far* This,  LPSTR  _far* lplpszDisplayName)  ;
    HRESULT (__export  _far   _cdecl  * BindToSource)  ( IOleLink  _far* This,  DWORD bindflags, LPBINDCTX pbc)  ;
    HRESULT (__export  _far   _cdecl  * BindIfRunning)  ( IOleLink  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * GetBoundSource)  ( IOleLink  _far* This,  LPUNKNOWN  _far* ppUnk)  ;
    HRESULT (__export  _far   _cdecl  * UnbindSource)  ( IOleLink  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * Update)  ( IOleLink  _far* This,  LPBINDCTX pbc)  ;
};
typedef         IOleLink  _far* LPOLELINK;




#line 923
struct HOLEMENU__ { int unused; }; typedef const struct HOLEMENU__  _near* HOLEMENU ;


typedef struct   tagOIFI
{
    UINT    cb;
    BOOL    fMDIApp;
    HWND    hwndFrame;
    HACCEL  haccel;
    int     cAccelEntries;
} OLEINPLACEFRAMEINFO,  _far* LPOLEINPLACEFRAMEINFO;


typedef struct   tagOleMenuGroupWidths
{
    LONG    width[6];
} OLEMENUGROUPWIDTHS,  _far* LPOLEMENUGROUPWIDTHS;

typedef RECT    BORDERWIDTHS;
typedef LPRECT  LPBORDERWIDTHS;
typedef LPCRECT LPCBORDERWIDTHS;












#line 963
typedef  struct IOleInPlaceUIWindow IOleInPlaceUIWindow;


typedef     IOleInPlaceUIWindow  _far* LPOLEINPLACEUIWINDOW;



#line 972
typedef  struct IOleWindow { struct IOleWindowVtbl  _far* lpVtbl; } IOleWindow; typedef struct IOleWindowVtbl IOleWindowVtbl; struct  IOleWindowVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleWindow  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleWindow  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleWindow  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetWindow)  ( IOleWindow  _far* This,  HWND  _far* lphwnd)  ;
    HRESULT (__export  _far   _cdecl  * ContextSensitiveHelp)  ( IOleWindow  _far* This,  BOOL fEnterMode)  ;
};

typedef         IOleWindow  _far* LPOLEWINDOW;




#line 991
typedef  struct IOleInPlaceObject { struct IOleInPlaceObjectVtbl  _far* lpVtbl; } IOleInPlaceObject; typedef struct IOleInPlaceObjectVtbl IOleInPlaceObjectVtbl; struct  IOleInPlaceObjectVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleInPlaceObject  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleInPlaceObject  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleInPlaceObject  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetWindow)  ( IOleInPlaceObject  _far* This,  HWND  _far* lphwnd)  ;
    HRESULT (__export  _far   _cdecl  * ContextSensitiveHelp)  ( IOleInPlaceObject  _far* This,  BOOL fEnterMode)  ;


    HRESULT (__export  _far   _cdecl  * InPlaceDeactivate)  ( IOleInPlaceObject  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * UIDeactivate)  ( IOleInPlaceObject  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * SetObjectRects)  ( IOleInPlaceObject  _far* This,  LPCRECT lprcPosRect,
                    LPCRECT lprcClipRect)  ;
    HRESULT (__export  _far   _cdecl  * ReactivateAndUndo)  ( IOleInPlaceObject  _far*  This)  ;
};
typedef         IOleInPlaceObject  _far* LPOLEINPLACEOBJECT;




#line 1016
typedef  struct IOleInPlaceActiveObject { struct IOleInPlaceActiveObjectVtbl  _far* lpVtbl; } IOleInPlaceActiveObject; typedef struct IOleInPlaceActiveObjectVtbl IOleInPlaceActiveObjectVtbl; struct  IOleInPlaceActiveObjectVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleInPlaceActiveObject  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleInPlaceActiveObject  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleInPlaceActiveObject  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetWindow)  ( IOleInPlaceActiveObject  _far* This,  HWND  _far* lphwnd)  ;
    HRESULT (__export  _far   _cdecl  * ContextSensitiveHelp)  ( IOleInPlaceActiveObject  _far* This,  BOOL fEnterMode)  ;


    HRESULT (__export  _far   _cdecl  * TranslateAccelerator)  ( IOleInPlaceActiveObject  _far* This,  LPMSG lpmsg)  ;
    HRESULT (__export  _far   _cdecl  * OnFrameWindowActivate)  ( IOleInPlaceActiveObject  _far* This,  BOOL fActivate)  ;
    HRESULT (__export  _far   _cdecl  * OnDocWindowActivate)  ( IOleInPlaceActiveObject  _far* This,  BOOL fActivate)  ;
    HRESULT (__export  _far   _cdecl  * ResizeBorder)  ( IOleInPlaceActiveObject  _far* This,  LPCRECT lprectBorder, LPOLEINPLACEUIWINDOW lpUIWindow, BOOL fFrameWindow)  ;
    HRESULT (__export  _far   _cdecl  * EnableModeless)  ( IOleInPlaceActiveObject  _far* This,  BOOL fEnable)  ;
};
typedef         IOleInPlaceActiveObject  _far* LPOLEINPLACEACTIVEOBJECT;




#line 1041
typedef  struct IOleInPlaceUIWindow { struct IOleInPlaceUIWindowVtbl  _far* lpVtbl; } IOleInPlaceUIWindow; typedef struct IOleInPlaceUIWindowVtbl IOleInPlaceUIWindowVtbl; struct  IOleInPlaceUIWindowVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleInPlaceUIWindow  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleInPlaceUIWindow  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleInPlaceUIWindow  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetWindow)  ( IOleInPlaceUIWindow  _far* This,  HWND  _far* lphwnd)  ;
    HRESULT (__export  _far   _cdecl  * ContextSensitiveHelp)  ( IOleInPlaceUIWindow  _far* This,  BOOL fEnterMode)  ;


    HRESULT (__export  _far   _cdecl  * GetBorder)  ( IOleInPlaceUIWindow  _far* This,  LPRECT lprectBorder)  ;
    HRESULT (__export  _far   _cdecl  * RequestBorderSpace)  ( IOleInPlaceUIWindow  _far* This,  LPCBORDERWIDTHS lpborderwidths)  ;
    HRESULT (__export  _far   _cdecl  * SetBorderSpace)  ( IOleInPlaceUIWindow  _far* This,  LPCBORDERWIDTHS lpborderwidths)  ;
    HRESULT (__export  _far   _cdecl  * SetActiveObject)  ( IOleInPlaceUIWindow  _far* This,  LPOLEINPLACEACTIVEOBJECT lpActiveObject,
                        LPCSTR lpszObjName)  ;
};
typedef     IOleInPlaceUIWindow  _far* LPOLEINPLACEUIWINDOW;




#line 1066
typedef  struct IOleInPlaceFrame { struct IOleInPlaceFrameVtbl  _far* lpVtbl; } IOleInPlaceFrame; typedef struct IOleInPlaceFrameVtbl IOleInPlaceFrameVtbl; struct  IOleInPlaceFrameVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleInPlaceFrame  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleInPlaceFrame  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleInPlaceFrame  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetWindow)  ( IOleInPlaceFrame  _far* This,  HWND  _far* lphwnd)  ;
    HRESULT (__export  _far   _cdecl  * ContextSensitiveHelp)  ( IOleInPlaceFrame  _far* This,  BOOL fEnterMode)  ;


    HRESULT (__export  _far   _cdecl  * GetBorder)  ( IOleInPlaceFrame  _far* This,  LPRECT lprectBorder)  ;
    HRESULT (__export  _far   _cdecl  * RequestBorderSpace)  ( IOleInPlaceFrame  _far* This,  LPCBORDERWIDTHS lpborderwidths)  ;
    HRESULT (__export  _far   _cdecl  * SetBorderSpace)  ( IOleInPlaceFrame  _far* This,  LPCBORDERWIDTHS lpborderwidths)  ;
    HRESULT (__export  _far   _cdecl  * SetActiveObject)  ( IOleInPlaceFrame  _far* This,  LPOLEINPLACEACTIVEOBJECT lpActiveObject,
                    LPCSTR lpszObjName)  ;



    HRESULT (__export  _far   _cdecl  * InsertMenus)  ( IOleInPlaceFrame  _far* This,  HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths)  ;
    HRESULT (__export  _far   _cdecl  * SetMenu)  ( IOleInPlaceFrame  _far* This,  HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject)  ;
    HRESULT (__export  _far   _cdecl  * RemoveMenus)  ( IOleInPlaceFrame  _far* This,  HMENU hmenuShared)  ;
    HRESULT (__export  _far   _cdecl  * SetStatusText)  ( IOleInPlaceFrame  _far* This,  LPCSTR lpszStatusText)  ;
    HRESULT (__export  _far   _cdecl  * EnableModeless)  ( IOleInPlaceFrame  _far* This,  BOOL fEnable)  ;
    HRESULT (__export  _far   _cdecl  * TranslateAccelerator)  ( IOleInPlaceFrame  _far* This,  LPMSG lpmsg, WORD wID)  ;
};
typedef     IOleInPlaceFrame  _far* LPOLEINPLACEFRAME;



#line 1099
typedef  struct IOleInPlaceSite { struct IOleInPlaceSiteVtbl  _far* lpVtbl; } IOleInPlaceSite; typedef struct IOleInPlaceSiteVtbl IOleInPlaceSiteVtbl; struct  IOleInPlaceSiteVtbl
{

    HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleInPlaceSite  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
    ULONG (__export  _far   _cdecl  * AddRef)  ( IOleInPlaceSite  _far*  This)   ;
    ULONG (__export  _far   _cdecl  * Release)  ( IOleInPlaceSite  _far*  This)  ;


    HRESULT (__export  _far   _cdecl  * GetWindow)  ( IOleInPlaceSite  _far* This,  HWND  _far* lphwnd)  ;
    HRESULT (__export  _far   _cdecl  * ContextSensitiveHelp)  ( IOleInPlaceSite  _far* This,  BOOL fEnterMode)  ;


    HRESULT (__export  _far   _cdecl  * CanInPlaceActivate)  ( IOleInPlaceSite  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * OnInPlaceActivate)  ( IOleInPlaceSite  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * OnUIActivate)  ( IOleInPlaceSite  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * GetWindowContext)  ( IOleInPlaceSite  _far* This,  LPOLEINPLACEFRAME  _far* lplpFrame,
                        LPOLEINPLACEUIWINDOW  _far* lplpDoc,
                        LPRECT lprcPosRect,
                        LPRECT lprcClipRect,
                        LPOLEINPLACEFRAMEINFO lpFrameInfo)  ;
    HRESULT (__export  _far   _cdecl  * Scroll)  ( IOleInPlaceSite  _far* This,  SIZE scrollExtent)  ;
    HRESULT (__export  _far   _cdecl  * OnUIDeactivate)  ( IOleInPlaceSite  _far* This,  BOOL fUndoable)  ;
    HRESULT (__export  _far   _cdecl  * OnInPlaceDeactivate)  ( IOleInPlaceSite  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * DiscardUndoState)  ( IOleInPlaceSite  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * DeactivateAndUndo)  ( IOleInPlaceSite  _far*  This)  ;
    HRESULT (__export  _far   _cdecl  * OnPosRectChange)  ( IOleInPlaceSite  _far* This,  LPCRECT lprcPosRect)  ;
};
typedef         IOleInPlaceSite  _far* LPOLEINPLACESITE;





 extern DWORD  __export  _far   _pascal   OleBuildVersion(  void );


 extern HRESULT  __export  _far   _pascal   ReadClassStg(LPSTORAGE pStg, CLSID  _far* pclsid);
 extern HRESULT  __export  _far   _pascal   WriteClassStg(LPSTORAGE pStg, const CLSID  _far*  const rclsid);
 extern HRESULT  __export  _far   _pascal   ReadClassStm(LPSTREAM pStm, CLSID  _far* pclsid);
 extern HRESULT  __export  _far   _pascal   WriteClassStm(LPSTREAM pStm, const CLSID  _far*  const rclsid);
 extern HRESULT  __export  _far   _pascal   WriteFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT cf, LPSTR lpszUserType);
 extern HRESULT  __export  _far   _pascal   ReadFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT  _far* pcf, LPSTR  _far* lplpszUserType);




 extern HRESULT  __export  _far   _pascal   OleInitialize(LPMALLOC pMalloc);
 extern void  __export  _far   _pascal   OleUninitialize(void);





 extern HRESULT  __export  _far   _pascal    OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject);
 extern HRESULT  __export  _far   _pascal    OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject);




 extern HRESULT  __export  _far   _pascal    OleCreate(const CLSID  _far*  const rclsid, const IID  _far*  const riid, DWORD renderopt,
                LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID  _far* ppvObj);

 extern HRESULT  __export  _far   _pascal    OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID  _far*  const riid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID  _far* ppvObj);

 extern HRESULT  __export  _far   _pascal    OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID  _far*  const riid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID  _far* ppvObj);

 extern HRESULT  __export  _far   _pascal    OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID  _far*  const iid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID  _far* ppvObj);


 extern HRESULT  __export  _far   _pascal    OleCreateLink(LPMONIKER pmkLinkSrc, const IID  _far*  const riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID  _far* ppvObj);

 extern HRESULT  __export  _far   _pascal    OleCreateLinkToFile(LPCSTR lpszFileName, const IID  _far*  const riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID  _far* ppvObj);

 extern HRESULT  __export  _far   _pascal    OleCreateFromFile(const CLSID  _far*  const rclsid, LPCSTR lpszFileName, const IID  _far*  const riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID  _far* ppvObj);

 extern HRESULT  __export  _far   _pascal    OleLoad(LPSTORAGE pStg, const IID  _far*  const riid, LPOLECLIENTSITE pClientSite,
            LPVOID  _far* ppvObj);

 extern HRESULT  __export  _far   _pascal    OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);

 extern HRESULT  __export  _far   _pascal    OleLoadFromStream( LPSTREAM pStm, const IID  _far*  const iidInterface, LPVOID  _far* ppvObj);
 extern HRESULT  __export  _far   _pascal    OleSaveToStream( LPPERSISTSTREAM pPStm, LPSTREAM pStm );


 extern HRESULT  __export  _far   _pascal    OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained);
 extern HRESULT  __export  _far   _pascal    OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible);




 extern HRESULT  __export  _far   _pascal    RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget);
 extern HRESULT  __export  _far   _pascal    RevokeDragDrop(HWND hwnd);
 extern HRESULT  __export  _far   _pascal    DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource,
            DWORD dwOKEffects, LPDWORD pdwEffect);



 extern HRESULT  __export  _far   _pascal    OleSetClipboard(LPDATAOBJECT pDataObj);
 extern HRESULT  __export  _far   _pascal    OleGetClipboard(LPDATAOBJECT  _far* ppDataObj);
 extern HRESULT  __export  _far   _pascal    OleFlushClipboard(void);
 extern HRESULT  __export  _far   _pascal    OleIsCurrentClipboard(LPDATAOBJECT pDataObj);




 extern HOLEMENU  __export  _far   _pascal     OleCreateMenuDescriptor (HMENU hmenuCombined,
                                LPOLEMENUGROUPWIDTHS lpMenuWidths);
 extern HRESULT  __export  _far   _pascal                OleSetMenuDescriptor (HOLEMENU holemenu, HWND hwndFrame,
                                HWND hwndActiveObject,
                                LPOLEINPLACEFRAME lpFrame,
                                LPOLEINPLACEACTIVEOBJECT lpActiveObj);
 extern HRESULT  __export  _far   _pascal                OleDestroyMenuDescriptor (HOLEMENU holemenu);

 extern HRESULT  __export  _far   _pascal                OleTranslateAccelerator (LPOLEINPLACEFRAME lpFrame,
                            LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);



 extern HANDLE  __export  _far   _pascal   OleDuplicateData (HANDLE hSrc, CLIPFORMAT cfFormat,
                        UINT uiFlags);

 extern HRESULT  __export  _far   _pascal            OleDraw (LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw,
                    LPCRECT lprcBounds);

 extern HRESULT  __export  _far   _pascal            OleRun(LPUNKNOWN pUnknown);
 extern BOOL  __export  _far   _pascal     OleIsRunning(LPOLEOBJECT pObject);
 extern HRESULT  __export  _far   _pascal            OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);

 extern void  __export  _far   _pascal     ReleaseStgMedium(LPSTGMEDIUM);
 extern HRESULT  __export  _far   _pascal            CreateOleAdviseHolder(LPOLEADVISEHOLDER  _far* ppOAHolder);

 extern HRESULT  __export  _far   _pascal            OleCreateDefaultHandler(const CLSID  _far*  const clsid, LPUNKNOWN pUnkOuter,
                    const IID  _far*  const riid, LPVOID  _far* lplpObj);

 extern HRESULT  __export  _far   _pascal            OleCreateEmbeddingHelper(const CLSID  _far*  const clsid, LPUNKNOWN pUnkOuter,
                    DWORD flags, LPCLASSFACTORY pCF,
					const IID  _far*  const riid, LPVOID  _far* lplpObj);

 extern BOOL  __export  _far   _pascal  	IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg,
					WORD  _far* lpwCmd);




 extern HGLOBAL  __export  _far   _pascal   OleGetIconOfFile(LPSTR lpszPath, BOOL fUseFileAsLabel);

 extern HGLOBAL  __export  _far   _pascal   OleGetIconOfClass(const CLSID  _far*  const rclsid,	LPSTR lpszLabel,
					BOOL fUseTypeAsLabel);

 extern HGLOBAL  __export  _far   _pascal   OleMetafilePictFromIconAndLabel(HICON hIcon, LPSTR lpszLabel,
					LPSTR lpszSourceFile, UINT iIconIndex);





 extern HRESULT  __export  _far   _pascal   			OleRegGetUserType (const CLSID  _far*  const clsid, DWORD dwFormOfType,
					LPSTR  _far* pszUserType);

 extern HRESULT  __export  _far   _pascal   			OleRegGetMiscStatus	(const CLSID  _far*  const clsid, DWORD dwAspect,
					DWORD  _far* pdwStatus);

 extern HRESULT  __export  _far   _pascal   			OleRegEnumFormatEtc	(const CLSID  _far*  const clsid, DWORD dwDirection,
					LPENUMFORMATETC  _far* ppenum);

 extern HRESULT  __export  _far   _pascal   			OleRegEnumVerbs	(const CLSID  _far*  const clsid, LPENUMOLEVERB  _far* ppenum);





 extern HRESULT  __export  _far   _pascal   OleConvertIStorageToOLESTREAM
    (LPSTORAGE			pstg,
	 LPOLESTREAM		polestm);

 extern HRESULT  __export  _far   _pascal   OleConvertOLESTREAMToIStorage
    (LPOLESTREAM                polestm,
     LPSTORAGE                  pstg,
     const DVTARGETDEVICE  _far*  ptd);

 extern HRESULT  __export  _far   _pascal   OleConvertIStorageToOLESTREAMEx
    (LPSTORAGE			pstg,

	 CLIPFORMAT			cfFormat,
	 LONG				lWidth,
	 LONG				lHeight,
	 DWORD				dwSize,
     LPSTGMEDIUM		pmedium,
	 LPOLESTREAM		polestm);

 extern HRESULT  __export  _far   _pascal   OleConvertOLESTREAMToIStorageEx
    (LPOLESTREAM		polestm,
	 LPSTORAGE			pstg,

	 CLIPFORMAT  _far*	pcfFormat,
	 LONG  _far*			plwWidth,
	 LONG  _far*			plHeight,
	 DWORD  _far*			pdwSize,
	 LPSTGMEDIUM		pmedium);




 extern HRESULT  __export  _far   _pascal   GetHGlobalFromILockBytes (LPLOCKBYTES plkbyt, HGLOBAL  _far* phglobal);
 extern HRESULT  __export  _far   _pascal   CreateILockBytesOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                    LPLOCKBYTES  _far* pplkbyt);

 extern HRESULT  __export  _far   _pascal   GetHGlobalFromStream (LPSTREAM pstm, HGLOBAL  _far* phglobal);
 extern HRESULT  __export  _far   _pascal   CreateStreamOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                LPSTREAM  _far* ppstm);




 extern HRESULT  __export  _far   _pascal   OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew);
 extern HRESULT  __export  _far   _pascal   OleGetAutoConvert(const CLSID  _far*  const clsidOld, LPCLSID pClsidNew);
 extern HRESULT  __export  _far   _pascal   OleSetAutoConvert(const CLSID  _far*  const clsidOld, const CLSID  _far*  const clsidNew);
 extern HRESULT  __export  _far   _pascal   GetConvertStg(LPSTORAGE pStg);
 extern HRESULT  __export  _far   _pascal   SetConvertStg(LPSTORAGE pStg, BOOL fConvert);






#line 18 "C:\SC\BIN\..\INCLUDE\ole2.h"
#pragma pack()




#line 3 "C:\SC\BIN\..\INCLUDE\ole2ui.h"
 #pragma once



#pragma pack(__DEFALIGN)








#line 20 "C:\SC\BIN\..\INCLUDE\win16\ole2ui.h"
#pragma message ("Including OLE2UI.H from " __FILE__)






#line 3 "C:\SC\BIN\..\INCLUDE\windows.h"
 #pragma once



#pragma pack(__DEFALIGN)







#line 18 "C:\SC\BIN\..\INCLUDE\windows.h"
#pragma pack()





#line 3 "C:\SC\BIN\..\INCLUDE\shellapi.h"
#pragma pack(__DEFALIGN)





#line 13 "C:\SC\BIN\..\INCLUDE\win16\shellapi.h"
#pragma pack(1)         /* Assume byte packing throughout */






#line 31
struct HDROP__ { int unused; }; typedef const struct HDROP__  _near* HDROP ;







#line 50
typedef DWORD HKEY;
typedef HKEY  _far* PHKEY;

LONG _far  _pascal RegOpenKey(HKEY, LPCSTR, HKEY  _far*);
LONG _far  _pascal RegCreateKey(HKEY, LPCSTR, HKEY  _far*);
LONG _far  _pascal RegCloseKey(HKEY);
LONG _far  _pascal RegDeleteKey(HKEY, LPCSTR);
LONG _far  _pascal RegSetValue(HKEY, LPCSTR, DWORD, LPCSTR, DWORD);
LONG _far  _pascal RegQueryValue(HKEY, LPCSTR, LPSTR, LONG  _far*);
LONG _far  _pascal RegEnumKey(HKEY, DWORD, LPSTR, DWORD);

UINT _far  _pascal DragQueryFile(HDROP, UINT, LPSTR, UINT);
BOOL _far  _pascal DragQueryPoint(HDROP, POINT  _far*);
void _far  _pascal DragFinish(HDROP);
void _far  _pascal DragAcceptFiles(HWND, BOOL);

HICON _far  _pascal ExtractIcon(HINSTANCE hInst, LPCSTR lpszExeFileName, UINT nIconIndex);



#line 76
HINSTANCE _far  _pascal ShellExecute(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, int iShowCmd);
HINSTANCE _far  _pascal FindExecutable(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);



#line 85
#pragma pack()






#line 14 "C:\SC\BIN\..\INCLUDE\shellapi.h"
#pragma pack()




#line 3 "C:\SC\BIN\..\INCLUDE\ole2.h"
 #pragma once



#pragma pack(__DEFALIGN)








#line 18 "C:\SC\BIN\..\INCLUDE\ole2.h"
#pragma pack()




#line 3 "C:\SC\BIN\..\INCLUDE\string.h"
 #pragma once




#line 3 "C:\SC\BIN\..\INCLUDE\dlgs.h"
 #pragma once



#pragma pack(__DEFALIGN)





#line 16 "C:\SC\BIN\..\INCLUDE\win16\dlgs.h"

#line 34

#line 51

#line 68

#line 85

#line 118

#line 135

#line 152

#line 169








#line 18 "C:\SC\BIN\..\INCLUDE\dlgs.h"
#pragma pack()





#line 24 "C:\SC\BIN\..\INCLUDE\win16\olestd.h"
#pragma message ("INCLUDING OLESTD.H from " __FILE__)




#line 3 "C:\SC\BIN\..\INCLUDE\dos.h"
 #pragma once










#line 32



#pragma pack(1)


typedef unsigned size_t;
extern unsigned __cdecl _stack;



#line 83

#pragma pack(1)
struct WORDREGS { unsigned ax,bx,cx,dx,si,di,cflag,flags; };
struct BYTEREGS {unsigned char al,ah,bl,bh,cl,ch,dl,dh; };
union REGS { struct WORDREGS x; struct BYTEREGS h; };
struct SREGS { unsigned es,cs,ss,ds; };
#pragma pack()





#line 105
int __cdecl int86(int,union REGS *,union REGS *);
int __cdecl int86x(int,union REGS *,union REGS *,struct SREGS *);
int __cdecl intdos(union REGS *,union REGS *);
int __cdecl intdosx(union REGS *,union REGS *,struct SREGS *);
void  __cdecl segread(struct SREGS *);




#line 160
#pragma pack(1)
struct FIND
{       char reserved[21];
	char attribute;
	unsigned short time,date;
	unsigned long size;

	char name[13];
#line 171
};

struct find_t
{       char reserved[21];
	char attrib;
	unsigned short wr_time,wr_date;
	unsigned long size;

	char name[13];
#line 183
};


#pragma pack()





#line 206
struct FIND *  __cdecl findfirst(const char *,int),*  __cdecl findnext(void);


unsigned  __cdecl _dos_findfirst(const char *, unsigned, struct find_t *);
unsigned  __cdecl _dos_findnext(struct find_t *);



void  __cdecl _dos_keep(unsigned, unsigned);








#line 240
void __far * __cdecl farmalloc(unsigned long size);
void __far * __cdecl farcalloc(unsigned long numelems,unsigned long elemsize);
void __far * __cdecl farrealloc(void __far *oldptr,unsigned long newsize);
int __cdecl farfree(void __far *ptr);
unsigned long __cdecl farcoreleft(void);


#pragma pack(1)
struct DOSERROR
{
	int exterror;
	char eclass;
	char action;
	char locus;
};

#line 258
struct  COUNTRY {
	short   co_date;
	char    co_curr[5];
	char    co_thsep[2];
	char    co_desep[2];
	char    co_dtsep[2];
	char    co_tmsep[2];
	char    co_currstyle;
	char    co_digits;
	char    co_time;
	long    co_case;
	char    co_dasep[2];
	char    co_fill[10];
};

struct diskfree_t {
	unsigned total_clusters;
	unsigned avail_clusters;
	unsigned sectors_per_cluster;
	unsigned bytes_per_sector;
};


struct dos_date_t
{
	unsigned char day;
	unsigned char month;
	unsigned short  year;
	unsigned char dayofweek;
};


struct  _fatinfo
{
	char            fi_sclus;
	char            fi_fatid;
	unsigned        fi_nclus;
	int             fi_bysec;
};


struct dos_time_t
{
	unsigned char hour;
	unsigned char minute;
	unsigned char second;
	unsigned char hsecond;
};


struct time
{
	unsigned char   ti_min;
	unsigned char   ti_hour;
	unsigned char   ti_hund;
	unsigned char   ti_sec;
};

struct date
{
	int da_year;
	char    da_day;
	char    da_mon;
};

struct fcb
{
	char    fcb_drive;
	char    fcb_name[8];
	char    fcb_ext[3];
	short   fcb_curblk;
	short   fcb_filesize;
	short   fcb_date;
	char    fcb_resv[10];
	char    fcb_crrec;
	long    fcb_random;
};

#pragma pack()


struct COUNTRY * __cdecl  country( int , struct COUNTRY *);
extern unsigned int  __cdecl _osversion;

int  __cdecl              getcbrk(void);
void  __cdecl             ctrlbrk(int (*FarPtr)());
int  __cdecl              setcbrk(int value);
void  __cdecl             getfat(unsigned char disk, struct  _fatinfo *fat);
void  __cdecl             getfatd(struct  _fatinfo *fat);
int  __cdecl              getverify(void);
void  __cdecl             setverify(int value);
char __far *  __cdecl     getdta(void);
void  __cdecl             setdta(char __far *dta);
unsigned  __cdecl         getpsp(void);
int  __cdecl              setblock(unsigned segment, unsigned size);
char *  __cdecl           parsfnm(const char *cmdline, struct fcb *fcb, int opt);




void  __cdecl             getdate(struct date *datePtr);
void  __cdecl             gettime(struct time *timePtr);


unsigned  __cdecl         _dos_lock(int, int, unsigned long, unsigned long);
unsigned long  __cdecl    _dos_seek(int, unsigned long, int);
int  __cdecl              dos_creat(char *,int);
int  __cdecl              _dos_creat(const char *,unsigned, int *);
int  __cdecl              _dos_creatnew(const char *,unsigned , int *);
unsigned  __cdecl         _dos_open(const char *, unsigned,int *);
int  __cdecl              dos_close(int);
unsigned  __cdecl         _dos_read(int, void __far *,unsigned,unsigned *);
unsigned  __cdecl         _dos_write(int, const void __far *,unsigned,unsigned *);
int  __cdecl              dos_get_ctrl_break(void);

int  __cdecl              dos_abs_disk_read(int,int,long,char *);
int  __cdecl              dos_abs_disk_write(int,int,long,const char *);

void  __cdecl             dos_set_verify(int);
void  __cdecl             dos_set_ctrl_break(int);
int  __cdecl              dos_get_verify(void);
int  __cdecl              getcurdir(int drive,char *dir);
char *  __cdecl           _getdcwd(int drive,char *Pbuf,int PbufLen);
unsigned  __cdecl         _dos_commit(int);
int  __cdecl              dos_exterr(struct DOSERROR *);
int  __cdecl              dosexterr(struct DOSERROR *);
int  __cdecl              setdisk(int);
int  __cdecl              getdisk(void);
long  __cdecl             dos_getdiskfreespace(int);
unsigned  __cdecl         _dos_getdiskfree(unsigned, struct diskfree_t *);
void  __cdecl             dos_setdrive(unsigned, unsigned *);
void  __cdecl             dos_getdrive(unsigned *);
unsigned  __cdecl         dos_setftime(int, unsigned, unsigned);
unsigned  __cdecl         dos_getftime(int, unsigned *, unsigned *);
unsigned  __cdecl         dos_setfileattr(const char *, unsigned);
unsigned  __cdecl         dos_getfileattr(const char *, unsigned *);
unsigned  __cdecl         dos_setdate(struct dos_date_t *);
void  __cdecl             dos_getdate(struct dos_date_t *);
int  __cdecl              _dos_sethandlecount(unsigned);
unsigned  __cdecl         dos_settime(struct dos_time_t *);
void  __cdecl             dos_gettime(struct dos_time_t *);


#line 406
unsigned                _dos_allocmem(unsigned int,unsigned int *);
int                     allocmem(unsigned int,unsigned int *);
unsigned                _dos_freemem(unsigned);
int                     freemem(unsigned);



#line 423
unsigned char    __cdecl _inline_inp(unsigned);
int              __cdecl _inline_inpw(unsigned);
unsigned char    __cdecl _inline_outp(unsigned,char);
int              __cdecl _inline_outpw(unsigned,unsigned);




#line 455
size_t  __cdecl _chkstack(void);



#line 461
void __cdecl peekbytes(unsigned,unsigned,void *,size_t);
void __cdecl pokebytes(unsigned,unsigned,const void *,size_t);



#line 511
int __cdecl bdos(int dosfunc, unsigned int dosdx, unsigned int dosal);

int __cdecl bdosptr(int, void *, unsigned);
int __cdecl bdosx(char,void *,char);


unsigned  __cdecl dos_alloc(unsigned);
unsigned  __cdecl dos_calloc(unsigned);
int  __cdecl dos_free(unsigned);

void  __cdecl _copy(unsigned,unsigned,unsigned);
unsigned long  __cdecl dos_avail(void);

unsigned  __cdecl dos_setblock(unsigned,unsigned);
unsigned  __cdecl _dos_setblock(unsigned,unsigned,unsigned *);




int __pascal response_expand(int *,char ***);

int  __cdecl cputype(void);




#line 567
extern unsigned short __cdecl _exe_type;


#pragma pack()



extern void __far __pascal DOS3CALL(void);









#line 3 "C:\SC\BIN\..\INCLUDE\commdlg.h"
 #pragma once



#pragma pack(__DEFALIGN)







#line 18 "C:\SC\BIN\..\INCLUDE\commdlg.h"
#pragma pack()





#line 3 "C:\SC\BIN\..\INCLUDE\shellapi.h"
#pragma pack(__DEFALIGN)







#line 14 "C:\SC\BIN\..\INCLUDE\shellapi.h"
#pragma pack()









#line 49 "C:\SC\BIN\..\INCLUDE\win16\olestd.h"
typedef struct tagINTERFACEIMPL {
		IUnknownVtbl  _far*       lpVtbl;
		LPVOID                  lpBack;
		int                     cRef;
} INTERFACEIMPL,  _far* LPINTERFACEIMPL;























































#line 280
typedef enum tagOLEUIPASTEFLAG
{
   OLEUIPASTE_ENABLEICON    = 2048,
   OLEUIPASTE_PASTEONLY     = 0,
   OLEUIPASTE_PASTE         = 512,
   OLEUIPASTE_LINKANYTYPE   = 1024,
   OLEUIPASTE_LINKTYPE1     = 1,
   OLEUIPASTE_LINKTYPE2     = 2,
   OLEUIPASTE_LINKTYPE3     = 4,
   OLEUIPASTE_LINKTYPE4     = 8,
   OLEUIPASTE_LINKTYPE5     = 16,
   OLEUIPASTE_LINKTYPE6     = 32,
   OLEUIPASTE_LINKTYPE7     = 64,
   OLEUIPASTE_LINKTYPE8     = 128
} OLEUIPASTEFLAG;



#line 320
typedef struct tagOLEUIPASTEENTRY
{
   FORMATETC        fmtetc;




   LPCSTR           lpstrFormatName;









   LPCSTR           lpstrResultText;




   DWORD            dwFlags;
   DWORD            dwScratchSpace;




} OLEUIPASTEENTRY, *POLEUIPASTEENTRY,  _far *LPOLEUIPASTEENTRY;









































































#line 577
 extern int  __export  _far   _pascal   SetDCToAnisotropic(HDC hDC, LPRECT lprcPhysical, LPRECT lprcLogical, LPRECT lprcWindowOld, LPRECT lprcViewportOld);
 extern int  __export  _far   _pascal   SetDCToDrawInHimetricRect(HDC, LPRECT, LPRECT, LPRECT, LPRECT);
 extern int  __export  _far   _pascal   ResetOrigDC(HDC, int, LPRECT, LPRECT);

 extern int  __export  _far   _pascal          XformWidthInHimetricToPixels(HDC, int);
 extern int  __export  _far   _pascal          XformWidthInPixelsToHimetric(HDC, int);
 extern int  __export  _far   _pascal          XformHeightInHimetricToPixels(HDC, int);
 extern int  __export  _far   _pascal          XformHeightInPixelsToHimetric(HDC, int);

 extern void  __export  _far   _pascal   XformRectInPixelsToHimetric(HDC, LPRECT, LPRECT);
 extern void  __export  _far   _pascal   XformRectInHimetricToPixels(HDC, LPRECT, LPRECT);
 extern void  __export  _far   _pascal   XformSizeInPixelsToHimetric(HDC, LPSIZEL, LPSIZEL);
 extern void  __export  _far   _pascal   XformSizeInHimetricToPixels(HDC, LPSIZEL, LPSIZEL);
 extern int  __export  _far   _pascal   XformWidthInHimetricToPixels(HDC, int);
 extern int  __export  _far   _pascal   XformWidthInPixelsToHimetric(HDC, int);
 extern int  __export  _far   _pascal   XformHeightInHimetricToPixels(HDC, int);
 extern int  __export  _far   _pascal   XformHeightInPixelsToHimetric(HDC, int);

 extern void  __export  _far   _pascal   ParseCmdLine(LPSTR, BOOL  _far *, LPSTR);

 extern BOOL  __export  _far   _pascal   OleStdIsOleLink(LPUNKNOWN lpUnk);
 extern LPUNKNOWN  __export  _far   _pascal   OleStdQueryInterface(LPUNKNOWN lpUnk, const IID  _far*  const riid);
 extern LPSTORAGE  __export  _far   _pascal   OleStdCreateRootStorage(LPSTR lpszStgName, DWORD grfMode);
 extern LPSTORAGE  __export  _far   _pascal   OleStdOpenRootStorage(LPSTR lpszStgName, DWORD grfMode);
 extern LPSTORAGE  __export  _far   _pascal   OleStdOpenOrCreateRootStorage(LPSTR lpszStgName, DWORD grfMode);
 extern LPSTORAGE  __export  _far   _pascal   OleStdCreateChildStorage(LPSTORAGE lpStg, LPSTR lpszStgName);
 extern LPSTORAGE  __export  _far   _pascal   OleStdOpenChildStorage(LPSTORAGE lpStg, LPSTR lpszStgName, DWORD grfMode);
 extern BOOL  __export  _far   _pascal   OleStdCommitStorage(LPSTORAGE lpStg);
 extern HRESULT  __export  _far   _pascal   OleStdDestroyAllElements(LPSTORAGE lpStg);

 extern LPSTORAGE  __export  _far   _pascal   OleStdCreateStorageOnHGlobal(
		HANDLE hGlobal,
		BOOL fDeleteOnRelease,
		DWORD dwgrfMode
);
 extern LPSTORAGE  __export  _far   _pascal   OleStdCreateTempStorage(BOOL fUseMemory, DWORD grfMode);
 extern HRESULT  __export  _far   _pascal   OleStdDoConvert(LPSTORAGE lpStg, const CLSID  _far*  const rClsidNew);
 extern BOOL  __export  _far   _pascal   OleStdGetTreatAsFmtUserType(
		const CLSID  _far*  const        rClsidApp,
		LPSTORAGE       lpStg,
		CLSID  _far*      lpclsid,
		CLIPFORMAT  _far* lpcfFmt,
		LPSTR  _far*      lplpszType
);
 extern HRESULT  __export  _far   _pascal   OleStdDoTreatAsClass(LPSTR lpszUserType, const CLSID  _far*  const rclsid, const CLSID  _far*  const rclsidNew);
 extern BOOL  __export  _far   _pascal   OleStdSetupAdvises(LPOLEOBJECT lpOleObject, DWORD dwDrawAspect,
					LPSTR lpszContainerApp, LPSTR lpszContainerObj,
					LPADVISESINK lpAdviseSink, BOOL fCreate);
 extern HRESULT  __export  _far   _pascal   OleStdSwitchDisplayAspect(
		LPOLEOBJECT             lpOleObj,
		LPDWORD                 lpdwCurAspect,
		DWORD                   dwNewAspect,
		HGLOBAL                 hMetaPict,
		BOOL                    fDeleteOldAspect,
		BOOL                    fSetupViewAdvise,
		LPADVISESINK            lpAdviseSink,
		BOOL  _far*               lpfMustUpdate
);
 extern HRESULT  __export  _far   _pascal   OleStdSetIconInCache(LPOLEOBJECT lpOleObj, HGLOBAL hMetaPict);
 extern HGLOBAL  __export  _far   _pascal   OleStdGetData(
		LPDATAOBJECT        lpDataObj,
		CLIPFORMAT          cfFormat,
		DVTARGETDEVICE  _far* lpTargetDevice,
		DWORD               dwAspect,
		LPSTGMEDIUM         lpMedium
);
 extern void  __export  _far   _pascal   OleStdMarkPasteEntryList(
		LPDATAOBJECT        lpSrcDataObj,
		LPOLEUIPASTEENTRY   lpPriorityList,
		int                 cEntries
);
 extern int  __export  _far   _pascal   OleStdGetPriorityClipboardFormat(
		LPDATAOBJECT        lpSrcDataObj,
		LPOLEUIPASTEENTRY   lpPriorityList,
		int                 cEntries
);
 extern BOOL  __export  _far   _pascal   OleStdIsDuplicateFormat(
		LPFORMATETC         lpFmtEtc,
		LPFORMATETC         arrFmtEtc,
		int                 nFmtEtc
);
 extern void  __export  _far   _pascal   OleStdRegisterAsRunning(LPUNKNOWN lpUnk, LPMONIKER lpmkFull, DWORD  _far* lpdwRegister);
 extern void  __export  _far   _pascal   OleStdRevokeAsRunning(DWORD  _far* lpdwRegister);
 extern void  __export  _far   _pascal   OleStdNoteFileChangeTime(LPSTR lpszFileName, DWORD dwRegister);
 extern void  __export  _far   _pascal   OleStdNoteObjectChangeTime(DWORD dwRegister);
 extern HRESULT  __export  _far   _pascal   OleStdGetOleObjectData(
		LPPERSISTSTORAGE    lpPStg,
		LPFORMATETC         lpformatetc,
		LPSTGMEDIUM         lpMedium,
		BOOL                fUseMemory
);
 extern HRESULT  __export  _far   _pascal   OleStdGetLinkSourceData(
		LPMONIKER           lpmk,
		LPCLSID             lpClsID,
		LPFORMATETC         lpformatetc,
		LPSTGMEDIUM         lpMedium
);
 extern HGLOBAL  __export  _far   _pascal   OleStdGetObjectDescriptorData(
		CLSID               clsid,
		DWORD               dwAspect,
		SIZEL               sizel,
		POINTL              pointl,
		DWORD               dwStatus,
		LPSTR               lpszFullUserTypeName,
		LPSTR               lpszSrcOfCopy
);
 extern HGLOBAL  __export  _far   _pascal   OleStdGetObjectDescriptorDataFromOleObject(
		LPOLEOBJECT         lpOleObj,
		LPSTR               lpszSrcOfCopy,
		DWORD               dwAspect,
		POINTL              pointl,
		LPSIZEL             lpSizelHim
);
 extern HGLOBAL  __export  _far   _pascal   OleStdFillObjectDescriptorFromData(
		LPDATAOBJECT       lpDataObject,
		LPSTGMEDIUM        lpmedium,
		CLIPFORMAT  _far*    lpcfFmt
);
 extern HANDLE  __export  _far   _pascal   OleStdGetMetafilePictFromOleObject(
		LPOLEOBJECT         lpOleObj,
		DWORD               dwDrawAspect,
		LPSIZEL             lpSizelHim,
		DVTARGETDEVICE  _far* ptd
);

 extern void  __export  _far   _pascal   OleStdCreateTempFileMoniker(LPSTR lpszPrefixString, UINT  _far* lpuUnique, LPSTR lpszName, LPMONIKER  _far* lplpmk);
 extern LPMONIKER  __export  _far   _pascal   OleStdGetFirstMoniker(LPMONIKER lpmk);
 extern ULONG  __export  _far   _pascal   OleStdGetLenFilePrefixOfMoniker(LPMONIKER lpmk);
 extern HRESULT  __export  _far   _pascal   OleStdMkParseDisplayName(
		const CLSID  _far*  const        rClsid,
		LPBC            lpbc,
		LPSTR           lpszUserName,
		ULONG  _far*      lpchEaten,
		LPMONIKER  _far*  lplpmk
);
 extern LPVOID  __export  _far   _pascal   OleStdMalloc(ULONG ulSize);
 extern LPVOID  __export  _far   _pascal   OleStdRealloc(LPVOID pmem, ULONG ulSize);
 extern void  __export  _far   _pascal   OleStdFree(LPVOID pmem);
 extern ULONG  __export  _far   _pascal   OleStdGetSize(LPVOID pmem);
 extern void  __export  _far   _pascal   OleStdFreeString(LPSTR lpsz, LPMALLOC lpMalloc);
 extern LPSTR  __export  _far   _pascal   OleStdCopyString(LPSTR lpszSrc, LPMALLOC lpMalloc);
 extern ULONG  __export  _far   _pascal   OleStdGetItemToken(LPSTR lpszSrc, LPSTR lpszDst,int nMaxChars);

 extern UINT  __export  _far   _pascal       OleStdIconLabelTextOut(HDC        hDC,
										 HFONT      hFont,
										 int        nXStart,
										 int        nYStart,
										 UINT       fuOptions,
										 RECT  _far * lpRect,
										 LPSTR      lpszString,
										 UINT       cchString,
										 int  _far *  lpDX);


 extern UINT  __export  _far   _pascal       OleStdGetAuxUserType(const CLSID  _far*  const rclsid,
									  WORD   wAuxUserType,
									  LPSTR  lpszAuxUserType,
									  int    cch,
									  HKEY   hKey);

 extern UINT  __export  _far   _pascal       OleStdGetUserTypeOfClass(const CLSID  _far*  const rclsid,
										   LPSTR lpszUserType,
										   UINT cch,
										   HKEY hKey);

 extern BOOL  __export  _far   _pascal   OleStdGetMiscStatusOfClass(const CLSID  _far*  const, HKEY, DWORD  _far *);
 extern CLIPFORMAT  __export  _far   _pascal   OleStdGetDefaultFileFormatOfClass(
		const CLSID  _far*  const        rclsid,
		HKEY            hKey
);

 extern void  __export  _far   _pascal   OleStdInitVtbl(LPVOID lpVtbl, UINT nSizeOfVtbl);
HRESULT  __export  _far   _cdecl   OleStdNullMethod(LPUNKNOWN lpThis);
 extern BOOL  __export  _far   _pascal   OleStdCheckVtbl(LPVOID lpVtbl, UINT nSizeOfVtbl, LPSTR lpszIface);
 extern ULONG  __export  _far   _pascal   OleStdVerifyRelease(LPUNKNOWN lpUnk, LPSTR lpszMsg);
 extern ULONG  __export  _far   _pascal   OleStdRelease(LPUNKNOWN lpUnk);

 extern HDC  __export  _far   _pascal   OleStdCreateDC(DVTARGETDEVICE  _far* ptd);
 extern HDC  __export  _far   _pascal   OleStdCreateIC(DVTARGETDEVICE  _far* ptd);
 extern DVTARGETDEVICE  _far*  __export  _far   _pascal   OleStdCreateTargetDevice(LPPRINTDLG lpPrintDlg);
 extern BOOL  __export  _far   _pascal   OleStdDeleteTargetDevice(DVTARGETDEVICE  _far* ptd);
 extern DVTARGETDEVICE  _far*  __export  _far   _pascal   OleStdCopyTargetDevice(DVTARGETDEVICE  _far* ptdSrc);
 extern BOOL  __export  _far   _pascal   OleStdCopyFormatEtc(LPFORMATETC petcDest, LPFORMATETC petcSrc);
 extern int  __export  _far   _pascal   OleStdCompareFormatEtc(FORMATETC  _far* pFetcLeft, FORMATETC  _far* pFetcRight);
 extern BOOL  __export  _far   _pascal   OleStdCompareTargetDevice
	(DVTARGETDEVICE  _far* ptdLeft, DVTARGETDEVICE  _far* ptdRight);


 extern void  __export  _far   _pascal   OleDbgPrint(
		int     nDbgLvl,
		LPSTR   lpszPrefix,
		LPSTR   lpszMsg,
		int     nIndent
);
 extern void  __export  _far   _pascal   OleDbgPrintAlways(LPSTR lpszPrefix, LPSTR lpszMsg, int nIndent);
 extern void  __export  _far   _pascal   OleDbgSetDbgLevel(int nDbgLvl);
 extern int  __export  _far   _pascal   OleDbgGetDbgLevel( void );
 extern void  __export  _far   _pascal   OleDbgIndent(int n);
 extern void  __export  _far   _pascal   OleDbgPrintRefCnt(
		int         nDbgLvl,
		LPSTR       lpszPrefix,
		LPSTR       lpszMsg,
		LPVOID      lpObj,
		ULONG       refcnt
);
 extern void  __export  _far   _pascal   OleDbgPrintRefCntAlways(
		LPSTR       lpszPrefix,
		LPSTR       lpszMsg,
		LPVOID      lpObj,
		ULONG       refcnt
);
 extern void  __export  _far   _pascal   OleDbgPrintRect(
		int         nDbgLvl,
		LPSTR       lpszPrefix,
		LPSTR       lpszMsg,
		LPRECT      lpRect
);
 extern void  __export  _far   _pascal   OleDbgPrintRectAlways(
		LPSTR       lpszPrefix,
		LPSTR       lpszMsg,
		LPRECT      lpRect
);
 extern void  __export  _far   _pascal   OleDbgPrintScodeAlways(LPSTR lpszPrefix, LPSTR lpszMsg, SCODE sc);


 extern HRESULT  __export  _far   _pascal   OleStdCreateDbAlloc(ULONG reserved, IMalloc  _far*  _far* ppmalloc);


 extern LPENUMFORMATETC  __export  _far   _pascal
  OleStdEnumFmtEtc_Create(ULONG nCount, LPFORMATETC lpEtc);

 extern LPENUMSTATDATA  __export  _far   _pascal
  OleStdEnumStatData_Create(ULONG nCount, LPSTATDATA lpStat);

 extern BOOL  __export  _far   _pascal
  OleStdCopyStatData(LPSTATDATA pDest, LPSTATDATA pSrc);

 extern HPALETTE  __export  _far   _pascal
  OleStdCreateStandardPalette(void);













#line 83 "C:\SC\BIN\..\INCLUDE\win16\ole2ui.h"
 extern BOOL  __export  _far   _pascal   OleUIInitialize(HINSTANCE hInstance, HINSTANCE hPrevInst);
 extern BOOL  __export  _far   _pascal    OleUIUnInitialize(void);






#line 95
extern DWORD g_dwObjectCount;

 extern HRESULT  __export  _far   _pascal   OleUICanUnloadNow(void);
 extern HRESULT  __export  _far   _pascal   OleUILockLibrary(BOOL fLock);















#line 150
typedef  void *PVOID;




typedef UINT (_far  _pascal *LPFNOLEUIHOOK)(HWND, UINT, WPARAM, LPARAM);

































#line 232
 extern BOOL  __export  _far   _pascal   OleUIAddVerbMenu(LPOLEOBJECT lpOleObj,
							 LPSTR lpszShortType,
							 HMENU hMenu,
							 UINT uPos,
							 UINT uIDVerbMin,
							 UINT uIDVerbMax,
							 BOOL bAddConvert,
							 UINT idConvert,
							 HMENU  _far *lphMenu);


 extern HGLOBAL  __export  _far   _pascal   OleMetafilePictFromIconAndLabel(HICON, LPSTR, LPSTR, UINT) ;
 extern void  __export  _far   _pascal      OleUIMetafilePictIconFree(HGLOBAL);
 extern BOOL  __export  _far   _pascal      OleUIMetafilePictIconDraw(HDC, LPRECT, HGLOBAL, BOOL);
 extern UINT  __export  _far   _pascal      OleUIMetafilePictExtractLabel(HGLOBAL, LPSTR, UINT, LPDWORD);
 extern HICON  __export  _far   _pascal     OleUIMetafilePictExtractIcon(HGLOBAL);
 extern BOOL  __export  _far   _pascal      OleUIMetafilePictExtractIconSource(HGLOBAL,LPSTR,UINT  _far *);








#line 259
typedef struct tagOLEUIINSERTOBJECT
	{

	DWORD           cbStruct;
	DWORD           dwFlags;
	HWND            hWndOwner;
	LPCSTR          lpszCaption;
	LPFNOLEUIHOOK   lpfnHook;
	LPARAM          lCustData;
	HINSTANCE       hInstance;
	LPCSTR          lpszTemplate;
	HRSRC           hResource;


	CLSID           clsid;
	LPSTR           lpszFile;
	UINT            cchFile;
	UINT            cClsidExclude;
	LPCLSID         lpClsidExclude;


	IID             iid;
	DWORD           oleRender;
	LPFORMATETC     lpFormatEtc;
	LPOLECLIENTSITE lpIOleClientSite;
	LPSTORAGE       lpIStorage;
	LPVOID  _far     *ppvObj;
	SCODE           sc;
	HGLOBAL         hMetaPict;

	} OLEUIINSERTOBJECT, *POLEUIINSERTOBJECT,  _far *LPOLEUIINSERTOBJECT;


 extern UINT  __export  _far   _pascal   OleUIInsertObject(LPOLEUIINSERTOBJECT);


















#line 358
typedef struct tagOLEUIPASTESPECIAL
	{

	DWORD           cbStruct;
	DWORD           dwFlags;
	HWND            hWndOwner;
	LPCSTR          lpszCaption;
	LPFNOLEUIHOOK   lpfnHook;
	LPARAM          lCustData;
	HINSTANCE       hInstance;
	LPCSTR          lpszTemplate;
	HRSRC           hResource;




	LPDATAOBJECT    lpSrcDataObj;


	LPOLEUIPASTEENTRY arrPasteEntries;


	int             cPasteEntries;

	UINT         _far *arrLinkTypes;



	int             cLinkTypes;
	UINT            cClsidExclude;
	LPCLSID         lpClsidExclude;


	int             nSelectedIndex;

	BOOL            fLink;

	HGLOBAL         hMetaPict;




	SIZEL           sizel;









	} OLEUIPASTESPECIAL, *POLEUIPASTESPECIAL,  _far *LPOLEUIPASTESPECIAL;



 extern UINT  __export  _far   _pascal   OleUIPasteSpecial(LPOLEUIPASTESPECIAL);






























#line 489
typedef  struct IOleUILinkContainer { struct IOleUILinkContainerVtbl  _far* lpVtbl; } IOleUILinkContainer; typedef struct IOleUILinkContainerVtbl IOleUILinkContainerVtbl; struct  IOleUILinkContainerVtbl
{

	HRESULT (__export  _far   _cdecl  * QueryInterface)  ( IOleUILinkContainer  _far* This,  const IID  _far*  const riid, LPVOID  _far* ppvObj)  ;
	ULONG (__export  _far   _cdecl  * AddRef)  ( IOleUILinkContainer  _far*  This)  ;
	ULONG (__export  _far   _cdecl  * Release)  ( IOleUILinkContainer  _far*  This)  ;

	DWORD (__export  _far   _cdecl  * GetNextLink)  ( IOleUILinkContainer  _far* This,  DWORD dwLink)  ;
	HRESULT (__export  _far   _cdecl  * SetLinkUpdateOptions)  ( IOleUILinkContainer  _far* This,  DWORD dwLink, DWORD dwUpdateOpt)  ;
	HRESULT (__export  _far   _cdecl  * GetLinkUpdateOptions)  ( IOleUILinkContainer  _far* This,  DWORD dwLink, DWORD  _far* lpdwUpdateOpt)  ;
	HRESULT (__export  _far   _cdecl  * SetLinkSource)  ( IOleUILinkContainer  _far* This,
			DWORD       dwLink,
			LPSTR       lpszDisplayName,
			ULONG       lenFileName,
			ULONG  _far*  pchEaten,
			BOOL        fValidateSource)  ;
	HRESULT (__export  _far   _cdecl  * GetLinkSource)  ( IOleUILinkContainer  _far* This,
			DWORD       dwLink,
			LPSTR  _far*  lplpszDisplayName,
			ULONG  _far*  lplenFileName,
			LPSTR  _far*  lplpszFullLinkType,
			LPSTR  _far*  lplpszShortLinkType,
			BOOL  _far*   lpfSourceAvailable,
			BOOL  _far*   lpfIsSelected)  ;
	HRESULT (__export  _far   _cdecl  * OpenLinkSource)  ( IOleUILinkContainer  _far* This,  DWORD dwLink)  ;
	HRESULT (__export  _far   _cdecl  * UpdateLink)  ( IOleUILinkContainer  _far* This,
			DWORD dwLink,
			BOOL fErrorMessage,
			BOOL fErrorAction)  ;
	HRESULT (__export  _far   _cdecl  * CancelLink)  ( IOleUILinkContainer  _far* This,  DWORD dwLink)  ;
};


typedef struct tagOLEUIEDITLINKS
	{

	DWORD           cbStruct;
	DWORD           dwFlags;
	HWND            hWndOwner;
	LPCSTR          lpszCaption;
	LPFNOLEUIHOOK   lpfnHook;
	LPARAM          lCustData;
	HINSTANCE       hInstance;
	LPCSTR          lpszTemplate;
	HRSRC           hResource;



	IOleUILinkContainer  _far*  lpOleUILinkContainer;

	} OLEUIEDITLINKS, *POLEUIEDITLINKS,  _far *LPOLEUIEDITLINKS;



 extern UINT  __export  _far   _pascal   OleUIEditLinks(LPOLEUIEDITLINKS);










#line 576
typedef struct tagOLEUICHANGEICON
	{

	DWORD           cbStruct;
	DWORD           dwFlags;
	HWND            hWndOwner;
	LPCSTR          lpszCaption;
	LPFNOLEUIHOOK   lpfnHook;
	LPARAM          lCustData;
	HINSTANCE       hInstance;
	LPCSTR          lpszTemplate;
	HRSRC           hResource;


	HGLOBAL         hMetaPict;

	CLSID           clsid;
	char            szIconExe[256 ];
	int             cchIconExe;
	} OLEUICHANGEICON, *POLEUICHANGEICON,  _far *LPOLEUICHANGEICON;



 extern UINT  __export  _far   _pascal   OleUIChangeIcon(LPOLEUICHANGEICON);
















#line 644
typedef struct tagOLEUICONVERT
	{

	DWORD           cbStruct;
	DWORD           dwFlags;
	HWND            hWndOwner;
	LPCSTR          lpszCaption;
	LPFNOLEUIHOOK   lpfnHook;
	LPARAM          lCustData;
	HINSTANCE       hInstance;
	LPCSTR          lpszTemplate;
	HRSRC           hResource;


	CLSID           clsid;
	CLSID           clsidConvertDefault;
	CLSID           clsidActivateDefault;

	CLSID           clsidNew;
	DWORD           dvAspect;

	WORD            wFormat;
	BOOL            fIsLinkedObject;
	HGLOBAL         hMetaPict;
	LPSTR           lpszUserType;


	BOOL            fObjectsIconChanged;
	LPSTR           lpszDefLabel;






	UINT            cClsidExclude;
	LPCLSID         lpClsidExclude;
	} OLEUICONVERT, *POLEUICONVERT,  _far *LPOLEUICONVERT;



 extern UINT  __export  _far   _pascal   OleUIConvert(LPOLEUICONVERT);



 extern BOOL  __export  _far   _pascal   OleUICanConvertOrActivateAs(
		const CLSID  _far*  const    rClsid,
		BOOL        fIsLinkedObject,
		WORD        wFormat
);































#line 759
typedef struct tagOLEUIBUSY
	{

	DWORD           cbStruct;
	DWORD           dwFlags;
	HWND            hWndOwner;
	LPCSTR          lpszCaption;
	LPFNOLEUIHOOK   lpfnHook;
	LPARAM          lCustData;
	HINSTANCE       hInstance;
	LPCSTR          lpszTemplate;
	HRSRC           hResource;


	HTASK           hTask;
	HWND  _far *      lphWndDialog;
	} OLEUIBUSY, *POLEUIBUSY,  _far *LPOLEUIBUSY;


 extern UINT  __export  _far   _pascal   OleUIBusy(LPOLEUIBUSY);

































#line 851
int  _export  _far  _cdecl OleUIPromptUser(WORD nTemplate, HWND hwndParent, ...);






 extern BOOL  __export  _far   _pascal   OleUIUpdateLinks(
		IOleUILinkContainer  _far*  lpOleUILinkCntr,
		HWND hwndParent,
		LPSTR lpszTitle,
		int cLinks);








#line 880
 extern void  __export  _far   _pascal   OleUIDrawHandles(LPRECT lpRect, HDC hdc, DWORD dwFlags, UINT cSize, BOOL fDraw);
 extern void  __export  _far   _pascal   OleUIDrawShading(LPRECT lpRect, HDC hdc, DWORD dwFlags, UINT cWidth);
 extern void  __export  _far   _pascal   OleUIShowObject(LPCRECT lprc, HDC hdc, BOOL fIsLink);




#line 890
 extern BOOL  __export  _far   _pascal   RegisterHatchWindowClass(HINSTANCE hInst);
 extern HWND  __export  _far   _pascal   CreateHatchWindow(HWND hWndParent, HINSTANCE hInst);
 extern UINT  __export  _far   _pascal   GetHatchWidth(HWND hWndHatch);
 extern void  __export  _far   _pascal   GetHatchRect(HWND hWndHatch, LPRECT lpHatchRect);
 extern void  __export  _far   _pascal   SetHatchRect(HWND hWndHatch, LPRECT lprcHatchRect);
 extern void  __export  _far   _pascal   SetHatchWindowSize(
		HWND        hWndHatch,
		LPRECT      lprcIPObjRect,
		LPRECT      lprcClipRect,
		LPPOINT     lpptOffset
);


















#line 18 "C:\SC\BIN\..\INCLUDE\ole2ui.h"
#pragma pack()








#line 17 "c:\sc\samples\ole16\outline\outlrc.h"
#pragma message ("INCLUDING OUTLRC.H from " __FILE__)






















#line 75 "c:\sc\samples\ole16\outline\outline.h"






typedef struct tagSCALEFACTOR {
	ULONG       dwSxN;
	ULONG       dwSxD;
	ULONG       dwSyN;
	ULONG       dwSyD;
} SCALEFACTOR,  _far* LPSCALEFACTOR;





#line 20 "c:\sc\samples\ole16\outline\frametls.h"
#pragma message ("INCLUDING FRAMETLS.H from " __FILE__)

























































#line 177 "c:\sc\samples\ole16\outline\..\include\bttncur.h"
typedef struct tagTOOLDISPLAYDATA
	{
	UINT        uDPI;
	UINT        cyBar;
	UINT        cxButton;
	UINT        cyButton;
	UINT        cxImage;
	UINT        cyImage;
	UINT        uIDImages;
	} TOOLDISPLAYDATA,  _far *LPTOOLDISPLAYDATA;




HCURSOR _far  _pascal UICursorLoad(UINT);
BOOL    _far  _pascal UIToolConfigureForDisplay(LPTOOLDISPLAYDATA);
BOOL    _far  _pascal UIToolButtonDraw(HDC, int, int, int, int, HBITMAP, int, int, int, UINT);
BOOL    _far  _pascal UIToolButtonDrawTDD(HDC, int, int, int, int, HBITMAP, int, int, int, UINT, LPTOOLDISPLAYDATA);















#line 33 "c:\sc\samples\ole16\outline\..\include\gizmobar.h"
HWND    _far  _pascal GBHwndAssociateSet(HWND, HWND);
HWND    _far  _pascal GBHwndAssociateGet(HWND);

BOOL    _far  _pascal GBGizmoAdd(HWND, UINT, UINT, UINT, UINT, UINT, LPSTR, HBITMAP, UINT, UINT);
BOOL    _far  _pascal GBGizmoRemove(HWND, UINT);

LRESULT _far  _pascal GBGizmoSendMessage(HWND, UINT, UINT, WPARAM, LPARAM);

BOOL    _far  _pascal GBGizmoShow(HWND, UINT, BOOL);
BOOL    _far  _pascal GBGizmoEnable(HWND, UINT, BOOL);
BOOL    _far  _pascal GBGizmoCheck(HWND, UINT, BOOL);
UINT    _far  _pascal GBGizmoFocusSet(HWND, UINT);
BOOL    _far  _pascal GBGizmoExist(HWND, UINT);

int     _far  _pascal GBGizmoTypeGet(HWND, UINT);

DWORD   _far  _pascal GBGizmoDataSet(HWND, UINT, DWORD);
DWORD   _far  _pascal GBGizmoDataGet(HWND, UINT);
BOOL    _far  _pascal GBGizmoNotifySet(HWND, UINT, BOOL);
BOOL    _far  _pascal GBGizmoNotifyGet(HWND, UINT);

int     _far  _pascal GBGizmoTextGet(HWND, UINT, LPSTR, UINT);
void    _far  _pascal GBGizmoTextSet(HWND, UINT, LPSTR);
UINT    _far  _pascal GBGizmoIntGet(HWND, UINT, BOOL  _far *, BOOL);
void    _far  _pascal GBGizmoIntSet(HWND, UINT, UINT, BOOL);












#line 96
typedef struct
	{
	HWND        hWndParent;
	UINT        iType;
	UINT        iGizmo;
	UINT        uID;
	UINT        dx;
	UINT        dy;
	LPSTR       pszText;
	HBITMAP     hBmp;
	UINT        iImage;
	UINT        uState;
	} CREATEGIZMO,  _far *PCREATEGIZMO;





typedef struct
	{
	UINT        iMsg;
	WPARAM      wParam;
	LPARAM      lParam;
	} GBMSG,  _far *PGBMSG;




typedef struct
	{
	LPSTR       psz;
	UINT        cch;
	} GBGETTEXT,  _far * PGBGETTEXT;





typedef struct
	{
	BOOL        fSigned;
	BOOL        fSuccess;
	} GBGETINT,  _far * PGBGETINT;





typedef struct
	{
	UINT        uValue;
	BOOL        fSigned;
	} GBSETINT,  _far * PGBSETINT;




















#line 31 "c:\sc\samples\ole16\outline\frametls.h"
typedef struct tagOUTLINEDOC  _far* LPOUTLINEDOC;





#line 49
typedef struct tagBAR{
	UINT        m_uHeight;
	HWND        m_hWnd;
	int         m_nState;
} BAR,  _far* LPBAR;

typedef struct tagFRAMETOOLS {
	HWND        m_hWndPopupPalette;
	HWND        m_hWndApp;
	UINT        m_uPopupWidth;
	HBITMAP     m_hBmp;
	BOOL        m_fInFormulaBar;
	BOOL        m_fToolsDisabled;

	BAR         m_ButtonBar;
	BAR         m_FormulaBar;

	TOOLDISPLAYDATA m_tdd;
} FRAMETOOLS,  _far* LPFRAMETOOLS;


BOOL FrameToolsRegisterClass(HINSTANCE hInst);
BOOL FrameTools_Init(LPFRAMETOOLS lpft, HWND hWndParent, HINSTANCE hInst);
void FrameTools_AttachToFrame(LPFRAMETOOLS lpft, HWND hWndFrame);
void FrameTools_AssociateDoc(LPFRAMETOOLS lpft, LPOUTLINEDOC lpOutlineDoc);
void FrameTools_Destroy(LPFRAMETOOLS lpft);
void FrameTools_Move(LPFRAMETOOLS lpft, LPRECT lprcClient);
void FrameTools_PopupTools(LPFRAMETOOLS lpft);
void FrameTools_Enable(LPFRAMETOOLS lpft, BOOL fEnable);
void FrameTools_EnableWindow(LPFRAMETOOLS lpft, BOOL fEnable);


#line 88
void FrameTools_GetRequiredBorderSpace(LPFRAMETOOLS lpft, LPBORDERWIDTHS lpBorderWidths);

void FrameTools_UpdateButtons(LPFRAMETOOLS lpft, LPOUTLINEDOC lpOutlineDoc);
void FrameTools_FB_SetEditText(LPFRAMETOOLS lpft, LPSTR lpsz);
void FrameTools_FB_GetEditText(LPFRAMETOOLS lpft, LPSTR lpsz, UINT cch);
void FrameTools_FB_FocusEdit(LPFRAMETOOLS lpft);
void FrameTools_FB_SendMessage(LPFRAMETOOLS lpft, UINT uID, UINT msg, WPARAM wParam, LPARAM lParam);
void FrameTools_ForceRedraw(LPFRAMETOOLS lpft);
void FrameTools_BB_SetState(LPFRAMETOOLS lpft, int nState);
void FrameTools_FB_SetState(LPFRAMETOOLS lpft, int nState);
int FrameTools_BB_GetState(LPFRAMETOOLS lpft);
int FrameTools_FB_GetState(LPFRAMETOOLS lpft);
LRESULT  _far  _pascal FrameToolsWndProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam);












#line 25 "c:\sc\samples\ole16\outline\heading.h"
typedef struct tagCOLHEADING {
	HWND m_hWnd;
	UINT m_uHeight;
} COLHEADING,  _far* LPCOLHEADING;

typedef struct tagROWHEADING {
	HWND m_hWnd;
	UINT m_uWidth;
	FARPROC    m_WndProc;
} ROWHEADING,  _far* LPROWHEADING;

typedef struct tagHEADING {
	COLHEADING m_colhead;
	ROWHEADING m_rowhead;
	HWND       m_hwndButton;
	BOOL       m_fShow;
	HFONT      m_hfont;
} HEADING,  _far* LPHEADING;

BOOL Heading_Create(LPHEADING lphead, HWND hWndParent, HINSTANCE hInst);
void Heading_Destroy(LPHEADING lphead);
void Heading_Move(LPHEADING lphead, HWND hwndListBox, LPSCALEFACTOR lpscale);
void Heading_Show(LPHEADING lphead, BOOL fShow);
void Heading_ReScale(LPHEADING lphead, LPSCALEFACTOR lpscale);
void Heading_CH_Draw(LPHEADING lphead, LPDRAWITEMSTRUCT lpdis, LPRECT lprcScreen, LPRECT lprcObject);
void Heading_CH_SetHorizontalExtent(LPHEADING lphead, HWND hwndListBox);
UINT Heading_CH_GetHeight(LPHEADING lphead, LPSCALEFACTOR lpscale);
LRESULT Heading_CH_SendMessage(LPHEADING lphead, UINT msg, WPARAM wParam, LPARAM lParam);
void Heading_CH_ForceRedraw(LPHEADING lphead, BOOL fErase);
void Heading_RH_ForceRedraw(LPHEADING lphead, BOOL fErase);
void Heading_RH_Draw(LPHEADING lphead, LPDRAWITEMSTRUCT lpdis);
LRESULT Heading_RH_SendMessage(LPHEADING lphead, UINT msg, WPARAM wParam, LPARAM lParam);
UINT Heading_RH_GetWidth(LPHEADING lphead, LPSCALEFACTOR lpscale);
void Heading_RH_Scroll(LPHEADING lphead, HWND hwndListBox);
#line 93 "c:\sc\samples\ole16\outline\outline.h"
LRESULT  _far  _pascal RowHeadWndProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam);

















#line 126
typedef struct tagOUTLINEDOC  _far* LPOUTLINEDOC;
typedef struct tagTEXTLINE  _far* LPTEXTLINE;


typedef enum tagLINETYPE {
	UNKNOWNLINETYPE,
	TEXTLINETYPE,
	CONTAINERLINETYPE
} LINETYPE;




#line 150
typedef struct tagLINE {
	LINETYPE    m_lineType;
	UINT        m_nTabLevel;
	UINT        m_nTabWidthInHimetric;
	UINT        m_nWidthInHimetric;
	UINT        m_nHeightInHimetric;
	BOOL        m_fSelected;


	BOOL        m_fDragOverLine;

} LINE,  _far* LPLINE;


void Line_Init(LPLINE lpLine, int nTab, HDC hDC);
void Line_Delete(LPLINE lpLine);
BOOL Line_CopyToDoc(LPLINE lpSrcLine, LPOUTLINEDOC lpDestDoc, int nIndex);
BOOL Line_Edit(LPLINE lpLine, HWND hWndDoc, HDC hDC);
void Line_Draw(
		LPLINE      lpLine,
		HDC         hDC,
		LPRECT      lpRect,
		LPRECT      lpRectWBounds,
		BOOL        fHighlight
);
void Line_DrawToScreen(
		LPLINE      lpLine,
		HDC         hDC,
		LPRECT      lprcPix,
		UINT        itemAction,
		UINT        itemState,
		LPRECT      lprcDevice
);
void Line_DrawSelHilight(LPLINE lpLine, HDC hDC, LPRECT lpRect, UINT itemAction, UINT itemState);
void Line_DrawFocusRect(LPLINE lpLine, HDC hDC, LPRECT lpRect, UINT itemAction, UINT itemState);
void Line_Unindent(LPLINE lpLine, HDC hDC);
void Line_Indent(LPLINE lpLine, HDC hDC);
LINETYPE Line_GetLineType(LPLINE lpLine);
UINT Line_GetTotalWidthInHimetric(LPLINE lpLine);
void Line_SetWidthInHimetric(LPLINE lpLine, int nWidth);
UINT Line_GetWidthInHimetric(LPLINE lpLine);
UINT Line_GetHeightInHimetric(LPLINE lpLine);
void Line_SetHeightInHimetric(LPLINE lpLine, int nHeight);
UINT Line_GetTabLevel(LPLINE lpLine);
int Line_GetTextLen(LPLINE lpLine);
void Line_GetTextData(LPLINE lpLine, LPSTR lpszBuf);
BOOL Line_GetOutlineData(LPLINE lpLine, LPTEXTLINE lpBuf);
int Line_CalcTabWidthInHimetric(LPLINE lpLine, HDC hDC);
BOOL Line_SaveToStg(LPLINE lpLine, UINT uFormat, LPSTORAGE lpSrcStg, LPSTORAGE lpDestStg, LPSTREAM lpLLStm, BOOL fRemember);
LPLINE Line_LoadFromStg(LPSTORAGE lpSrcStg, LPSTREAM lpLLStm, LPOUTLINEDOC lpDestDoc);
void Line_DrawDragFeedback(LPLINE lpLine, HDC hDC, LPRECT lpRect, UINT itemState );
BOOL Line_IsSelected(LPLINE lpLine);




#line 220
typedef struct tagTEXTLINE {
	LINE m_Line;

	UINT m_nLength;
	char m_szText[80 +1];
} TEXTLINE;

LPTEXTLINE TextLine_Create(HDC hDC, UINT nTab, LPSTR szText);
void TextLine_Init(LPTEXTLINE lpTextLine, int nTab, HDC hDC);
void TextLine_CalcExtents(LPTEXTLINE lpLine, HDC hDC);
void TextLine_SetHeightInHimetric(LPTEXTLINE lpTextLine, int nHeight);
void TextLine_Delete(LPTEXTLINE lpLine);
BOOL TextLine_Edit(LPTEXTLINE lpLine, HWND hWndDoc, HDC hDC);
void TextLine_Draw(
		LPTEXTLINE  lpTextLine,
		HDC         hDC,
		LPRECT      lpRect,
		LPRECT      lpRectWBounds,
		BOOL        fHighlight
);
void TextLine_DrawSelHilight(LPTEXTLINE lpTextLine, HDC hDC, LPRECT lpRect, UINT itemAction, UINT itemState);
BOOL TextLine_Copy(LPTEXTLINE lpSrcLine, LPTEXTLINE lpDestLine);
BOOL TextLine_CopyToDoc(LPTEXTLINE lpSrcLine, LPOUTLINEDOC lpDestDoc, int nIndex);
int TextLine_GetTextLen(LPTEXTLINE lpTextLine);
void TextLine_GetTextData(LPTEXTLINE lpTextLine, LPSTR lpszBuf);
BOOL TextLine_GetOutlineData(LPTEXTLINE lpTextLine, LPTEXTLINE lpBuf);
BOOL TextLine_SaveToStm(LPTEXTLINE lpLine, LPSTREAM lpLLStm);
LPLINE TextLine_LoadFromStg(LPSTORAGE lpSrcStg, LPSTREAM lpLLStm, LPOUTLINEDOC lpDestDoc);





#line 258
typedef struct tagLINERANGE {
	signed short    m_nStartLine;
	signed short    m_nEndLine;
} LINERANGE,  _far* LPLINERANGE;




#line 273
typedef struct tagOUTLINENAME {
	char            m_szName[30 +1];
	signed short    m_nStartLine;
	signed short    m_nEndLine;
} OUTLINENAME,  _far* LPOUTLINENAME;

void OutlineName_SetName(LPOUTLINENAME lpOutlineName, LPSTR lpszName);
void OutlineName_SetSel(LPOUTLINENAME lpOutlineName, LPLINERANGE lplrSel, BOOL fRangeModified);
void OutlineName_GetSel(LPOUTLINENAME lpOutlineName, LPLINERANGE lplrSel);
BOOL OutlineName_SaveToStg(LPOUTLINENAME lpOutlineName, LPLINERANGE lplrSel, UINT uFormat, LPSTREAM lpNTStm, BOOL  _far* lpfNameSaved);

BOOL OutlineName_SaveToStg(LPOUTLINENAME lpOutlineName, LPLINERANGE lplrSel, UINT uFormat, LPSTREAM lpNTStm, BOOL  _far* lpfNameSaved);
BOOL OutlineName_LoadFromStg(LPOUTLINENAME lpOutlineName, LPSTREAM lpNTStm);




#line 297
typedef struct tagOUTLINENAMETABLE {
	HWND        m_hWndListBox;
	int         m_nCount;
} OUTLINENAMETABLE,  _far* LPOUTLINENAMETABLE;


BOOL OutlineNameTable_Init(LPOUTLINENAMETABLE lpOutlineNameTable, LPOUTLINEDOC lpOutlineDoc);
void OutlineNameTable_Destroy(LPOUTLINENAMETABLE lpOutlineNameTable);
void OutlineNameTable_ClearAll(LPOUTLINENAMETABLE lpOutlineNameTable);
LPOUTLINENAME OutlineNameTable_CreateName(LPOUTLINENAMETABLE lpOutlineNameTable);
void OutlineNameTable_AddName(LPOUTLINENAMETABLE lpOutlineNameTable, LPOUTLINENAME lpOutlineName);
void OutlineNameTable_DeleteName(LPOUTLINENAMETABLE lpOutlineNameTable, int nIndex);
int OutlineNameTable_GetNameIndex(LPOUTLINENAMETABLE lpOutlineNameTable, LPOUTLINENAME lpOutlineName);
LPOUTLINENAME OutlineNameTable_GetName(LPOUTLINENAMETABLE lpOutlineNameTable, int nIndex);
LPOUTLINENAME OutlineNameTable_FindName(LPOUTLINENAMETABLE lpOutlineNameTable, LPSTR lpszName);
LPOUTLINENAME OutlineNameTable_FindNamedRange(LPOUTLINENAMETABLE lpOutlineNameTable, LPLINERANGE lplrSel);
int OutlineNameTable_GetCount(LPOUTLINENAMETABLE lpOutlineNameTable);
void OutlineNameTable_AddLineUpdate(LPOUTLINENAMETABLE lpOutlineNameTable, int nAddIndex);
void OutlineNameTable_DeleteLineUpdate(LPOUTLINENAMETABLE lpOutlineNameTable, int nDeleteIndex);
BOOL OutlineNameTable_LoadFromStg(LPOUTLINENAMETABLE lpOutlineNameTable, LPSTORAGE lpSrcStg);
BOOL OutlineNameTable_SaveSelToStg(
		LPOUTLINENAMETABLE      lpOutlineNameTable,
		LPLINERANGE             lplrSel,
		UINT                    uFormat,
		LPSTREAM                lpNTStm
);




#line 333
typedef struct tagLINELIST {
	HWND            m_hWndListBox;
	int             m_nNumLines;
	int             m_nMaxLineWidthInHimetric;
	LPOUTLINEDOC    m_lpDoc;
	LINERANGE       m_lrSaveSel;


	int             m_iDragOverLine;

} LINELIST,  _far* LPLINELIST;


BOOL LineList_Init(LPLINELIST lpLL, LPOUTLINEDOC lpOutlineDoc);
void LineList_Destroy(LPLINELIST lpLL);
void LineList_AddLine(LPLINELIST lpLL, LPLINE lpLine, int nIndex);
void LineList_DeleteLine(LPLINELIST lpLL, int nIndex);
void LineList_ReplaceLine(LPLINELIST lpLL, LPLINE lpLine, int nIndex);
int LineList_GetLineIndex(LPLINELIST lpLL, LPLINE lpLine);
LPLINE LineList_GetLine(LPLINELIST lpLL, int nIndex);
void LineList_SetFocusLine ( LPLINELIST lpLL, WORD wIndex );
BOOL LineList_GetLineRect(LPLINELIST lpLL, int nIndex, LPRECT lpRect);
int LineList_GetFocusLineIndex(LPLINELIST lpLL);
int LineList_GetCount(LPLINELIST lpLL);
BOOL LineList_SetMaxLineWidthInHimetric(
		LPLINELIST lpLL,
		int nWidthInHimetric
);
void LineList_ScrollLineIntoView(LPLINELIST lpLL, int nIndex);
int LineList_GetMaxLineWidthInHimetric(LPLINELIST lpLL);
BOOL LineList_RecalcMaxLineWidthInHimetric(
		LPLINELIST          lpLL,
		int                 nWidthInHimetric
);
void LineList_CalcSelExtentInHimetric(
		LPLINELIST          lpLL,
		LPLINERANGE         lplrSel,
		LPSIZEL             lpsizel
);
HWND LineList_GetWindow(LPLINELIST lpLL);
HDC LineList_GetDC(LPLINELIST lpLL);
void LineList_ReleaseDC(LPLINELIST lpLL, HDC hDC);
void LineList_SetLineHeight(LPLINELIST lpLL,int nIndex,int nHeightInHimetric);
void LineList_ReScale(LPLINELIST lpLL, LPSCALEFACTOR lpscale);
void LineList_SetSel(LPLINELIST lpLL, LPLINERANGE lplrSel);
int LineList_GetSel(LPLINELIST lpLL, LPLINERANGE lplrSel);
void LineList_RemoveSel(LPLINELIST lpLL);
void LineList_RestoreSel(LPLINELIST lpLL);
void LineList_SetRedraw(LPLINELIST lpLL, BOOL fEnableDraw);
void LineList_ForceRedraw(LPLINELIST lpLL, BOOL fErase);
void LineList_ForceLineRedraw(LPLINELIST lpLL, int nIndex, BOOL fErase);
int LineList_CopySelToDoc(
		LPLINELIST              lpSrcLL,
		LPLINERANGE             lplrSel,
		LPOUTLINEDOC            lpDestDoc
);
BOOL LineList_SaveSelToStg(
		LPLINELIST              lpLL,
		LPLINERANGE             lplrSel,
		UINT                    uFormat,
		LPSTORAGE               lpSrcStg,
		LPSTORAGE               lpDestStg,
		LPSTREAM                lpLLStm,
		BOOL                    fRemember
);
BOOL LineList_LoadFromStg(
		LPLINELIST              lpLL,
		LPSTORAGE               lpSrcStg,
		LPSTREAM                lpLLStm
);


void LineList_SetFocusLineFromPointl( LPLINELIST lpLL, POINTL pointl );
void LineList_SetDragOverLineFromPointl ( LPLINELIST lpLL, POINTL pointl );
void LineList_Scroll(LPLINELIST lpLL, DWORD dwScrollDir);
int LineList_GetLineIndexFromPointl(LPLINELIST lpLL, POINTL pointl);
void LineList_RestoreDragFeedback(LPLINELIST lpLL);


LRESULT  _far  _pascal LineListWndProc(
	HWND   hWnd,
	UINT   Message,
	WPARAM wParam,
	LPARAM lParam
);









#line 436
typedef struct tagOUTLINEDOC {
	LINELIST    m_LineList;
	LPOUTLINENAMETABLE m_lpNameTable;
	HWND        m_hWndDoc;
	int         m_docInitType;
	BOOL        m_fDataTransferDoc;
	CLIPFORMAT  m_cfSaveFormat;
	char        m_szFileName[256];
	LPSTR       m_lpszDocTitle;
	BOOL        m_fModified;
	UINT        m_nDisableDraw;
	SCALEFACTOR m_scale;
	int         m_nLeftMargin;
	int         m_nRightMargin;
	UINT        m_uCurrentZoom;
	UINT        m_uCurrentMargin;

	HEADING     m_heading;



	LPFRAMETOOLS m_lpFrameTools;


} OUTLINEDOC;



BOOL OutlineDoc_Init(LPOUTLINEDOC lpOutlineDoc, BOOL fDataTransferDoc);
BOOL OutlineDoc_InitNewFile(LPOUTLINEDOC lpOutlineDoc);
LPOUTLINENAMETABLE OutlineDoc_CreateNameTable(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_Destroy(LPOUTLINEDOC lpOutlineDoc);
BOOL OutlineDoc_Close(LPOUTLINEDOC lpOutlineDoc, DWORD dwSaveOption);
void OutlineDoc_ShowWindow(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_FrameWindowResized(
		LPOUTLINEDOC        lpOutlineDoc,
		LPRECT              lprcFrameRect,
		LPBORDERWIDTHS      lpFrameToolWidths
);

void OutlineDoc_ClearCommand(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_CutCommand(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_CopyCommand(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_ClearAllLines(LPOUTLINEDOC lpOutlineDoc);
LPOUTLINEDOC OutlineDoc_CreateDataTransferDoc(LPOUTLINEDOC lpSrcOutlineDoc);
void OutlineDoc_PasteCommand(LPOUTLINEDOC lpOutlineDoc);
int OutlineDoc_PasteOutlineData(LPOUTLINEDOC lpOutlineDoc, HGLOBAL hOutline, int nStartIndex);
int OutlineDoc_PasteTextData(LPOUTLINEDOC lpOutlineDoc, HGLOBAL hText, int nStartIndex);
void OutlineDoc_AddTextLineCommand(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_AddTopLineCommand(
		LPOUTLINEDOC        lpOutlineDoc,
		UINT                nHeightInHimetric
);
void OutlineDoc_EditLineCommand(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_IndentCommand(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_UnindentCommand(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_SetLineHeightCommand(LPOUTLINEDOC lpDoc);
void OutlineDoc_SelectAllCommand(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_DefineNameCommand(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_GotoNameCommand(LPOUTLINEDOC lpOutlineDoc);

void OutlineDoc_Print(LPOUTLINEDOC lpOutlineDoc, HDC hDC);
BOOL OutlineDoc_SaveToFile(LPOUTLINEDOC lpOutlineDoc, LPCSTR lpszFileName, UINT uFormat, BOOL fRemember);
void OutlineDoc_AddLine(LPOUTLINEDOC lpOutlineDoc, LPLINE lpLine, int nIndex);
void OutlineDoc_DeleteLine(LPOUTLINEDOC lpOutlineDoc, int nIndex);
void OutlineDoc_AddName(LPOUTLINEDOC lpOutlineDoc, LPOUTLINENAME lpOutlineName);
void OutlineDoc_DeleteName(LPOUTLINEDOC lpOutlineDoc, int nIndex);
void OutlineDoc_Resize(LPOUTLINEDOC lpDoc, LPRECT lpRect);
LPOUTLINENAMETABLE OutlineDoc_GetNameTable(LPOUTLINEDOC lpOutlineDoc);
LPLINELIST OutlineDoc_GetLineList(LPOUTLINEDOC lpOutlineDoc);
int OutlineDoc_GetNameCount(LPOUTLINEDOC lpOutlineDoc);
int OutlineDoc_GetLineCount(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_SetTitle(LPOUTLINEDOC lpOutlineDoc, BOOL fMakeUpperCase);
BOOL OutlineDoc_CheckSaveChanges(
		LPOUTLINEDOC        lpOutlineDoc,
		LPDWORD             lpdwSaveOption
);
BOOL OutlineDoc_IsModified(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_SetModified(LPOUTLINEDOC lpOutlineDoc, BOOL fModified, BOOL fDataChanged, BOOL fSizeChanged);
void OutlineDoc_SetRedraw(LPOUTLINEDOC lpOutlineDoc, BOOL fEnableDraw);
BOOL OutlineDoc_LoadFromFile(LPOUTLINEDOC lpOutlineDoc, LPSTR szFileName);
BOOL OutlineDoc_SaveSelToStg(
		LPOUTLINEDOC        lpOutlineDoc,
		LPLINERANGE         lplrSel,
		UINT                uFormat,
		LPSTORAGE           lpDestStg,
		BOOL                fSameAsLoad,
		BOOL                fRemember
);
BOOL OutlineDoc_LoadFromStg(LPOUTLINEDOC lpOutlineDoc, LPSTORAGE lpSrcStg);
BOOL OutlineDoc_SetFileName(LPOUTLINEDOC lpOutlineDoc, LPSTR lpszFileName, LPSTORAGE lpNewStg);
HWND OutlineDoc_GetWindow(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_SetSel(LPOUTLINEDOC lpOutlineDoc, LPLINERANGE lplrSel);
int OutlineDoc_GetSel(LPOUTLINEDOC lpOutlineDoc, LPLINERANGE lplrSel);
void OutlineDoc_ForceRedraw(LPOUTLINEDOC lpOutlineDoc, BOOL fErase);
void OutlineDoc_RenderFormat(LPOUTLINEDOC lpOutlineDoc, UINT uFormat);
void OutlineDoc_RenderAllFormats(LPOUTLINEDOC lpOutlineDoc);
HGLOBAL OutlineDoc_GetOutlineData(LPOUTLINEDOC lpOutlineDoc, LPLINERANGE lplrSel);
HGLOBAL OutlineDoc_GetTextData(LPOUTLINEDOC lpOutlineDoc, LPLINERANGE lplrSel);
void OutlineDoc_DialogHelp(HWND hDlg, WPARAM wDlgID);
void OutlineDoc_SetCurrentZoomCommand(
		LPOUTLINEDOC        lpOutlineDoc,
		UINT                uCurrentZoom
);
UINT OutlineDoc_GetCurrentZoomMenuCheck(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_SetScaleFactor(
		LPOUTLINEDOC        lpOutlineDoc,
		LPSCALEFACTOR       lpscale,
		LPRECT              lprcDoc
);
LPSCALEFACTOR OutlineDoc_GetScaleFactor(LPOUTLINEDOC lpDoc);
void OutlineDoc_SetCurrentMarginCommand(
		LPOUTLINEDOC        lpOutlineDoc,
		UINT                uCurrentMargin
);
UINT OutlineDoc_GetCurrentMarginMenuCheck(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_SetMargin(LPOUTLINEDOC lpDoc, int nLeftMargin, int nRightMargin);
LONG OutlineDoc_GetMargin(LPOUTLINEDOC lpDoc);



void OutlineDoc_AddFrameLevelTools(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_SetFormulaBarEditText(
		LPOUTLINEDOC            lpOutlineDoc,
		LPLINE                  lpLine
);
void OutlineDoc_SetFormulaBarEditFocus(
		LPOUTLINEDOC            lpOutlineDoc,
		BOOL                    fEditFocus
);
BOOL OutlineDoc_IsEditFocusInFormulaBar(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_UpdateFrameToolButtons(LPOUTLINEDOC lpOutlineDoc);



LPHEADING OutlineDoc_GetHeading(LPOUTLINEDOC lpOutlineDoc);
void OutlineDoc_ShowHeading(LPOUTLINEDOC lpOutlineDoc, BOOL fShow);





#line 583
typedef struct tagOUTLINEAPP {
	HWND            m_hWndApp;
	HMENU           m_hMenuApp;
	HACCEL          m_hAccelApp;
	HACCEL          m_hAccelFocusEdit;
	LPOUTLINEDOC    m_lpDoc;
	LPOUTLINEDOC    m_lpClipboardDoc;
	HWND            m_hWndStatusBar;
	HCURSOR         m_hcursorSelCur;
	HINSTANCE       m_hInst;
	PRINTDLG        m_PrintDlg;
	HFONT           m_hStdFont;
	UINT            m_cfOutline;
	HACCEL          m_hAccel;
	HWND            m_hWndAccelTarget;
	FARPROC         m_ListBoxWndProc;


	BORDERWIDTHS    m_FrameToolWidths;



	FRAMETOOLS      m_frametools;


} OUTLINEAPP,  _far* LPOUTLINEAPP;


BOOL OutlineApp_InitApplication(LPOUTLINEAPP lpOutlineApp, HINSTANCE hInst);
BOOL OutlineApp_InitInstance(LPOUTLINEAPP lpOutlineApp, HINSTANCE hInst, int nCmdShow);
BOOL OutlineApp_ParseCmdLine(LPOUTLINEAPP lpOutlineApp, LPSTR lpszCmdLine, int nCmdShow);
void OutlineApp_Destroy(LPOUTLINEAPP lpOutlineApp);
LPOUTLINEDOC OutlineApp_CreateDoc(
		LPOUTLINEAPP    lpOutlineApp,
		BOOL            fDataTransferDoc
);
HWND OutlineApp_GetWindow(LPOUTLINEAPP lpOutlineApp);
HWND OutlineApp_GetFrameWindow(LPOUTLINEAPP lpOutlineApp);
HINSTANCE OutlineApp_GetInstance(LPOUTLINEAPP lpOutlineApp);
LPOUTLINENAME OutlineApp_CreateName(LPOUTLINEAPP lpOutlineApp);
void OutlineApp_DocUnlockApp(LPOUTLINEAPP lpOutlineApp, LPOUTLINEDOC lpOutlineDoc);
void OutlineApp_InitMenu(LPOUTLINEAPP lpOutlineApp, LPOUTLINEDOC lpDoc, HMENU hMenu);
void OutlineApp_GetFrameRect(LPOUTLINEAPP lpOutlineApp, LPRECT lprcFrameRect);
void OutlineApp_GetClientAreaRect(
		LPOUTLINEAPP        lpOutlineApp,
		LPRECT              lprcClientAreaRect
);
void OutlineApp_GetStatusLineRect(
		LPOUTLINEAPP        lpOutlineApp,
		LPRECT              lprcStatusLineRect
);
void OutlineApp_ResizeWindows(LPOUTLINEAPP lpOutlineApp);
void OutlineApp_ResizeClientArea(LPOUTLINEAPP lpOutlineApp);
void OutlineApp_AboutCommand(LPOUTLINEAPP lpOutlineApp);
void OutlineApp_NewCommand(LPOUTLINEAPP lpOutlineApp);
void OutlineApp_OpenCommand(LPOUTLINEAPP lpOutlineApp);
void OutlineApp_PrintCommand(LPOUTLINEAPP lpOutlineApp);
BOOL OutlineApp_SaveCommand(LPOUTLINEAPP lpOutlineApp);
BOOL OutlineApp_SaveAsCommand(LPOUTLINEAPP lpOutlineApp);
BOOL OutlineApp_CloseAllDocsAndExitCommand(
		LPOUTLINEAPP        lpOutlineApp,
		BOOL                fForceEndSession
);
void OutlineApp_DestroyWindow(LPOUTLINEAPP lpOutlineApp);


void OutlineApp_SetBorderSpace(
		LPOUTLINEAPP        lpOutlineApp,
		LPBORDERWIDTHS      lpBorderWidths
);
LPFRAMETOOLS OutlineApp_GetFrameTools(LPOUTLINEAPP lpOutlineApp);
void OutlineApp_SetFormulaBarAccel(
		LPOUTLINEAPP            lpOutlineApp,
		BOOL                    fEditFocus
);


void OutlineApp_SetStatusText(LPOUTLINEAPP lpOutlineApp, LPSTR lpszMessage);
LPOUTLINEDOC OutlineApp_GetActiveDoc(LPOUTLINEAPP lpOutlineApp);
HMENU OutlineApp_GetMenu(LPOUTLINEAPP lpOutlineApp);
HFONT OutlineApp_GetActiveFont(LPOUTLINEAPP lpOutlineApp);
HDC OutlineApp_GetPrinterDC(LPOUTLINEAPP lpApp);
void OutlineApp_PrinterSetupCommand(LPOUTLINEAPP lpOutlineApp);
void OutlineApp_ErrorMessage(LPOUTLINEAPP lpOutlineApp, LPSTR lpszMsg);
void OutlineApp_GetAppVersionNo(LPOUTLINEAPP lpOutlineApp, int narrAppVersionNo[]);
void OutlineApp_GetAppName(LPOUTLINEAPP lpOutlineApp, LPSTR lpszAppName);
BOOL OutlineApp_VersionNoCheck(LPOUTLINEAPP lpOutlineApp, LPSTR lpszAppName, int narrAppVersionNo[]);
void OutlineApp_SetEditText(LPOUTLINEAPP lpApp);
void OutlineApp_SetFocusEdit(LPOUTLINEAPP lpApp, BOOL bFocusEdit);
BOOL OutlineApp_GetFocusEdit(LPOUTLINEAPP lpApp);
void OutlineApp_ForceRedraw(LPOUTLINEAPP lpOutlineApp, BOOL fErase);



typedef struct tagOUTLINEDOCHEADER {
	char        m_szFormatName[32];
	int         m_narrAppVersionNo[2];
	BOOL        m_fShowHeading;
	DWORD       m_reserved1;
	DWORD       m_reserved2;
	DWORD       m_reserved3;
	DWORD       m_reserved4;
} OUTLINEDOCHEADER,  _far* LPOUTLINEDOCHEADER;

typedef struct tagLINELISTHEADER {
	int         m_nNumLines;
	DWORD       m_reserved1;
	DWORD       m_reserved2;
} LINELISTHEADER,  _far* LPLINELISTHEADER;

typedef struct tagLINERECORD {
	LINETYPE    m_lineType;
	UINT        m_nTabLevel;
	UINT        m_nTabWidthInHimetric;
	UINT        m_nWidthInHimetric;
	UINT        m_nHeightInHimetric;
	DWORD       m_reserved;
} LINERECORD,  _far* LPLINERECORD;



int  _pascal WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
						LPSTR lpszCmdLine, int nCmdShow);
BOOL MyTranslateAccelerator(LPMSG lpmsg);
int GetAccelItemCount(HACCEL hAccel);

LRESULT _far  _pascal  _export AppWndProc(HWND hWnd, UINT Message, WPARAM wParam,
						LPARAM lParam);
LRESULT _far  _pascal  _export DocWndProc(HWND hWnd, UINT Message, WPARAM wParam,
						LPARAM lParam);


BOOL InputTextDlg(HWND hWnd, LPSTR lpszText, LPSTR lpszDlgTitle);
BOOL _far  _pascal  _export AddEditDlgProc(HWND, UINT, WPARAM, LPARAM);
BOOL _far  _pascal  _export SetLineHeightDlgProc(HWND hDlg, UINT Message, WPARAM wParam, LPARAM lParam);
BOOL _far  _pascal  _export DefineNameDlgProc(HWND, UINT, WPARAM, LPARAM);
BOOL _far  _pascal  _export GotoNameDlgProc(HWND, UINT, WPARAM, LPARAM);
void NameDlg_LoadComboBox(LPOUTLINENAMETABLE lpOutlineNameTable,HWND hCombo);
void NameDlg_LoadListBox(LPOUTLINENAMETABLE lpOutlineNameTable,HWND hListBox);
void NameDlg_AddName(HWND hCombo, LPOUTLINEDOC lpOutlineDoc, LPSTR lpszName, LPLINERANGE lplrSel);
void NameDlg_UpdateName(HWND hCombo, LPOUTLINEDOC lpOutlineDoc, int nIndex, LPSTR lpszName, LPLINERANGE lplrSel);
void NameDlg_DeleteName(HWND hCombo, LPOUTLINEDOC lpOutlineDoc, UINT nIndex);
BOOL _far  _pascal  _export AboutDlgProc(HWND hDlg, UINT Message, WPARAM wParam, LPARAM lParam);


LPVOID New(DWORD lSize);
void Delete(LPVOID p);


BOOL _far  _pascal  _export AbortProc (HDC hdc, WORD reserved);
BOOL _far  _pascal  _export PrintDlgProc(HWND hwnd, WORD msg, WORD wParam, LONG lParam);


void SetDebugLevelCommand(void);
void TraceDebug(HWND, int);




#line 23 "c:\sc\samples\ole16\outline\oleoutl.h"
#pragma message ("INCLUDING OLEOUTL.H from " __FILE__)

#pragma warning (error:4047)





#line 20 "c:\sc\samples\ole16\outline\..\include\msgfiltr.h"
#pragma message ("INCLUDING MSGFILTR.H from " __FILE__)



typedef BOOL (_far  _pascal* MSGPENDINGPROC)(MSG  _far *);


typedef DWORD (_far  _pascal* HANDLEINCOMINGCALLBACKPROC)
	(
		DWORD               dwCallType,
		HTASK               htaskCaller,
		DWORD               dwTickCount,
		LPINTERFACEINFO     lpInterfaceInfo
	);


 extern LPMESSAGEFILTER  __export  _far   _pascal   OleStdMsgFilter_Create(
		HWND hWndParent,
		LPSTR szAppName,
		MSGPENDINGPROC lpfnCallback,
		LPFNOLEUIHOOK  lpfnOleUIHook
);

 extern void  __export  _far   _pascal   OleStdMsgFilter_SetInComingCallStatus(
		LPMESSAGEFILTER lpThis, DWORD dwInComingCallStatus);

 extern DWORD  __export  _far   _pascal   OleStdMsgFilter_GetInComingCallStatus(
		LPMESSAGEFILTER lpThis);

 extern HANDLEINCOMINGCALLBACKPROC  __export  _far   _pascal
	OleStdMsgFilter_SetHandleInComingCallbackProc(
		LPMESSAGEFILTER             lpThis,
		HANDLEINCOMINGCALLBACKPROC  lpfnHandleInComingCallback);

 extern BOOL  __export  _far   _pascal   OleStdMsgFilter_EnableBusyDialog(
		LPMESSAGEFILTER lpThis, BOOL fEnable);

 extern BOOL  __export  _far   _pascal   OleStdMsgFilter_EnableNotRespondingDialog(
		LPMESSAGEFILTER lpThis, BOOL fEnable);

 extern HWND  __export  _far   _pascal   OleStdMsgFilter_SetParentWindow(
		LPMESSAGEFILTER lpThis, HWND hWndParent);















#line 36 "c:\sc\samples\ole16\outline\defguid.h"
 extern const GUID  _cdecl  _far CLSID_SvrOutl ;
 extern const GUID  _cdecl  _far CLSID_CntrOutl ;
 extern const GUID  _cdecl  _far CLSID_ISvrOtl ;
 extern const GUID  _cdecl  _far CLSID_ICntrOtl ;


 extern const GUID  _cdecl  _far IID_IOleUILinkContainer ;




























#line 110 "c:\sc\samples\ole16\outline\oleoutl.h"
typedef struct tagOLEAPP  _far* LPOLEAPP;
typedef struct tagOLEDOC  _far* LPOLEDOC;



typedef enum tagGETMONIKERTYPE {
	GETMONIKER_ONLYIFTHERE  = 1,
	GETMONIKER_FORCEASSIGN  = 2,
	GETMONIKER_UNASSIGN     = 3,
	GETMONIKER_TEMPFORUSER  = 4
} GETMONIKERTYPE;


typedef enum tagSCROLLDIR {
	SCROLLDIR_NULL          = 0,
	SCROLLDIR_UP            = 1,
	SCROLLDIR_DOWN          = 2,
	SCROLLDIR_RIGHT         = 3,
	SCROLLDIR_LEFT          = 4
} SCROLLDIR;




#line 150
typedef struct tagOLEDOC {
	OUTLINEDOC      m_OutlineDoc;
	ULONG           m_cRef;
	ULONG           m_dwStrongExtConn;






	ULONG           m_cCntrLock;


	LPSTORAGE       m_lpStg;


	LPSTREAM        m_lpLLStm;

	LPSTREAM        m_lpNTStm;

	BOOL            m_fObjIsClosing;
	BOOL            m_fObjIsDestroying;
	DWORD           m_dwRegROT;
	LPMONIKER       m_lpFileMoniker;
	BOOL            m_fLinkSourceAvail;
	LPOLEDOC        m_lpSrcDocOfCopy;
	BOOL            m_fUpdateEditMenu;


	DWORD           m_dwTimeEnterScrollArea;
	DWORD           m_dwLastScrollDir;
	DWORD           m_dwNextScrollTime;
	BOOL            m_fRegDragDrop;
	BOOL            m_fLocalDrag;
	BOOL            m_fLocalDrop;
	BOOL            m_fCanDropCopy;
	BOOL            m_fCanDropLink;
	BOOL            m_fDragLeave;
	BOOL            m_fPendingDrag;
	POINT           m_ptButDown;



#line 196
	struct CDocUnknownImpl {
		IUnknownVtbl  _far*       lpVtbl;
		LPOLEDOC                lpOleDoc;
		int                     cRef;
	} m_Unknown;

	struct CDocPersistFileImpl {
		IPersistFileVtbl  _far*   lpVtbl;
		LPOLEDOC                lpOleDoc;
		int                     cRef;
	} m_PersistFile;

	struct CDocOleItemContainerImpl {
		IOleItemContainerVtbl  _far*  lpVtbl;
		LPOLEDOC                    lpOleDoc;
		int                         cRef;
	} m_OleItemContainer;

	struct CDocExternalConnectionImpl {
		IExternalConnectionVtbl  _far* lpVtbl;
		LPOLEDOC                lpOleDoc;
		int                     cRef;
	} m_ExternalConnection;

	struct CDocDataObjectImpl {
		IDataObjectVtbl  _far*        lpVtbl;
		LPOLEDOC                    lpOleDoc;
		int                         cRef;
	} m_DataObject;


	struct CDocDropSourceImpl {
		IDropSourceVtbl  _far*    lpVtbl;
		LPOLEDOC                lpOleDoc;
		int                     cRef;
	} m_DropSource;

	struct CDocDropTargetImpl {
		IDropTargetVtbl  _far*    lpVtbl;
		LPOLEDOC                lpOleDoc;
		int                     cRef;
	} m_DropTarget;


} OLEDOC;


BOOL OleDoc_Init(LPOLEDOC lpOleDoc, BOOL fDataTransferDoc);
BOOL OleDoc_InitNewFile(LPOLEDOC lpOleDoc);
void OleDoc_ShowWindow(LPOLEDOC lpOleDoc);
void OleDoc_HideWindow(LPOLEDOC lpOleDoc, BOOL fShutDown);
HRESULT OleDoc_Lock(LPOLEDOC lpOleDoc, BOOL fLock, BOOL fLastUnlockReleases);
ULONG OleDoc_AddRef(LPOLEDOC lpOleDoc);
ULONG OleDoc_Release (LPOLEDOC lpOleDoc);
HRESULT OleDoc_QueryInterface(
		LPOLEDOC          lpOleDoc,
		const IID  _far*  const            riid,
		LPVOID  _far*       lplpUnk
);
BOOL OleDoc_Close(LPOLEDOC lpOleDoc, DWORD dwSaveOption);
void OleDoc_Destroy(LPOLEDOC lpOleDoc);
void OleDoc_SetUpdateEditMenuFlag(LPOLEDOC lpOleDoc, BOOL fUpdate);
BOOL OleDoc_GetUpdateEditMenuFlag(LPOLEDOC lpOleDoc);
void OleDoc_GetExtent(LPOLEDOC lpOleDoc, LPSIZEL lpsizel);
HGLOBAL OleDoc_GetObjectDescriptorData(
		LPOLEDOC            lpOleDoc,
		LPLINERANGE         lplrSel
);
LPMONIKER OleDoc_GetFullMoniker(LPOLEDOC lpOleDoc, DWORD dwAssign);
void OleDoc_GetExtent(LPOLEDOC lpOleDoc, LPSIZEL lpsizel);
void OleDoc_DocRenamedUpdate(LPOLEDOC lpOleDoc, LPMONIKER lpmkDoc);
void OleDoc_CopyCommand(LPOLEDOC lpSrcOleDoc);
void OleDoc_PasteCommand(LPOLEDOC lpOleDoc);
void OleDoc_PasteSpecialCommand(LPOLEDOC lpOleDoc);
LPOUTLINEDOC OleDoc_CreateDataTransferDoc(LPOLEDOC lpSrcOleDoc);
BOOL OleDoc_PasteFromData(
		LPOLEDOC            lpOleDoc,
		LPDATAOBJECT        lpSrcDataObj,
		BOOL                fLocalDataObj,
		BOOL                fLink
);
BOOL OleDoc_PasteFormatFromData(
		LPOLEDOC            lpOleDoc,
		CLIPFORMAT          cfFormat,
		LPDATAOBJECT        lpSrcDataObj,
		BOOL                fLocalDataObj,
		BOOL                fLink,
		BOOL                fDisplayAsIcon,
		HGLOBAL             hMetaPict,
		LPSIZEL             lpSizelInSrc
);
BOOL OleDoc_QueryPasteFromData(
		LPOLEDOC            lpOleDoc,
		LPDATAOBJECT        lpSrcDataObj,
		BOOL                fLink
);



BOOL OleDoc_QueryDrag( LPOLEDOC lpOleDoc, int y );
BOOL OleDoc_QueryDrop (
	LPOLEDOC        lpOleDoc,
	DWORD           grfKeyState,
	POINTL          pointl,
	BOOL            fDragScroll,
	LPDWORD         lpdwEffect
);
DWORD OleDoc_DoDragDrop (LPOLEDOC lpSrcOleDoc);
BOOL OleDoc_DoDragScroll(LPOLEDOC lpOleDoc, POINTL pointl);




HRESULT  __export  _far   _cdecl   OleDoc_Unk_QueryInterface(
		LPUNKNOWN           lpThis,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvObj
);
ULONG  __export  _far   _cdecl   OleDoc_Unk_AddRef(LPUNKNOWN lpThis);
ULONG  __export  _far   _cdecl   OleDoc_Unk_Release (LPUNKNOWN lpThis);


HRESULT  __export  _far   _cdecl   OleDoc_PFile_QueryInterface(
		LPPERSISTFILE       lpThis,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvObj
);
ULONG  __export  _far   _cdecl   OleDoc_PFile_AddRef(LPPERSISTFILE lpThis);
ULONG  __export  _far   _cdecl   OleDoc_PFile_Release (LPPERSISTFILE lpThis);
HRESULT  __export  _far   _cdecl   OleDoc_PFile_GetClassID (
		LPPERSISTFILE       lpThis,
		CLSID  _far*          lpclsid
);
HRESULT  __export  _far   _cdecl    OleDoc_PFile_IsDirty(LPPERSISTFILE lpThis);
HRESULT  __export  _far   _cdecl   OleDoc_PFile_Load (
		LPPERSISTFILE       lpThis,
		LPCSTR              lpszFileName,
		DWORD               grfMode
);
HRESULT  __export  _far   _cdecl   OleDoc_PFile_Save (
		LPPERSISTFILE       lpThis,
		LPCSTR              lpszFileName,
		BOOL                fRemember
);
HRESULT  __export  _far   _cdecl   OleDoc_PFile_SaveCompleted (
		LPPERSISTFILE       lpThis,
		LPCSTR              lpszFileName
);
HRESULT  __export  _far   _cdecl   OleDoc_PFile_GetCurFile (
		LPPERSISTFILE   lpThis,
		LPSTR  _far*      lplpszFileName
);


HRESULT  __export  _far   _cdecl   OleDoc_ItemCont_QueryInterface(
		LPOLEITEMCONTAINER  lpThis,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvObj
);
ULONG  __export  _far   _cdecl   OleDoc_ItemCont_AddRef(LPOLEITEMCONTAINER lpThis);
ULONG  __export  _far   _cdecl   OleDoc_ItemCont_Release(LPOLEITEMCONTAINER lpThis);
HRESULT  __export  _far   _cdecl   OleDoc_ItemCont_ParseDisplayName(
		LPOLEITEMCONTAINER  lpThis,
		LPBC                lpbc,
		LPSTR               lpszDisplayName,
		ULONG  _far*          lpchEaten,
		LPMONIKER  _far*      lplpmkOut
);

HRESULT  __export  _far   _cdecl   OleDoc_ItemCont_EnumObjects(
		LPOLEITEMCONTAINER  lpThis,
		DWORD               grfFlags,
		LPENUMUNKNOWN  _far*  lplpenumUnknown
);
HRESULT  __export  _far   _cdecl   OleDoc_ItemCont_LockContainer(
		LPOLEITEMCONTAINER  lpThis,
		BOOL                fLock
);
HRESULT  __export  _far   _cdecl   OleDoc_ItemCont_GetObject(
		LPOLEITEMCONTAINER  lpThis,
		LPSTR               lpszItem,
		DWORD               dwSpeedNeeded,
		LPBINDCTX           lpbc,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvObject
);
HRESULT  __export  _far   _cdecl   OleDoc_ItemCont_GetObjectStorage(
		LPOLEITEMCONTAINER  lpThis,
		LPSTR               lpszItem,
		LPBINDCTX           lpbc,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvStorage
);
HRESULT  __export  _far   _cdecl   OleDoc_ItemCont_IsRunning(
		LPOLEITEMCONTAINER  lpThis,
		LPSTR               lpszItem
);


HRESULT  __export  _far   _cdecl   OleDoc_ExtConn_QueryInterface(
		LPEXTERNALCONNECTION    lpThis,
		const IID  _far*  const                  riid,
		LPVOID  _far*             lplpvObj
);
ULONG  __export  _far   _cdecl   OleDoc_ExtConn_AddRef(LPEXTERNALCONNECTION lpThis);
ULONG  __export  _far   _cdecl   OleDoc_ExtConn_Release (LPEXTERNALCONNECTION lpThis);
DWORD  __export  _far   _cdecl   OleDoc_ExtConn_AddConnection(
		LPEXTERNALCONNECTION    lpThis,
		DWORD                   extconn,
		DWORD                   reserved
);
DWORD  __export  _far   _cdecl   OleDoc_ExtConn_ReleaseConnection(
		LPEXTERNALCONNECTION    lpThis,
		DWORD                   extconn,
		DWORD                   reserved,
		BOOL                    fLastReleaseCloses
);


HRESULT  __export  _far   _cdecl   OleDoc_DataObj_QueryInterface (
		LPDATAOBJECT        lpThis,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvObj
);
ULONG  __export  _far   _cdecl   OleDoc_DataObj_AddRef(LPDATAOBJECT lpThis);
ULONG  __export  _far   _cdecl   OleDoc_DataObj_Release (LPDATAOBJECT lpThis);
HRESULT  __export  _far   _cdecl   OleDoc_DataObj_GetData (
		LPDATAOBJECT        lpThis,
		LPFORMATETC         lpFormatetc,
		LPSTGMEDIUM         lpMedium
);
HRESULT  __export  _far   _cdecl   OleDoc_DataObj_GetDataHere (
		LPDATAOBJECT        lpThis,
		LPFORMATETC         lpFormatetc,
		LPSTGMEDIUM         lpMedium
);
HRESULT  __export  _far   _cdecl   OleDoc_DataObj_QueryGetData (
		LPDATAOBJECT        lpThis,
		LPFORMATETC         lpFormatetc
);
HRESULT  __export  _far   _cdecl   OleDoc_DataObj_GetCanonicalFormatEtc(
		LPDATAOBJECT        lpThis,
		LPFORMATETC         lpformatetc,
		LPFORMATETC         lpformatetcOut
);
HRESULT  __export  _far   _cdecl   OleDoc_DataObj_SetData (
		LPDATAOBJECT    lpThis,
		LPFORMATETC     lpFormatetc,
		LPSTGMEDIUM     lpMedium,
		BOOL            fRelease
);
HRESULT  __export  _far   _cdecl   OleDoc_DataObj_EnumFormatEtc(
		LPDATAOBJECT            lpThis,
		DWORD                   dwDirection,
		LPENUMFORMATETC  _far*    lplpenumFormatEtc
);
HRESULT  __export  _far   _cdecl   OleDoc_DataObj_DAdvise(
		LPDATAOBJECT        lpThis,
		FORMATETC  _far*      lpFormatetc,
		DWORD               advf,
		LPADVISESINK        lpAdvSink,
		DWORD  _far*          lpdwConnection
);
HRESULT  __export  _far   _cdecl   OleDoc_DataObj_DUnadvise(LPDATAOBJECT lpThis,DWORD dwConnection);
HRESULT  __export  _far   _cdecl   OleDoc_DataObj_EnumDAdvise(
		LPDATAOBJECT        lpThis,
		LPENUMSTATDATA  _far* lplpenumAdvise
);





HRESULT  __export  _far   _cdecl   OleDoc_DropSource_QueryInterface(
	LPDROPSOURCE            lpThis,
	const IID  _far*  const                  riid,
	LPVOID  _far*             lplpvObj
);
ULONG  __export  _far   _cdecl   OleDoc_DropSource_AddRef( LPDROPSOURCE lpThis );
ULONG  __export  _far   _cdecl   OleDoc_DropSource_Release ( LPDROPSOURCE lpThis);
HRESULT  __export  _far   _cdecl      OleDoc_DropSource_QueryContinueDrag (
	LPDROPSOURCE            lpThis,
	BOOL                    fEscapePressed,
	DWORD                   grfKeyState
);
HRESULT  __export  _far   _cdecl      OleDoc_DropSource_GiveFeedback (
	LPDROPSOURCE            lpThis,
	DWORD                   dwEffect
);


HRESULT  __export  _far   _cdecl   OleDoc_DropTarget_QueryInterface(
		LPDROPTARGET        lpThis,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvObj
);
ULONG  __export  _far   _cdecl   OleDoc_DropTarget_AddRef(LPDROPTARGET lpThis);
ULONG  __export  _far   _cdecl   OleDoc_DropTarget_Release ( LPDROPTARGET lpThis);
HRESULT  __export  _far   _cdecl      OleDoc_DropTarget_DragEnter (
	LPDROPTARGET            lpThis,
	LPDATAOBJECT            lpDataObj,
	DWORD                   grfKeyState,
	POINTL                  pointl,
	LPDWORD                 lpdwEffect
);
HRESULT  __export  _far   _cdecl      OleDoc_DropTarget_DragOver (
	LPDROPTARGET            lpThis,
	DWORD                   grfKeyState,
	POINTL                  pointl,
	LPDWORD                 lpdwEffect
);
HRESULT  __export  _far   _cdecl      OleDoc_DropTarget_DragLeave ( LPDROPTARGET lpThis);
HRESULT  __export  _far   _cdecl      OleDoc_DropTarget_Drop (
	LPDROPTARGET            lpThis,
	LPDATAOBJECT            lpDataObj,
	DWORD                   grfKeyState,
	POINTL                  pointl,
	LPDWORD                 lpdwEffect
);






#line 536
typedef struct tagAPPCLASSFACTORY {
	IClassFactoryVtbl  _far*  m_lpVtbl;
	UINT                    m_cRef;

	LONG                    m_cSvrLock;


 } APPCLASSFACTORY,  _far* LPAPPCLASSFACTORY;


LPCLASSFACTORY _far  _pascal AppClassFactory_Create(void);


HRESULT  __export  _far   _cdecl   AppClassFactory_QueryInterface(
		LPCLASSFACTORY lpThis, const IID  _far*  const riid, LPVOID  _far* ppvObj);
ULONG  __export  _far   _cdecl   AppClassFactory_AddRef(LPCLASSFACTORY lpThis);
ULONG  __export  _far   _cdecl   AppClassFactory_Release(LPCLASSFACTORY lpThis);
HRESULT  __export  _far   _cdecl   AppClassFactory_CreateInstance (
		LPCLASSFACTORY      lpThis,
		LPUNKNOWN           lpUnkOuter,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvObj
);
HRESULT  __export  _far   _cdecl   AppClassFactory_LockServer (
		LPCLASSFACTORY      lpThis,
		BOOL                fLock
);




#line 582
typedef struct tagOLEAPP {
	OUTLINEAPP  m_OutlineApp;
	ULONG       m_cRef;
	ULONG       m_cDoc;
	BOOL        m_fUserCtrl;
	DWORD       m_dwRegClassFac;
	LPCLASSFACTORY m_lpClassFactory;

	LPMESSAGEFILTER m_lpMsgFilter;
	MSGPENDINGPROC m_lpfnMsgPending;

	BOOL        m_fOleInitialized;
	UINT        m_cModalDlgActive;
	UINT        m_cfEmbedSource;
	UINT        m_cfEmbeddedObject;
	UINT        m_cfLinkSource;
	UINT        m_cfObjectDescriptor;
	UINT        m_cfLinkSrcDescriptor;
	UINT        m_cfFileName;
	FORMATETC   m_arrDocGetFmts[10 ];
	UINT        m_nDocGetFmts;

	OLEUIPASTEENTRY m_arrPasteEntries[10 ];
	int         m_nPasteEntries;
	UINT        m_arrLinkTypes[3 ];
	int         m_nLinkTypes;


	int m_nDragDelay;
	int m_nDragMinDist;
	int m_nScrollDelay;
	int m_nScrollInset;
	int m_nScrollInterval;




#line 626
	HPALETTE    m_hStdPal;










	struct CAppUnknownImpl {
		IUnknownVtbl  _far*       lpVtbl;
		LPOLEAPP                lpOleApp;
		int                     cRef;
	} m_Unknown;

} OLEAPP;


BOOL OleApp_InitInstance(LPOLEAPP lpOleApp, HINSTANCE hInst, int nCmdShow);
void OleApp_TerminateApplication(LPOLEAPP lpOleApp);
BOOL OleApp_ParseCmdLine(LPOLEAPP lpOleApp, LPSTR lpszCmdLine, int nCmdShow);
void OleApp_Destroy(LPOLEAPP lpOleApp);
BOOL OleApp_CloseAllDocsAndExitCommand(
		LPOLEAPP            lpOleApp,
		BOOL                fForceEndSession
);
void OleApp_ShowWindow(LPOLEAPP lpOleApp, BOOL fGiveUserCtrl);
void OleApp_HideWindow(LPOLEAPP lpOleApp);
void OleApp_HideIfNoReasonToStayVisible(LPOLEAPP lpOleApp);
void OleApp_DocLockApp(LPOLEAPP lpOleApp);
void OleApp_DocUnlockApp(LPOLEAPP lpOleApp, LPOUTLINEDOC lpOutlineDoc);
HRESULT OleApp_Lock(LPOLEAPP lpOleApp, BOOL fLock, BOOL fLastUnlockReleases);
ULONG OleApp_AddRef(LPOLEAPP lpOleApp);
ULONG OleApp_Release (LPOLEAPP lpOleApp);
HRESULT OleApp_QueryInterface (
		LPOLEAPP                lpOleApp,
		const IID  _far*  const                  riid,
		LPVOID  _far*             lplpUnk
);
void OleApp_RejectInComingCalls(LPOLEAPP lpOleApp, BOOL fReject);
void OleApp_DisableBusyDialogs(
		LPOLEAPP        lpOleApp,
		BOOL  _far*       lpfPrevBusyEnable,
		BOOL  _far*       lpfPrevNREnable
);
void OleApp_EnableBusyDialogs(
		LPOLEAPP        lpOleApp,
		BOOL            fPrevBusyEnable,
		BOOL            fPrevNREnable
);
void OleApp_PreModalDialog(LPOLEAPP lpOleApp, LPOLEDOC lpActiveOleDoc);
void OleApp_PostModalDialog(LPOLEAPP lpOleApp, LPOLEDOC lpActiveOleDoc);
BOOL OleApp_InitVtbls (LPOLEAPP lpOleApp);
void OleApp_InitMenu(
		LPOLEAPP                lpOleApp,
		LPOLEDOC                lpOleDoc,
		HMENU                   hMenu
);
void OleApp_UpdateEditMenu(
		LPOLEAPP                lpOleApp,
		LPOUTLINEDOC            lpOutlineDoc,
		HMENU                   hMenuEdit
);
BOOL OleApp_RegisterClassFactory(LPOLEAPP lpOleApp);
void OleApp_RevokeClassFactory(LPOLEAPP lpOleApp);


BOOL OleApp_RegisterMessageFilter(LPOLEAPP lpOleApp);
void OleApp_RevokeMessageFilter(LPOLEAPP lpOleApp);
BOOL  _far  _pascal  _export MessagePendingProc(MSG  _far *lpMsg);


void OleApp_FlushClipboard(LPOLEAPP lpOleApp);
void OleApp_NewCommand(LPOLEAPP lpOleApp);
void OleApp_OpenCommand(LPOLEAPP lpOleApp);


LRESULT OleApp_QueryNewPalette(LPOLEAPP lpOleApp);


LRESULT wSelectPalette(HWND hWnd, HPALETTE hPal, BOOL fBackground);



HRESULT  __export  _far   _cdecl   OleApp_Unk_QueryInterface(
		LPUNKNOWN           lpThis,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvObj
);
ULONG  __export  _far   _cdecl   OleApp_Unk_AddRef(LPUNKNOWN lpThis);
ULONG  __export  _far   _cdecl   OleApp_Unk_Release (LPUNKNOWN lpThis);



void InstallMessageFilterCommand(void);
void RejectIncomingCommand(void);





#line 22 "c:\sc\samples\ole16\outline\cntroutl.h"
#pragma message ("INCLUDING CNTROUTL.H from " __FILE__)








#line 17 "c:\sc\samples\ole16\outline\cntrrc.h"
#pragma message ("INCLUDING CNTRRC.H from " __FILE__)












#line 39 "c:\sc\samples\ole16\outline\cntroutl.h"
typedef struct tagCONTAINERDOC  _far* LPCONTAINERDOC;
typedef struct tagCONTAINERLINE  _far* LPCONTAINERLINE;



typedef enum tagOLECREATEFROMDATATYPE {
	OLECREATEFROMDATA_LINK    = 1,
	OLECREATEFROMDATA_OBJECT  = 2,
	OLECREATEFROMDATA_STATIC  = 3
} OLECREATEFROMDATATYPE;



#line 68
typedef struct tagCONTAINERLINE {
	LINE            m_Line;
	ULONG           m_cRef;
	char            m_szStgName[32 ];
	BOOL            m_fObjWinOpen;
	BOOL            m_fMonikerAssigned;
	DWORD           m_dwDrawAspect;


	BOOL            m_fGuardObj;

	BOOL            m_fDoGetExtent;
	BOOL            m_fDoSetExtent;

	SIZEL           m_sizeInHimetric;
	LPSTORAGE       m_lpStg;
	LPCONTAINERDOC  m_lpDoc;
	LPOLEOBJECT     m_lpOleObj;
	LPVIEWOBJECT2   m_lpViewObj2;
	LPPERSISTSTORAGE m_lpPersistStg;
	LPOLELINK       m_lpOleLink;
	DWORD           m_dwLinkType;



	BOOL            m_fLinkUnavailable;
	LPSTR           m_lpszShortType;

	int             m_nHorizScrollShift;




#line 117
	struct CUnknownImpl {
		IUnknownVtbl  _far*       lpVtbl;
		LPCONTAINERLINE         lpContainerLine;
		int                     cRef;
	} m_Unknown;

	struct COleClientSiteImpl {
		IOleClientSiteVtbl  _far* lpVtbl;
		LPCONTAINERLINE         lpContainerLine;
		int                 cRef;
	} m_OleClientSite;

	struct CAdviseSinkImpl {
		IAdviseSinkVtbl  _far*    lpVtbl;
		LPCONTAINERLINE         lpContainerLine;
		int                     cRef;
	} m_AdviseSink;

} CONTAINERLINE;



void ContainerLine_Init(LPCONTAINERLINE lpContainerLine, int nTab, HDC hDC);
BOOL ContainerLine_SetupOleObject(
		LPCONTAINERLINE         lpContainerLine,
		BOOL                    fDisplayAsIcon,
		HGLOBAL                 hMetaPict
);
LPCONTAINERLINE ContainerLine_Create(
		DWORD                   dwOleCreateType,
		HDC                     hDC,
		UINT                    nTab,
		LPCONTAINERDOC          lpContainerDoc,
		LPCLSID                 lpclsid,
		LPSTR                   lpszFileName,
		BOOL                    fDisplayAsIcon,
		HGLOBAL                 hMetaPict,
		LPSTR                   lpszStgName
);
LPCONTAINERLINE ContainerLine_CreateFromData(
		HDC                     hDC,
		UINT                    nTab,
		LPCONTAINERDOC          lpContainerDoc,
		LPDATAOBJECT            lpSrcDataObj,
		DWORD                   dwCreateType,
		CLIPFORMAT              cfFormat,
		BOOL                    fDisplayAsIcon,
		HGLOBAL                 hMetaPict,
		LPSTR                   lpszStgName
);
ULONG ContainerLine_AddRef(LPCONTAINERLINE lpContainerLine);
ULONG ContainerLine_Release(LPCONTAINERLINE lpContainerLine);
HRESULT ContainerLine_QueryInterface(
		LPCONTAINERLINE         lpContainerLine,
		const IID  _far*  const                  riid,
		LPVOID  _far*             lplpUnk
);
BOOL ContainerLine_CloseOleObject(
		LPCONTAINERLINE         lpContainerLine,
		DWORD                   dwSaveOption
);
void ContainerLine_UnloadOleObject(
		LPCONTAINERLINE         lpContainerLine,
		DWORD                   dwSaveOption
);
void ContainerLine_Delete(LPCONTAINERLINE lpContainerLine);
void ContainerLine_Destroy(LPCONTAINERLINE lpContainerLine);
BOOL ContainerLine_CopyToDoc(
		LPCONTAINERLINE         lpSrcLine,
		LPOUTLINEDOC            lpDestDoc,
		int                     nIndex
);
BOOL ContainerLine_LoadOleObject(LPCONTAINERLINE lpContainerLine);
BOOL ContainerLine_UpdateExtent(
		LPCONTAINERLINE     lpContainerLine,
		LPSIZEL             lpsizelHim
);
BOOL ContainerLine_DoVerb(
		LPCONTAINERLINE lpContainerLine,
		LONG iVerb,
		LPMSG lpMsg,
		BOOL fMessage,
		BOOL fAction
);
LPUNKNOWN ContainerLine_GetOleObject(
		LPCONTAINERLINE         lpContainerLine,
		const IID  _far*  const                  riid
);
HRESULT ContainerLine_RunOleObject(LPCONTAINERLINE lpContainerLine);
BOOL ContainerLine_ProcessOleRunError(
		LPCONTAINERLINE         lpContainerLine,
		HRESULT                 hrErr,
		BOOL                    fAction,
		BOOL                    fMenuInvoked
);
HRESULT ContainerLine_ReCreateLinkBecauseClassDiff(
		LPCONTAINERLINE lpContainerLine
);
BOOL ContainerLine_IsOleLink(LPCONTAINERLINE lpContainerLine);
void ContainerLine_BindLinkIfLinkSrcIsRunning(LPCONTAINERLINE lpContainerLine);
void ContainerLine_Draw(
		LPCONTAINERLINE         lpContainerLine,
		HDC                     hDC,
		LPRECT                  lpRect,
		LPRECT                  lpRectWBounds,
		BOOL                    fHighlight

);
void ContainerLine_DrawSelHilight(
		LPCONTAINERLINE lpContainerLine,
		HDC             hDC,
		LPRECT          lpRect,
		UINT            itemAction,
		UINT            itemState
);
BOOL ContainerLine_Edit(LPCONTAINERLINE lpContainerLine,HWND hWndDoc,HDC hDC);
void ContainerLine_SetHeightInHimetric(LPCONTAINERLINE lpContainerLine, int nHeight);
void ContainerLine_SetLineHeightFromObjectExtent(
		LPCONTAINERLINE         lpContainerLine,
		LPSIZEL                 lpsizelOleObject
);
BOOL ContainerLine_SaveToStm(
		LPCONTAINERLINE         lpContainerLine,
		LPSTREAM                lpLLStm
);
BOOL ContainerLine_SaveOleObjectToStg(
		LPCONTAINERLINE         lpContainerLine,
		LPSTORAGE               lpSrcStg,
		LPSTORAGE               lpDestStg,
		BOOL                    fRemember
);
LPLINE ContainerLine_LoadFromStg(
		LPSTORAGE               lpSrcStg,
		LPSTREAM                lpLLStm,
		LPOUTLINEDOC            lpDestDoc
);
LPMONIKER ContainerLine_GetRelMoniker(
		LPCONTAINERLINE         lpContainerLine,
		DWORD                   dwAssign
);
LPMONIKER ContainerLine_GetFullMoniker(
		LPCONTAINERLINE         lpContainerLine,
		DWORD                   dwAssign
);
int ContainerLine_GetTextLen(LPCONTAINERLINE lpContainerLine);
void ContainerLine_GetTextData(LPCONTAINERLINE lpContainerLine,LPSTR lpszBuf);
BOOL ContainerLine_GetOutlineData(
		LPCONTAINERLINE         lpContainerLine,
		LPTEXTLINE              lpBuf
);
void ContainerLine_GetOleObjectRectInPixels(
		LPCONTAINERLINE lpContainerLine,
		LPRECT lprc
);
void ContainerLine_GetPosRect(
		LPCONTAINERLINE     lpContainerLine,
		LPRECT              lprcPosRect
);
void ContainerLine_GetOleObjectSizeInHimetric(
		LPCONTAINERLINE lpContainerLine,
		LPSIZEL lpsizel
);



#line 307
HRESULT  __export  _far   _cdecl   CntrLine_Unk_QueryInterface(
		LPUNKNOWN           lpThis,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvObj
);
ULONG  __export  _far   _cdecl   CntrLine_Unk_AddRef(LPUNKNOWN lpThis);
ULONG  __export  _far   _cdecl   CntrLine_Unk_Release(LPUNKNOWN lpThis);


HRESULT  __export  _far   _cdecl   CntrLine_CliSite_QueryInterface(
		LPOLECLIENTSITE     lpThis,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvObj
);
ULONG  __export  _far   _cdecl   CntrLine_CliSite_AddRef(LPOLECLIENTSITE lpThis);
ULONG  __export  _far   _cdecl   CntrLine_CliSite_Release(LPOLECLIENTSITE lpThis);
HRESULT  __export  _far   _cdecl   CntrLine_CliSite_SaveObject(LPOLECLIENTSITE lpThis);
HRESULT  __export  _far   _cdecl   CntrLine_CliSite_GetMoniker(
		LPOLECLIENTSITE     lpThis,
		DWORD               dwAssign,
		DWORD               dwWhichMoniker,
		LPMONIKER  _far*      lplpmk
);
HRESULT  __export  _far   _cdecl   CntrLine_CliSite_GetContainer(
		LPOLECLIENTSITE     lpThis,
		LPOLECONTAINER  _far* lplpContainer
);
HRESULT  __export  _far   _cdecl   CntrLine_CliSite_ShowObject(LPOLECLIENTSITE lpThis);
HRESULT  __export  _far   _cdecl   CntrLine_CliSite_OnShowWindow(LPOLECLIENTSITE lpThis,BOOL fShow);
HRESULT  __export  _far   _cdecl   CntrLine_CliSite_RequestNewObjectLayout(LPOLECLIENTSITE lpThis);


HRESULT  __export  _far   _cdecl   CntrLine_AdvSink_QueryInterface(
		LPADVISESINK        lpThis,
		const IID  _far*  const              riid,
		LPVOID  _far*         lplpvObj
);
ULONG  __export  _far   _cdecl   CntrLine_AdvSink_AddRef(LPADVISESINK lpThis);
ULONG  __export  _far   _cdecl   CntrLine_AdvSink_Release (LPADVISESINK lpThis);
void  __export  _far   _cdecl   CntrLine_AdvSink_OnDataChange(
		LPADVISESINK        lpThis,
		FORMATETC  _far*      lpFormatetc,
		STGMEDIUM  _far*      lpStgmed
);
void  __export  _far   _cdecl   CntrLine_AdvSink_OnViewChange(
		LPADVISESINK        lpThis,
		DWORD               aspects,
		LONG                lindex
);
void  __export  _far   _cdecl   CntrLine_AdvSink_OnRename(
		LPADVISESINK        lpThis,
		LPMONIKER           lpmk
);
void  __export  _far   _cdecl   CntrLine_AdvSink_OnSave(LPADVISESINK lpThis);
void  __export  _far   _cdecl   CntrLine_AdvSink_OnClose(LPADVISESINK lpThis);





#line 412
typedef struct tagCONTAINERLINERECORD {
	char    m_szStgName[32 ];
	BOOL    m_fMonikerAssigned;
	DWORD   m_dwDrawAspect;


	SIZEL   m_sizeInHimetric;
	DWORD   m_dwLinkType;



	BOOL    m_fDoSetExtent;

} CONTAINERLINERECORD,  _far* LPCONTAINERLINERECORD;




#line 442
typedef struct tagCONTAINERDOC {
	OLEDOC      m_OleDoc;
	ULONG       m_nNextObjNo;
	LPSTORAGE   m_lpNewStg;
	BOOL        m_fEmbeddedObjectAvail;
	CLSID       m_clsidOleObjCopied;
	DWORD       m_dwAspectOleObjCopied;
	LPCONTAINERLINE m_lpSrcContainerLine;
	BOOL        m_fShowObject;


#line 469
	struct CDocOleUILinkContainerImpl {
		IOleUILinkContainerVtbl  _far*  lpVtbl;
		LPCONTAINERDOC                lpContainerDoc;
		int                           cRef;
	} m_OleUILinkContainer;

} CONTAINERDOC;


BOOL ContainerDoc_Init(LPCONTAINERDOC lpContainerDoc, BOOL fDataTransferDoc);
LPCONTAINERLINE ContainerDoc_GetNextLink(
		LPCONTAINERDOC lpContainerDoc,
		LPCONTAINERLINE lpContainerLine
);
void ContainerDoc_UpdateLinks(LPCONTAINERDOC lpContainerDoc);
void ContainerDoc_SetShowObjectFlag(LPCONTAINERDOC lpContainerDoc, BOOL fShow);
BOOL ContainerDoc_GetShowObjectFlag(LPCONTAINERDOC lpContainerDoc);
void ContainerDoc_InsertOleObjectCommand(LPCONTAINERDOC lpContainerDoc);
void ContainerDoc_EditLinksCommand(LPCONTAINERDOC lpContainerDoc);
void ContainerDoc_PasteLinkCommand(LPCONTAINERDOC lpContainerDoc);
void ContainerDoc_ConvertCommand(
		LPCONTAINERDOC      lpContainerDoc,
		BOOL                fServerNotRegistered
);
BOOL ContainerDoc_PasteFormatFromData(
		LPCONTAINERDOC          lpContainerDoc,
		CLIPFORMAT              cfFormat,
		LPDATAOBJECT            lpSrcDataObj,
		BOOL                    fLocalDataObj,
		BOOL                    fLink,
		BOOL                    fDisplayAsIcon,
		HGLOBAL                 hMetaPict,
		LPSIZEL                 lpSizelInSrc
);
int ContainerDoc_PasteCntrOutlData(
		LPCONTAINERDOC          lpDestContainerDoc,
		LPSTORAGE               lpSrcStg,
		int                     nStartIndex
);
BOOL ContainerDoc_QueryPasteFromData(
		LPCONTAINERDOC          lpContainerDoc,
		LPDATAOBJECT            lpSrcDataObj,
		BOOL                    fLink
);
int ContainerDoc_PasteOleObject(
		LPCONTAINERDOC          lpContainerDoc,
		LPDATAOBJECT            lpSrcDataObj,
		DWORD                   dwCreateType,
		CLIPFORMAT              cfFormat,
		int                     nIndex,
		BOOL                    fDisplayAsIcon,
		HGLOBAL                 hMetaPict,
		LPSIZEL                 lpSizelInSrc
);
BOOL ContainerDoc_CloseAllOleObjects(
		LPCONTAINERDOC          lpContainerDoc,
		DWORD                   dwSaveOption
);
void ContainerDoc_UnloadAllOleObjectsOfClass(
		LPCONTAINERDOC      lpContainerDoc,
		const CLSID  _far*  const            rClsid,
		DWORD               dwSaveOption
);
void ContainerDoc_InformAllOleObjectsDocRenamed(
		LPCONTAINERDOC          lpContainerDoc,
		LPMONIKER               lpmkDoc
);
void ContainerDoc_UpdateExtentOfAllOleObjects(LPCONTAINERDOC lpContainerDoc);
BOOL ContainerDoc_SaveToFile(
		LPCONTAINERDOC          lpContainerDoc,
		LPCSTR                  lpszFileName,
		UINT                    uFormat,
		BOOL                    fRemember
);
void ContainerDoc_ContainerLineDoVerbCommand(
		LPCONTAINERDOC          lpContainerDoc,
		LONG                    iVerb
);
void ContainerDoc_GetNextStgName(
		LPCONTAINERDOC          lpContainerDoc,
		LPSTR                   lpszStgName,
		int                     nLen
);
BOOL ContainerDoc_IsStgNameUsed(
		LPCONTAINERDOC          lpContainerDoc,
		LPSTR                   lpszStgName
);
LPSTORAGE ContainerDoc_GetStg(LPCONTAINERDOC lpContainerDoc);
HRESULT ContainerDoc_GetObject(
		LPCONTAINERDOC          lpContainerDoc,
		LPSTR                   lpszItem,
		DWORD                   dwSpeedNeeded,
		const IID  _far*  const                  riid,
		LPVOID  _far*             lplpvObject
);
HRESULT ContainerDoc_GetObjectStorage(
		LPCONTAINERDOC          lpContainerDoc,
		LPSTR                   lpszItem,
		LPSTORAGE  _far*          lplpStg
);
HRESULT ContainerDoc_IsRunning(LPCONTAINERDOC   lpContainerDoc, LPSTR lpszItem);
LPUNKNOWN ContainerDoc_GetSingleOleObject(
		LPCONTAINERDOC          lpContainerDoc,
		const IID  _far*  const                  riid,
		LPCONTAINERLINE  _far*    lplpContainerLine
);
BOOL ContainerDoc_IsSelAnOleObject(
		LPCONTAINERDOC          lpContainerDoc,
		const IID  _far*  const                  riid,
		LPUNKNOWN  _far*          lplpvObj,
		int  _far*                lpnIndex,
		LPCONTAINERLINE  _far*    lplpContainerLine
);
HRESULT ContainerDoc_GetData (
		LPCONTAINERDOC          lpContainerDoc,
		LPFORMATETC             lpformatetc,
		LPSTGMEDIUM             lpMedium
);
HRESULT ContainerDoc_GetDataHere (
		LPCONTAINERDOC          lpContainerDoc,
		LPFORMATETC             lpformatetc,
		LPSTGMEDIUM             lpMedium
);
HRESULT ContainerDoc_QueryGetData (
		LPCONTAINERDOC          lpContainerDoc,
		LPFORMATETC             lpformatetc
);
HRESULT ContainerDoc_SetData (
		LPCONTAINERDOC          lpContainerDoc,
		LPFORMATETC             lpformatetc,
		LPSTGMEDIUM             lpmedium,
		BOOL                    fRelease
);
HRESULT ContainerDoc_EnumFormatEtc(
		LPCONTAINERDOC          lpContainerDoc,
		DWORD                   dwDirection,
		LPENUMFORMATETC  _far*    lplpenumFormatEtc
);
BOOL ContainerDoc_SetupDocGetFmts(
		LPCONTAINERDOC          lpContainerDoc,
		LPCONTAINERLINE         lpContainerLine
);



#line 653
HRESULT  __export  _far   _cdecl   CntrDoc_LinkCont_QueryInterface(
		IOleUILinkContainer  _far*     lpThis,
		const IID  _far*  const                  riid,
		LPVOID  _far*             lplpvObj
);
ULONG  __export  _far   _cdecl   CntrDoc_LinkCont_AddRef(IOleUILinkContainer  _far*  lpThis);
ULONG  __export  _far   _cdecl   CntrDoc_LinkCont_Release(IOleUILinkContainer  _far*  lpThis);
DWORD  __export  _far   _cdecl   CntrDoc_LinkCont_GetNextLink(
		IOleUILinkContainer  _far*     lpThis,
		DWORD                   dwLink
);
HRESULT  __export  _far   _cdecl   CntrDoc_LinkCont_SetLinkUpdateOptions(
		IOleUILinkContainer  _far*     lpThis,
		DWORD                   dwLink,
		DWORD                   dwUpdateOpt
);
HRESULT  __export  _far   _cdecl   CntrDoc_LinkCont_GetLinkUpdateOptions(
		IOleUILinkContainer  _far*     lpThis,
		DWORD                   dwLink,
		DWORD  _far*              dwUpdateOpt
);

HRESULT  __export  _far   _cdecl   CntrDoc_LinkCont_SetLinkSource(
		IOleUILinkContainer  _far*     lpThis,
		DWORD                   dwLink,
		LPSTR                   lpszDisplayName,
		ULONG                   clenFileName,
		ULONG  _far*              lpchEaten,
		BOOL                    fValidateSource
);
HRESULT  __export  _far   _cdecl   CntrDoc_LinkCont_GetLinkSource(
		IOleUILinkContainer  _far*     lpThis,
		DWORD                   dwLink,
		LPSTR  _far*              lplpszDisplayName,
		ULONG  _far*              lplenFileName,
		LPSTR  _far*              lplpszFullLinkType,
		LPSTR  _far*              lplpszShortLinkType,
		BOOL  _far*               lpfSourceAvailable,
		BOOL  _far*               lpfIsSelected
);
HRESULT  __export  _far   _cdecl   CntrDoc_LinkCont_OpenLinkSource(
		IOleUILinkContainer  _far*     lpThis,
		DWORD                   dwLink
);
HRESULT  __export  _far   _cdecl   CntrDoc_LinkCont_UpdateLink(
		IOleUILinkContainer  _far*     lpThis,
		DWORD                   dwLink,
		BOOL                    fErrorMessage,
		BOOL                    fErrorAction
);
HRESULT  __export  _far   _cdecl   CntrDoc_LinkCont_CancelLink(
		IOleUILinkContainer  _far*     lpThis,
		DWORD                   dwLink
);






#line 725
typedef struct tagCONTAINERAPP  _far* LPCONTAINERAPP;

typedef struct tagCONTAINERAPP {
	OLEAPP  m_OleApp;
	UINT    m_cfCntrOutl;
	int     m_nSingleObjGetFmts;
	FORMATETC m_arrSingleObjGetFmts[10 ];





#line 759
} CONTAINERAPP;


BOOL ContainerApp_InitInstance(
		LPCONTAINERAPP          lpContainerApp,
		HINSTANCE               hInst,
		int                     nCmdShow
);
BOOL ContainerApp_InitVtbls(LPCONTAINERAPP lpApp);


















#line 27 "c:\sc\samples\ole16\outline\status.h"


typedef enum {
	STATUS_READY,
	STATUS_BLANK
} STATCONTROL;


extern HWND hwndStatusbar;

BOOL RegisterStatusClass(HINSTANCE hInstance);
HWND CreateStatusWindow(HWND hWndApp, HINSTANCE hInst);
void DestroyStatusWindow(HWND hWndStatusBar);

void AssignPopupMessage(HMENU hmenuPopup, char *szMessage);

void SetStatusText(HWND hWndStatusBar, LPSTR lpszMessage);
void GetItemMessage(UINT wIDItem, LPSTR  _far* lplpszMessage);
void GetPopupMessage(HMENU hmenuPopup, LPSTR  _far* lplpszMessage);
void GetSysMenuMessage(UINT wIDItem, LPSTR  _far* lplpszMessage);
#line 15 "c:\sc\samples\ole16\outline\main.c"
void GetControlMessage(STATCONTROL scCommand, LPSTR  _far* lplpszMessage);






#line 14 "c:\sc\samples\ole16\outline\..\include\ctl3d.h"
BOOL _far  _pascal Ctl3dSubclassDlg(HWND, WORD);
BOOL _far  _pascal Ctl3dSubclassDlgEx(HWND, DWORD);
WORD _far  _pascal Ctl3dGetVer(void);
BOOL _far  _pascal Ctl3dEnabled(void);
HBRUSH _far  _pascal Ctl3dCtlColor(HDC, LONG);
HBRUSH _far  _pascal Ctl3dCtlColorEx(UINT wm, WPARAM wParam, LPARAM lParam);
BOOL _far  _pascal Ctl3dColorChange(void);
BOOL _far  _pascal Ctl3dSubclassCtl(HWND);
LONG _far  _pascal Ctl3dDlgFramePaint(HWND, UINT, WPARAM, LPARAM);

BOOL _far  _pascal Ctl3dAutoSubclass(HANDLE);

BOOL _far  _pascal Ctl3dRegister(HANDLE);
BOOL _far  _pascal Ctl3dUnregister(HANDLE);


 void _far  _pascal Ctl3dWinIniChange(void);


















#line 3 "C:\SC\BIN\..\INCLUDE\initguid.h"
#pragma pack(__DEFALIGN)





















#line 14 "C:\SC\BIN\..\INCLUDE\initguid.h"
#pragma pack()












#line 36 "c:\sc\samples\ole16\outline\defguid.h"
 extern const GUID  _cdecl   CLSID_SvrOutl = { 0x00000400, 0x0000, 0x0000, { 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 } } ;
 extern const GUID  _cdecl   CLSID_CntrOutl = { 0x00000401, 0x0000, 0x0000, { 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 } } ;
 extern const GUID  _cdecl   CLSID_ISvrOtl = { 0x00000402, 0x0000, 0x0000, { 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 } } ;
 extern const GUID  _cdecl   CLSID_ICntrOtl = { 0x00000403, 0x0000, 0x0000, { 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 } } ;


 extern const GUID  _cdecl   IID_IOleUILinkContainer = { 0x000004FF, 0x0000, 0x0000, { 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 } } ;






#line 34 "c:\sc\samples\ole16\outline\main.c"
char near g_szDbgPrefix[] = "CNTR";  static char _based(_segname("_CODE")) _szAssertFile[]= "c:\\sc\\samples\\ole16\\outline\\main.c";


CONTAINERAPP g_OutlineApp;


#line 44
IUnknownVtbl            g_OleApp_UnknownVtbl;
IClassFactoryVtbl       g_OleApp_ClassFactoryVtbl;
IMessageFilterVtbl      g_OleApp_MessageFilterVtbl;

IUnknownVtbl            g_OleDoc_UnknownVtbl;
IPersistFileVtbl        g_OleDoc_PersistFileVtbl;
IOleItemContainerVtbl   g_OleDoc_OleItemContainerVtbl;
IExternalConnectionVtbl g_OleDoc_ExternalConnectionVtbl;
IDataObjectVtbl         g_OleDoc_DataObjectVtbl;


IDropSourceVtbl         g_OleDoc_DropSourceVtbl;
IDropTargetVtbl         g_OleDoc_DropTargetVtbl;


IOleUILinkContainerVtbl g_CntrDoc_OleUILinkContainerVtbl;

IOleClientSiteVtbl      g_CntrLine_UnknownVtbl;
IOleClientSiteVtbl      g_CntrLine_OleClientSiteVtbl;
IAdviseSinkVtbl         g_CntrLine_AdviseSinkVtbl;







#line 129
LPOUTLINEAPP g_lpApp=(LPOUTLINEAPP)&g_OutlineApp;
RECT        g_rectNull = {0, 0, 0, 0};
UINT        g_uMsgHelp = 0;
BOOL        g_fAppActive = 0 ;


#line 138
int  _pascal WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
						LPSTR lpszCmdLine, int nCmdShow)
{
	LPOUTLINEAPP lpOutlineApp = (LPOUTLINEAPP)g_lpApp;
	MSG         msg;

#line 148

	int cMsg = 96;
	while (cMsg && ! SetMessageQueue(cMsg))
		cMsg -= 8;
	if (! cMsg)
		return -1;



   Ctl3dRegister(hInstance);
   Ctl3dAutoSubclass(hInstance);


	if(! hPrevInstance) {

		if(! OutlineApp_InitApplication(lpOutlineApp, hInstance))
			return 0;
	}


	if (! OutlineApp_InitInstance(lpOutlineApp, hInstance, nCmdShow))
		return 0;

	if (! OutlineApp_ParseCmdLine(lpOutlineApp, lpszCmdLine, nCmdShow))
		return 0;

	lpOutlineApp->m_hAccelApp = LoadAccelerators(hInstance, "CntrOutlAccel" );
	lpOutlineApp->m_hAccelFocusEdit = LoadAccelerators(hInstance,
			"CntrOutlAccelFocusEdit" );
	lpOutlineApp->m_hAccel = lpOutlineApp->m_hAccelApp;
	lpOutlineApp->m_hWndAccelTarget = lpOutlineApp->m_hWndApp;



	while(GetMessage(&msg, 0 , 0, 0)) {
		if(!MyTranslateAccelerator(&msg)) {
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}


	OleApp_TerminateApplication((LPOLEAPP)lpOutlineApp);

#line 199
   Ctl3dUnregister(hInstance);


	return msg.wParam;

}

BOOL MyTranslateAccelerator(LPMSG lpmsg)
{

	if (lpmsg->message < 0x0100  || lpmsg->message > 0x0108 )
		return 0 ;

	if (g_lpApp->m_hWndAccelTarget &&
		TranslateAccelerator(g_lpApp->m_hWndAccelTarget,
													g_lpApp->m_hAccel,lpmsg))
		return 1 ;


#line 249
	return 0 ;
}














LRESULT  _far  _pascal AppWndProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam)
{
	LPOUTLINEAPP lpOutlineApp = (LPOUTLINEAPP)GetWindowLong(hWnd, 0);
	LPOUTLINEDOC lpOutlineDoc = 0 ;

	LPOLEAPP lpOleApp = (LPOLEAPP)lpOutlineApp;


	LPCONTAINERAPP lpContainerApp = (LPCONTAINERAPP)lpOutlineApp;

	HWND         hWndDoc = 0 ;


	LPFRAMETOOLS lptb = OutlineApp_GetFrameTools(lpOutlineApp);


	if (lpOutlineApp) {
		lpOutlineDoc = OutlineApp_GetActiveDoc(lpOutlineApp);

		if (lpOutlineDoc)
			hWndDoc = OutlineDoc_GetWindow(lpOutlineDoc);
	}

	switch (Message) {
		case 0x0111 :
		{
#line 294
			WORD wID    = wParam;



#line 364
			switch (wID) {

				case 1050 :
					OleDbgIndent(-2);
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineApp_NewCommand\r\n",1);
					OutlineApp_NewCommand(lpOutlineApp);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);

#line 384

					OleDbgPrint(2,g_szDbgPrefix,"CoFreeUnusedLibraries called\r\n",1);
					CoFreeUnusedLibraries();
					OleDbgPrint(2,g_szDbgPrefix,"End\r\n",-1);



					OutlineDoc_UpdateFrameToolButtons(
							OutlineApp_GetActiveDoc(lpOutlineApp));

					break;

				case 1100 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineApp_OpenCommand\r\n",1);
					OutlineApp_OpenCommand(lpOutlineApp);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);

#line 413

					OleDbgPrint(2,g_szDbgPrefix,"CoFreeUnusedLibraries called\r\n",1);
					CoFreeUnusedLibraries();
					OleDbgPrint(2,g_szDbgPrefix,"End\r\n",-1);



					OutlineDoc_UpdateFrameToolButtons(
							OutlineApp_GetActiveDoc(lpOutlineApp));

					break;

				case 1150 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineApp_SaveCommand\r\n",1);
					OutlineApp_SaveCommand(lpOutlineApp);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;

				case 1200 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineApp_SaveAsCommand\r\n",1);
					OutlineApp_SaveAsCommand(lpOutlineApp);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;

				case 1300 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineApp_PrintCommand\r\n",1);
					OutlineApp_PrintCommand(lpOutlineApp);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;

				case 1350 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineApp_PrinterSetupCommand\r\n",1);
					OutlineApp_PrinterSetupCommand(lpOutlineApp);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;

				case 1450 :
					SendMessage(hWnd, 0x0010 , 0, 0L);
					break;

				case 5050 :
					OutlineApp_AboutCommand(lpOutlineApp);
					break;



#line 500
				default:

					if (hWndDoc) {
						return DocWndProc(hWndDoc, Message,wParam,lParam);
					}
			}

			break;
		}

		case 0x0116 :
			OutlineApp_InitMenu(lpOutlineApp, lpOutlineDoc, (HMENU)wParam);
			break;


#line 520

		case 0x0117 :
		{
			HMENU hMenuEdit = GetSubMenu(lpOutlineApp->m_hMenuApp, 1);
#line 536
			if ((HMENU)wParam == hMenuEdit &&
				(((WORD)(DWORD)(lParam))  == 1 ) &&
				OleDoc_GetUpdateEditMenuFlag((LPOLEDOC)lpOutlineDoc)) {
				OleApp_UpdateEditMenu(lpOleApp, lpOutlineDoc, hMenuEdit);
			}
			break;
		}


		case 0x0005 :
			if (wParam != 1 )
				OutlineApp_ResizeWindows(lpOutlineApp);
			break;


		case 0x001C :

			if (g_fAppActive = (BOOL) wParam)
				OleApp_QueryNewPalette(lpOleApp);



#line 583











			if (wParam

					&& lpOleApp->m_cModalDlgActive == 0

			) {
				PostMessage(hWnd,  0x0400  , 0, 0L);
			}
			return 0L;

		case 0x0007 :
			SetFocus(hWndDoc);
			break;



		case 0x030F :
			if (!g_fAppActive)
				return 0L;

			return OleApp_QueryNewPalette(lpOleApp);

		case 0x0311 :
		{
			HWND hWndPalChg = (HWND) wParam;
			static BOOL fInPaletteChanged = 0 ;

			if (fInPaletteChanged)
				return 0L;

			fInPaletteChanged = 1 ;

			if (hWnd != hWndPalChg)
				wSelectPalette(hWnd, lpOleApp->m_hStdPal,1 );


#line 644
			fInPaletteChanged = 0 ;
			return 0L;
		}


		case 0x0002 :
			PostQuitMessage(0);
			break;

		case 0x0010 :


			OleDbgPrint(2,"","\r\n",0) ;

			OutlineApp_CloseAllDocsAndExitCommand(lpOutlineApp, 0 );
			break;

		case 0x0011 :
		{
#line 670


			int nResponse = MessageBox(
					hWnd,
					"Discard changes?",
					"CntrOutl" ,
					0x0020  | 0x0001
			);
			if(nResponse == 1 )
				return 1L;


#line 693
			{
#line 705

				DWORD dwSaveOption = OLECLOSE_PROMPTSAVE;
				if (OutlineDoc_CheckSaveChanges(
						lpOutlineApp->m_lpDoc, &dwSaveOption))
					return 1L;
			}



			break;
		}


		case 0x0016 :
		{
			BOOL fEndSession = (BOOL)wParam;

			if (fEndSession) {
				OutlineApp_CloseAllDocsAndExitCommand(lpOutlineApp, 1 );
				return 0L;
			}
		}
		break;




		case 0x011F :
		{
			LPSTR lpszMessage;
#line 739
			UINT fuFlags    = (UINT)((WORD)(DWORD)(lParam)) ;
			UINT uItem      = (UINT)wParam;


			if (uItem == 0 && fuFlags == (UINT)-1) {
				GetControlMessage(STATUS_READY, &lpszMessage);
				OutlineApp_SetStatusText(lpOutlineApp, lpszMessage);
			}
			else if (fuFlags & 0x0010 ) {
#line 752
				HMENU hPopupMenu = (HMENU)wParam;

				GetPopupMessage(hPopupMenu, &lpszMessage);
				OutlineApp_SetStatusText(lpOutlineApp, lpszMessage);
			}
			else if (fuFlags & 0x2000 ) {
				GetSysMenuMessage(uItem, &lpszMessage);
				OutlineApp_SetStatusText(lpOutlineApp, lpszMessage);
			}
			else if (uItem != 0) {
				GetItemMessage(uItem, &lpszMessage);
				OutlineApp_SetStatusText(lpOutlineApp, lpszMessage);
			}
			else {
				GetControlMessage(STATUS_BLANK, &lpszMessage);
				OutlineApp_SetStatusText(lpOutlineApp, lpszMessage);
			}
			break;
		}




		case  0x0400  :
			OutlineDoc_UpdateFrameToolButtons(lpOutlineDoc);
			break;


		default:




			return DefWindowProc(hWnd, Message, wParam, lParam);
	}

	return (LRESULT)0;
}











LRESULT  _far  _pascal DocWndProc(HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam)
{
	LPOUTLINEAPP    lpOutlineApp = (LPOUTLINEAPP)g_lpApp;
	LPOUTLINEDOC    lpOutlineDoc = (LPOUTLINEDOC)GetWindowLong(hWnd, 0);
	LPLINELIST      lpLL = OutlineDoc_GetLineList(lpOutlineDoc);
	LPSCALEFACTOR   lpscale = OutlineDoc_GetScaleFactor(lpOutlineDoc);


	LPOLEAPP lpOleApp = (LPOLEAPP)lpOutlineApp;
	LPOLEDOC lpOleDoc = (LPOLEDOC)lpOutlineDoc;

	LPCONTAINERDOC lpContainerDoc = (LPCONTAINERDOC)lpOutlineDoc;



#line 822
	switch(Message) {


#line 843
		case 0x002C :
		{
			LPMEASUREITEMSTRUCT lpmis = ((LPMEASUREITEMSTRUCT)lParam);

			switch (wParam) {
				case 201 :
				{
					HDC hDC = LineList_GetDC(lpLL);
					UINT uHeight;

					uHeight=Line_GetHeightInHimetric((LPLINE)lpmis->itemData);
					uHeight = XformHeightInHimetricToPixels(hDC, uHeight);
					uHeight = (UINT) (uHeight * lpscale->dwSyN /
							lpscale->dwSyD);

					if (uHeight >255 )
						uHeight = 255 ;

					lpmis->itemHeight = uHeight;
					LineList_ReleaseDC(lpLL, hDC);
					break;
				}

				case 202 :
				{

					break;
				}


				case 2000 :
				{
					UINT uHeight;

					uHeight = ((WORD)(DWORD)(lpmis->itemData)) ;
					uHeight = (UINT) (uHeight * lpscale->dwSyN /
							lpscale->dwSyD);
					if (uHeight >255 )
						uHeight = 255 ;
					lpmis->itemHeight = uHeight;
					break;
				}

				case 2001 :
				{
					UINT uHeight;

					uHeight = ((WORD)(DWORD)(lpmis->itemData)) ;
					uHeight = (UINT) (uHeight * lpscale->dwSyN /
							lpscale->dwSyD);
					if (uHeight > 255 )
						uHeight = 255 ;
					lpmis->itemHeight = uHeight;
					break;
				}


			}
			return (LRESULT)1 ;
		}

		case 0x002B :
		{
			LPDRAWITEMSTRUCT lpdis = ((LPDRAWITEMSTRUCT)lParam);

			switch (lpdis->CtlID) {

				case 201 :
				{
					RECT   rcClient;
					RECT   rcDevice;
					HWND   hWndLL = LineList_GetWindow(lpLL);
					LPLINE lpLine = (LPLINE)lpdis->itemData;






					if (lpdis->itemID == -1)
						break;

					GetClientRect(hWndLL, &rcClient);

					rcDevice = lpdis->rcItem;



					rcDevice.left += rcClient.right - lpdis->rcItem.right;

#line 937

					if(lpdis->itemAction & 0x0001 ) {
						if (Line_GetLineType(lpLine) == CONTAINERLINETYPE)
							((LPCONTAINERLINE)lpLine)->m_nHorizScrollShift =
								rcDevice.left;
					}



					rcDevice.left += (int)(XformWidthInHimetricToPixels(0 ,
							((WORD)(DWORD)(OutlineDoc_GetMargin(lpOutlineDoc))) ) *
							lpscale->dwSxN / lpscale->dwSxD);

					rcDevice.right = rcDevice.left +
							(int)(XformWidthInHimetricToPixels(lpdis->hDC,
									Line_GetWidthInHimetric(lpLine)) *
							lpscale->dwSxN / lpscale->dwSxD);

					Line_DrawToScreen(
							lpLine,
							lpdis->hDC,
							&lpdis->rcItem,
							lpdis->itemAction,
							lpdis->itemState,
							&rcDevice
					);


					if (lpdis->itemState & 0x0010 )
						OutlineDoc_SetFormulaBarEditText(lpOutlineDoc,lpLine);

					break;
				}
				case 202 :
				{

					break;
				}


				case 2000 :
				{
					LPHEADING lphead;


					if (lpdis->itemID == (UINT)LineList_GetCount(lpLL))
						break;


					if (lpdis->itemAction == 0x0001 ) {
						lphead = OutlineDoc_GetHeading(lpOutlineDoc);
						Heading_RH_Draw(lphead, lpdis);
					}
					break;
				}

				case 2001 :
				{
					RECT   rect;
					RECT   rcDevice;
					RECT   rcLogical;
					LPHEADING lphead;


					if (lpdis->itemAction == 0x0001 ) {
						lphead = OutlineDoc_GetHeading(lpOutlineDoc);
						GetClientRect(lpdis->hwndItem, &rect);

						rcDevice = lpdis->rcItem;



						rcDevice.left = -(rcDevice.right - rect.right);


						rcDevice.left += (int)(XformWidthInHimetricToPixels(
								0 ,
								((WORD)(DWORD)(OutlineDoc_GetMargin(lpOutlineDoc))) ) *
							lpscale->dwSxN / lpscale->dwSxD);

						rcDevice.right = rcDevice.left + (int)lpscale->dwSxN;
						rcLogical.left = 0;
						rcLogical.bottom = 0;
						rcLogical.right = (int)lpscale->dwSxD;
						rcLogical.top = ((WORD)(DWORD)(lpdis->itemData)) ;

						Heading_CH_Draw(lphead, lpdis, &rcDevice, &rcLogical);
					}
					break;
				}


			}
			return (LRESULT)1 ;
		}

		case 0x0007 :
			if (lpLL)
				SetFocus(LineList_GetWindow(lpLL));
			break;


#line 1065
		case 0x0400 +1 :
		{
#line 1074

			ContainerDoc_UpdateExtentOfAllOleObjects(lpContainerDoc);
			break;
		}






#line 1180
		case 0x0111 :
		{
#line 1187
			WORD wNotifyCode = ((WORD)((((DWORD)(lParam)) >> 16) & 0xFFFF)) ;
			WORD wID             = wParam;
			HWND hwndCtl     = (HWND) ((WORD)(DWORD)(lParam)) ;



#line 1317
			switch (wID) {

#line 1324


				case 1050 :
					OleDbgIndent(-2);
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineApp_NewCommand\r\n",1);
					OutlineApp_NewCommand(lpOutlineApp);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);

#line 1344

					OleDbgPrint(2,g_szDbgPrefix,"CoFreeUnusedLibraries called\r\n",1);
					CoFreeUnusedLibraries();
					OleDbgPrint(2,g_szDbgPrefix,"End\r\n",-1);



					OutlineDoc_UpdateFrameToolButtons(
							OutlineApp_GetActiveDoc(lpOutlineApp));

					break;

				case 1100 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineApp_OpenCommand\r\n",1);
					OutlineApp_OpenCommand(lpOutlineApp);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);

#line 1373

					OleDbgPrint(2,g_szDbgPrefix,"CoFreeUnusedLibraries called\r\n",1);
					CoFreeUnusedLibraries();
					OleDbgPrint(2,g_szDbgPrefix,"End\r\n",-1);



					OutlineDoc_UpdateFrameToolButtons(
							OutlineApp_GetActiveDoc(lpOutlineApp));

					break;

				case 1150 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineApp_SaveCommand\r\n",1);
					OutlineApp_SaveCommand(lpOutlineApp);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;

				case 1300 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineApp_PrintCommand\r\n",1);
					OutlineApp_PrintCommand(lpOutlineApp);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;


				case 2050 :

					break;

				case 2150 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_CutCommand\r\n",1);
					OutlineDoc_CutCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);


					OutlineDoc_UpdateFrameToolButtons(lpOutlineDoc);

					break;

				case 2200 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_CopyCommand\r\n",1);
					OutlineDoc_CopyCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);


					OutlineDoc_UpdateFrameToolButtons(lpOutlineDoc);

					break;

				case 2250 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_PasteCommand\r\n",1);
					OutlineDoc_PasteCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);


					OutlineDoc_UpdateFrameToolButtons(lpOutlineDoc);

					break;


				case 2255 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OleDoc_PasteSpecialCommand\r\n",1);
					OleDoc_PasteSpecialCommand((LPOLEDOC)lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);


					OutlineDoc_UpdateFrameToolButtons(lpOutlineDoc);

					break;



				case 2300 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_ClearCommand\r\n",1);
					OutlineDoc_ClearCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);

#line 1474

					OleDbgPrint(2,g_szDbgPrefix,"CoFreeUnusedLibraries called\r\n",1);
					CoFreeUnusedLibraries();
					OleDbgPrint(2,g_szDbgPrefix,"End\r\n",-1);



					OutlineDoc_UpdateFrameToolButtons(lpOutlineDoc);

					break;

				case 3400 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_AddTextLineCommand\r\n",1);
					OutlineDoc_AddTextLineCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);


					OutlineDoc_UpdateFrameToolButtons(lpOutlineDoc);
					SetFocus(LineList_GetWindow(lpLL));

					break;

				case 3450 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_EditLineCommand\r\n",1);
					OutlineDoc_EditLineCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					SetFocus(LineList_GetWindow(lpLL));
					break;

				case 3500 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_IndentCommand\r\n",1);
					OutlineDoc_IndentCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;

				case 3550 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_UnindentCommand\r\n",1);
					OutlineDoc_UnindentCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;

				case 3560 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_SetLineHeight\r\n",1);
					OutlineDoc_SetLineHeightCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;

				case 2560 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_SelectAllCommand\r\n",1);
					OutlineDoc_SelectAllCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;


				case 2700 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"ContainerDoc_InsertOleObjectCommand\r\n",1);
					ContainerDoc_InsertOleObjectCommand(lpContainerDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);


					OutlineDoc_UpdateFrameToolButtons(lpOutlineDoc);

					break;

				case 3300 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"ContainerDoc_EditLinksCommand\r\n",1);
					ContainerDoc_EditLinksCommand(lpContainerDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;

				case 9000 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"ContainerDoc_ConvertCommand\r\n",1);
					ContainerDoc_ConvertCommand(
							lpContainerDoc, 0  );
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;


				case 2750 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"ContainerDoc_PasteLinkCommand\r\n",1);
					ContainerDoc_PasteLinkCommand(lpContainerDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);


					OutlineDoc_UpdateFrameToolButtons(lpOutlineDoc);

					break;



				case 4050 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_DefineNameCommand\r\n",1);
					OutlineDoc_DefineNameCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;

				case 4100 :
					OleDbgPrint(2,"","\r\n",0) ;

					OleDbgPrint(3,g_szDbgPrefix,"OutlineDoc_GotoNameCommand\r\n",1);
					OutlineDoc_GotoNameCommand(lpOutlineDoc);
					OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
					break;


				case 6100 :
					FrameTools_BB_SetState(
							lpOutlineDoc->m_lpFrameTools, 1 );
					OutlineDoc_AddFrameLevelTools(lpOutlineDoc);
					break;

				case 6150 :
					FrameTools_BB_SetState(
							lpOutlineDoc->m_lpFrameTools, 2 );
					OutlineDoc_AddFrameLevelTools(lpOutlineDoc);
					break;

				case 6200 :
					FrameTools_BB_SetState(
							lpOutlineDoc->m_lpFrameTools, 3 );
					OutlineDoc_AddFrameLevelTools(lpOutlineDoc);
					break;

				case 6210 :
					FrameTools_BB_SetState(
							lpOutlineDoc->m_lpFrameTools, 4 );
					OutlineDoc_AddFrameLevelTools(lpOutlineDoc);
					break;

				case 6250 :
					FrameTools_FB_SetState(
							lpOutlineDoc->m_lpFrameTools, 1 );
					OutlineDoc_AddFrameLevelTools(lpOutlineDoc);
					break;

				case 6300 :
					FrameTools_FB_SetState(
							lpOutlineDoc->m_lpFrameTools, 2 );
					OutlineDoc_AddFrameLevelTools(lpOutlineDoc);
					break;

				case 6350 :
					FrameTools_FB_SetState(
							lpOutlineDoc->m_lpFrameTools, 3 );
					OutlineDoc_AddFrameLevelTools(lpOutlineDoc);
					break;

				case 7000 :

					switch (wNotifyCode) {
						case 0x0100 :
							OutlineDoc_SetFormulaBarEditFocus(
									lpOutlineDoc, 1 );
							OutlineDoc_UpdateFrameToolButtons(lpOutlineDoc);
							break;

						case 0x0200 :
							OutlineDoc_SetFormulaBarEditFocus(
									lpOutlineDoc, 0 );
							OutlineDoc_UpdateFrameToolButtons(lpOutlineDoc);
							break;
					}
					break;

				case 7005 :

					SetFocus(hWnd);
					break;


				case 7010 :
					SendMessage(hWnd, 0x0111 , (WPARAM)7000 ,
							((LONG)(((WORD)(0)) | (((DWORD)((WORD)(0x0100  ))) << 16))) );
					break;


				case 7015 :



					if (OutlineDoc_IsEditFocusInFormulaBar(lpOutlineDoc))
						SendMessage(
							hWnd, 0x0111 ,(WPARAM)7005 ,(LPARAM)0);



#line 1703
					break;



				case 2002 :
					if (wNotifyCode == 0 ) {
						SendMessage(hWnd, 0x0111 , 2560 , 0L);
						SetFocus(hWnd);
					}
					break;

				case 6400 :
					OutlineDoc_ShowHeading(lpOutlineDoc, 1 );
					break;

				case 6450 :
					OutlineDoc_ShowHeading(lpOutlineDoc, 0 );
					break;




				case 6460 :
				{
					LPCONTAINERDOC lpContainerDoc =
								(LPCONTAINERDOC)lpOutlineDoc;
					BOOL        fShowObject;

					fShowObject = !ContainerDoc_GetShowObjectFlag(
							lpContainerDoc);
					ContainerDoc_SetShowObjectFlag(
							lpContainerDoc, fShowObject);
					LineList_ForceRedraw(lpLL, 1 );

					break;
				}



#line 1748
				case 6550 :
				case 6600 :
				case 6650 :
				case 6700 :
					OutlineDoc_SetCurrentZoomCommand(lpOutlineDoc, wID);
					break;

				case 6750 :
				case 6800 :
				case 6850 :
				case 6860 :
				case 6870 :
					OutlineDoc_SetCurrentMarginCommand(lpOutlineDoc, wID);
					break;

				case 6900 :
				case 6910 :
				case 6920 :
				case 6930 :
				{
					UINT nHeightInHimetric;

					switch (wID) {
						case 6900 :
							nHeightInHimetric = 1000;
							break;

						case 6910 :
							nHeightInHimetric = 2000;
							break;

						case 6920 :
							nHeightInHimetric = 3000;
							break;

						case 6930 :
							nHeightInHimetric = 4000;
							break;
					}

					OutlineDoc_AddTopLineCommand(
							lpOutlineDoc, nHeightInHimetric);
					break;
				}


				case 5050 :
					OutlineApp_AboutCommand(lpOutlineApp);
					break;

				case 6050 :
					SetDebugLevelCommand();
					break;


				case 6060 :
					InstallMessageFilterCommand();
					break;

				case 6070 :
					RejectIncomingCommand();
					break;




#line 1829
				case 201 : {

					if (wNotifyCode == 2 ) {

#line 1836

						int nIndex = LineList_GetFocusLineIndex(lpLL);
						LPLINE lpLine = LineList_GetLine(lpLL, nIndex);

						if (lpLine &&
								Line_GetLineType(lpLine)==CONTAINERLINETYPE) {
							MSG msg;

							 fmemset((LPMSG)&msg,0,sizeof(msg));
							msg.hwnd = hWnd;
							msg.message = Message;
							msg.wParam = wParam;
							msg.lParam = lParam;

							ContainerLine_DoVerb(
									(LPCONTAINERLINE)lpLine,
									(0L) ,
									(LPMSG)&msg,
									1 ,
									1
							);
						}

#line 1896
					}
					break;
				}



				default:


					if (wID >= 10000 ) {

						OleDbgPrint(2,"","\r\n",0) ;
						OleDbgPrint(3,g_szDbgPrefix,"ContainerDoc_ContainerLineDoVerbCommand\r\n",1);
						ContainerDoc_ContainerLineDoVerbCommand(
								(LPCONTAINERDOC)lpOutlineDoc,
								(LONG)(wID-10000 )
						);
						OleDbgPrint(3,g_szDbgPrefix,"End\r\n",-1);
						break;
					}

					return DefWindowProc(hWnd, Message, wParam, lParam);
			}

			break;
		}
		default:

			if (Message == g_uMsgHelp) {
#line 1929

				OutlineDoc_DialogHelp((HWND)wParam, ((WORD)(DWORD)(lParam)) );
				break;
			}




			return DefWindowProc(hWnd, Message, wParam, lParam);
	}

	return (LRESULT)0;

}










LRESULT  _far  _pascal LineListWndProc(
	HWND   hWnd,
	UINT   Message,
	WPARAM wParam,
	LPARAM lParam
)
{
	HWND         hwndParent = GetParent ( hWnd );
	LPOUTLINEAPP lpOutlineApp = (LPOUTLINEAPP)g_lpApp;
	LPOUTLINEDOC lpOutlineDoc = (LPOUTLINEDOC) GetWindowLong( hwndParent, 0 );
	LPLINELIST   lpLL = OutlineDoc_GetLineList(lpOutlineDoc);


	LPOLEAPP     lpOleApp = (LPOLEAPP)lpOutlineApp;
	LPOLEDOC     lpOleDoc = (LPOLEDOC)lpOutlineDoc;




#line 1981
	switch (Message) {

		case 0x0008 :
#line 1986

#line 1990
				LineList_RemoveSel(lpLL);
			break;

		case 0x0007 :


#line 2018

			LineList_RestoreSel(lpLL);

			break;



#line 2036
		case 0x0102 :
		{
			OutlineDoc_SetFormulaBarEditFocus(lpOutlineDoc, 1 );
			FrameTools_FB_SetEditText(lpOutlineDoc->m_lpFrameTools, 0 );
			FrameTools_FB_SendMessage(
					lpOutlineDoc->m_lpFrameTools,
					7000 ,
					Message,
					wParam,
					lParam
			);

			return (LRESULT)0;
		}



#line 2079
		case 0x0114 :
		{
			LPHEADING lphead = OutlineDoc_GetHeading(lpOutlineDoc);

			Heading_CH_SendMessage(lphead, Message, wParam, lParam);

			break;
		}

#line 2093

		case 0x000F :
		{
			Heading_RH_Scroll(OutlineDoc_GetHeading(lpOutlineDoc), hWnd);
			break;
		}



		case 0x0202 :
		{


			if (lpOleDoc->m_fPendingDrag) {
#line 2109

				ReleaseCapture();
				KillTimer(hWnd, 1);
				lpOleDoc->m_fPendingDrag = 0 ;
			}




#line 2137
			break;
		}

		case 0x0201 :
		{
			POINT pt;

			pt.x = (int)(short)((WORD)(DWORD)(lParam)) ;
			pt.y = (int)(short)((WORD)((((DWORD)(lParam)) >> 16) & 0xFFFF)) ;




#line 2201

			if ( OleDoc_QueryDrag(lpOleDoc, pt.y) ) {
				lpOleDoc->m_fPendingDrag = 1 ;
				lpOleDoc->m_ptButDown = pt;
				SetTimer(hWnd, 1, lpOleApp->m_nDragDelay, 0 );
				SetCapture(hWnd);

#line 2214


				return (LRESULT)0;
			}


			break;
		}


		case 0x0200 : {



			int  x = (int)(short)((WORD)(DWORD)(lParam)) ;
			int  y = (int)(short)((WORD)((((DWORD)(lParam)) >> 16) & 0xFFFF)) ;
			POINT pt = lpOleDoc->m_ptButDown;
			int nDragMinDist = lpOleApp->m_nDragMinDist;

			if (lpOleDoc->m_fPendingDrag) {

				if (! ( ((pt.x - nDragMinDist) <= x)
						&& (x <= (pt.x + nDragMinDist))
						&& ((pt.y - nDragMinDist) <= y)
						&& (y <= (pt.y + nDragMinDist)) ) ) {

					DWORD dwEffect;


					ReleaseCapture();
					KillTimer(hWnd, 1);
					lpOleDoc->m_fPendingDrag = 0 ;


					dwEffect = OleDoc_DoDragDrop( lpOleDoc );


#line 2269
					return (LRESULT)0;
				}
				else {
#line 2274

					return (LRESULT)0;
				}
			}




#line 2307
			break;
		}



		case 0x0113 :
		{
			DWORD dwEffect;


			ReleaseCapture();
			KillTimer(hWnd, 1);
			lpOleDoc->m_fPendingDrag = 0 ;


			dwEffect = OleDoc_DoDragDrop( lpOleDoc );

#line 2339
			break;
		}


		case 0x0020 :
		{
			RECT rc;
			POINT ptCursor;

#line 2360
			GetCursorPos((POINT  _far*)&ptCursor);
			ScreenToClient(hWnd, (POINT  _far*)&ptCursor);
			GetClientRect(hWnd, (LPRECT)&rc);


			if (! PtInRect((LPRECT)&rc, ptCursor) )
				SetCursor(LoadCursor(0 , ((LPCSTR)((void  _far*)((LONG)(((WORD)(((32512)))) | (((DWORD)((WORD)((0)))) << 16))) ) )  ) );



			else if ( OleDoc_QueryDrag ( lpOleDoc, ptCursor.y) )
				SetCursor(LoadCursor(0 , ((LPCSTR)((void  _far*)((LONG)(((WORD)(((32512)))) | (((DWORD)((WORD)((0)))) << 16))) ) )  ) );


			else
				SetCursor(lpOutlineApp->m_hcursorSelCur);

			return (LRESULT)1 ;
		}


#line 2412
	}

	return CallWindowProc(
			(WNDPROC)lpOutlineApp->m_ListBoxWndProc,
			hWnd,
			Message,
			wParam,
			lParam
	);

}






int GetAccelItemCount(HACCEL hAccel)
{
	#pragma pack(1)
	typedef struct tagACCELERATOR
	{
		BYTE    fFlags;
		WORD    wEvent;
		WORD    wID;
	} ACCELERATOR;
	#pragma pack()


	ACCELERATOR  _far* pAccel;
	int cAccelItems = 1;
	if (hAccel == 0  ||
		(pAccel = (ACCELERATOR  _far*)LockResource((HGLOBAL)hAccel)) == 0 )
	{


		return 0;
	}

	while ((pAccel->fFlags & 0x80) == 0)
	{
		++cAccelItems;
		++pAccel;
	}
	GlobalUnlock((HGLOBAL)hAccel) ;
	return cAccelItems;
}
