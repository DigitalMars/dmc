// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cboxctrl.h"

/////////////////////////////////////////////////////////////////////////////
// CCbox1Ctrl

IMPLEMENT_DYNCREATE(CCbox1Ctrl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCbox1Ctrl properties

CString CCbox1Ctrl::GetListField()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetListField(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CCbox1Ctrl::GetBoundText()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetBoundText(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

CString CCbox1Ctrl::GetBoundColumn()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetBoundColumn(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

long CCbox1Ctrl::GetStyle()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetStyle(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

long CCbox1Ctrl::GetMousePointer()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetMousePointer(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

BOOL CCbox1Ctrl::GetLocked()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetLocked(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

LPDISPATCH CCbox1Ctrl::GetMouseIcon()
{
	LPDISPATCH result;
	GetProperty(0x7, VT_DISPATCH, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x7, VT_DISPATCH, propVal);
}

BOOL CCbox1Ctrl::GetIntegralHeight()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetIntegralHeight(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

long CCbox1Ctrl::GetSelStart()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetSelStart(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

long CCbox1Ctrl::GetSelLength()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetSelLength(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

CString CCbox1Ctrl::GetSelText()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetSelText(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

long CCbox1Ctrl::GetMatchEntry()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetMatchEntry(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

VARIANT CCbox1Ctrl::GetSelectedItem()
{
	VARIANT result;
	GetProperty(0xd, VT_VARIANT, (void*)&result);
	return result;
}

short CCbox1Ctrl::GetVisibleCount()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetVisibleCount(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

CString CCbox1Ctrl::GetText()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetText(LPCTSTR propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}

LPUNKNOWN CCbox1Ctrl::GetRowSource()
{
	LPUNKNOWN result;
	GetProperty(0x10, VT_UNKNOWN, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetRowSource(LPUNKNOWN propVal)
{
	SetProperty(0x10, VT_UNKNOWN, propVal);
}

OLE_COLOR CCbox1Ctrl::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

OLE_COLOR CCbox1Ctrl::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

LPFONTDISP CCbox1Ctrl::GetFont()
{
	LPFONTDISP result;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetFont(LPFONTDISP propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CCbox1Ctrl::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

BOOL CCbox1Ctrl::GetMatchedWithList()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

long CCbox1Ctrl::GetAppearance()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CCbox1Ctrl::SetAppearance(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCbox1Ctrl operations

void CCbox1Ctrl::ReFill()
{
	InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CCbox1Ctrl::GetVisibleItems(short nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nIndex);
	return result;
}

void CCbox1Ctrl::SetVisibleItems(short nIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, lpszNewValue);
}

void CCbox1Ctrl::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCbox1Ctrl::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
