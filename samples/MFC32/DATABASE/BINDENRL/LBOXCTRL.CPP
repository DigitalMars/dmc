// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "lboxctrl.h"

/////////////////////////////////////////////////////////////////////////////
// CLbox1Ctrl

IMPLEMENT_DYNCREATE(CLbox1Ctrl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CLbox1Ctrl properties

BOOL CLbox1Ctrl::GetLocked()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetLocked(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

CString CLbox1Ctrl::GetBoundText()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetBoundText(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

LPUNKNOWN CLbox1Ctrl::GetRowSource()
{
	LPUNKNOWN result;
	GetProperty(0x3, VT_UNKNOWN, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetRowSource(LPUNKNOWN propVal)
{
	SetProperty(0x3, VT_UNKNOWN, propVal);
}

CString CLbox1Ctrl::GetBoundColumn()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetBoundColumn(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

long CLbox1Ctrl::GetMousePointer()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetMousePointer(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

LPDISPATCH CLbox1Ctrl::GetMouseIcon()
{
	LPDISPATCH result;
	GetProperty(0x6, VT_DISPATCH, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x6, VT_DISPATCH, propVal);
}

BOOL CLbox1Ctrl::GetIntegralHeight()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetIntegralHeight(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

long CLbox1Ctrl::GetMatchEntry()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetMatchEntry(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

VARIANT CLbox1Ctrl::GetSelectedItem()
{
	VARIANT result;
	GetProperty(0x9, VT_VARIANT, (void*)&result);
	return result;
}

short CLbox1Ctrl::GetVisibleCount()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetVisibleCount(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

CString CLbox1Ctrl::GetText()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetText(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

CString CLbox1Ctrl::GetListField()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetListField(LPCTSTR propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}

LPFONTDISP CLbox1Ctrl::GetFont()
{
	LPFONTDISP result;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetFont(LPFONTDISP propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CLbox1Ctrl::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

OLE_COLOR CLbox1Ctrl::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

OLE_COLOR CLbox1Ctrl::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

BOOL CLbox1Ctrl::GetMatchedWithList()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

long CLbox1Ctrl::GetAppearance()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CLbox1Ctrl::SetAppearance(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CLbox1Ctrl operations

void CLbox1Ctrl::ReFill()
{
	InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CLbox1Ctrl::GetVisibleItems(short nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nIndex);
	return result;
}

void CLbox1Ctrl::SetVisibleItems(short nIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, lpszNewValue);
}

void CLbox1Ctrl::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLbox1Ctrl::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
