#ifndef __MCSDSC_H__
#define __MCSDSC_H__

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CrdoResultset;

/////////////////////////////////////////////////////////////////////////////
// CMcsDsc wrapper class

class CMcsDsc : public CWnd
{
protected:
	DECLARE_DYNCREATE(CMcsDsc)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x4f5f826a, 0x8aaf, 0x11ce, { 0xa7, 0x7f, 0x8, 0x0, 0x2b, 0x2f, 0x4e, 0x98 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	CString GetSql();
	void SetSql(LPCTSTR);
	long GetLoginTimeout();
	void SetLoginTimeout(long);
	CString GetVersion();
	void SetVersion(LPCTSTR);
	CString GetConnect();
	void SetConnect(LPCTSTR);
	long GetQueryTimeout();
	void SetQueryTimeout(long);
	long GetRowsetSize();
	void SetRowsetSize(long);
	long GetResultsetType();
	void SetResultsetType(long);
	long GetMaxRows();
	void SetMaxRows(long);
	CString GetLogMessages();
	void SetLogMessages(LPCTSTR);
	long GetKeysetSize();
	void SetKeysetSize(long);
	CString GetCaption();
	void SetCaption(LPCTSTR);
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	OLE_COLOR GetForeColor();
	void SetForeColor(OLE_COLOR);
	CString GetDataSourceName();
	void SetDataSourceName(LPCTSTR);
	short GetEditMode();
	void SetEditMode(short);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	CrdoResultset GetResultset();
	void SetResultset(LPDISPATCH);
	BOOL GetReadOnly();
	void SetReadOnly(BOOL);
	short GetOptions();
	void SetOptions(short);
	CString GetUserName();
	void SetUserName(LPCTSTR);
	CString GetPassword();
	void SetPassword(LPCTSTR);
	long GetCursorDriver();
	void SetCursorDriver(long);
	LPFONTDISP GetFont();
	void SetFont(LPFONTDISP);
	LPDISPATCH GetConnection();
	void SetConnection(LPDISPATCH);
	long GetEOFAction();
	void SetEOFAction(long);
	long GetBOFAction();
	void SetBOFAction(long);
	long GetErrorThreshold();
	void SetErrorThreshold(long);
	long GetLockType();
	void SetLockType(long);
	long GetPrompt();
	void SetPrompt(long);
	BOOL GetTransactions();
	void SetTransactions(BOOL);
	long GetAppearance();
	void SetAppearance(long);
	LPDISPATCH GetEnvironment();
	void SetEnvironment(LPDISPATCH);
	BOOL GetStillExecuting();
	void SetStillExecuting(BOOL);

// Operations
public:
	void Refresh();
	void UpdateControls();
	void UpdateRow();
	void BeginTrans();
	void CommitTrans();
	void RollbackTrans();
	void Cancel();
	void AboutBox();
};

#endif // __MCSDSC_H__
